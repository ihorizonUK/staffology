{
  "openapi": "3.0.1",
  "info": {
    "title": "Staffology Payroll API",
    "contact": {
      "name": "D Jackson",
      "url": "http://www.staffology.co.uk",
      "email": "duane@staffology.co.uk"
    },
    "version": "v1"
  },
  "paths": {
    "/account/activate": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Activate an Account",
        "description": "New accounts need to be activated to confirm Terms and Conditions have been accepted.",
        "operationId": "ActivateAccount",
        "parameters": [
          {
            "name": "brandCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Your account has been activated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/account/demo": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create Demo Employer",
        "description": "Creates a demo employer for the user",
        "operationId": "CreateDemoEmployerAccount",
        "responses": {
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/account/emailaddress": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Change Email Address",
        "description": "The user.PendingEmailAddress will be set to the give address and a new verification email will be sent.\r\nOnce the link in the email is clicked on then the user account will be updated to use the new email address",
        "operationId": "ChangeEmailAddressAccount",
        "parameters": [
          {
            "name": "emailAddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Your account has been activated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get Account Details",
        "description": "Returns the details for the authorised account.",
        "operationId": "GetAccount",
        "parameters": [
          {
            "name": "defaults",
            "in": "query",
            "description": "You can leave this empty, it's for internal use only.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defaultsKey",
            "in": "query",
            "description": "You can leave this empty, it's for internal use only.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/account/photo": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Update Photo",
        "description": "Submit an image here and we'll upload it, resize it to 200px squared and set it as the image for your account.",
        "operationId": "UpdatePhotoAccount",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/account/cookiepreferences": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Update Cookie Preferences",
        "description": "Updates cookie preferences for your account.",
        "operationId": "UpdateCookiePreferencesAccount",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CookiePreference"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CookiePreference"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CookiePreference"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CookiePreference"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CookiePreference"
                }
              }
            }
          }
        }
      }
    },
    "/account/profile": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Update Profile",
        "description": "Updates your profile. Only Salutation, FirstName, LastName, JobType, JobTitle, TelephoneNumber, BusinessName, Industry, Address and DisplayPrefs fields are updated.",
        "operationId": "ProfileAccount",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/account/invitations": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get Invitations",
        "description": "Returns any pending Invitations for the authorised user.\r\nIf the email address isn't yet verified then the Name displayed in the Item will be the users email address instead of the company name.\r\nInvitations cannot be accepted until the email address for the user is verified.",
        "operationId": "GetInvitationsAccount",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/account/verify": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Re-send Verification Email",
        "description": "Users should receive an email to verify their email address when they first register or if they change their email address.\r\nHowever, this API endpoint can be used to re-send the email.",
        "operationId": "VerifyAccount",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/account/verify/respond": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Verify Email Address",
        "description": "Used to process the link sent in an email to verify an email address.",
        "operationId": "VerifyResponseAccount",
        "parameters": [
          {
            "name": "u",
            "in": "query",
            "description": "The value from the link in the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "k",
            "in": "query",
            "description": "The value from the link in the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/account/Tenant": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get Tenant",
        "description": "Returns branding details for the specified tenant. This is used by the web app and is unlikely to be used by third-parties.",
        "operationId": "GetTenantAccount",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          }
        }
      }
    },
    "/account/employerdefaults": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get EmployerDefaults",
        "description": "Get the EmployerDefaults for the currently authorised User.",
        "operationId": "GetEmployerDefaultsAccount",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDefaults"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Set EmployerDefaults",
        "description": "Set the EmployerDefaults for the currently authorised User.",
        "operationId": "SetEmployerDefaultsAccount",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerDefaults"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerDefaults"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerDefaults"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerDefaults"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDefaults"
                }
              }
            }
          }
        }
      }
    },
    "/account/keys": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "List ApiKeys",
        "description": "",
        "operationId": "ListApiKeysAccount",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create ApiKey",
        "description": "Creates a new APIKey. The only property that's required or used is Name.\r\nA new ApiKey will be generated and returned to you.",
        "operationId": "CreateApiKeyAccount",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Item"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Item"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Item"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Item"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          }
        }
      }
    },
    "/account/keys/{id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get ApiKey",
        "description": "",
        "operationId": "GetApiKeyAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete ApiKey",
        "description": "",
        "operationId": "DeleteApiKeyAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/attachmentorders": {
      "post": {
        "tags": [
          "AttachmentOrder"
        ],
        "summary": "Create AttachmentOrder",
        "description": "Creates an AttachmentOrder for the Employee",
        "operationId": "CreateAttachmentOrder",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AttachmentOrder"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachmentOrder"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachmentOrder"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AttachmentOrder"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      },
      "get": {
        "tags": [
          "AttachmentOrder"
        ],
        "summary": "List AttachmentOrders",
        "description": "Lists all AttachmentOrders for the Employee",
        "operationId": "IndexAttachmentOrder",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/attachmentorders/{id}": {
      "get": {
        "tags": [
          "AttachmentOrder"
        ],
        "summary": "Get AttachmentOrder",
        "description": "Gets the AttachmentOrder specified by the Id for the Employee specified by the EmployeeId",
        "operationId": "GetAttachmentOrder",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the AttachmentOrder you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentOrder"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "AttachmentOrder"
        ],
        "summary": "Update AttachmentOrder",
        "operationId": "UpdateAttachmentOrder",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the AttachmentOrder you want to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AttachmentOrder"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachmentOrder"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachmentOrder"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AttachmentOrder"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentOrder"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AttachmentOrder"
        ],
        "summary": "Delete AttachmentOrder",
        "description": "Deletes the AttachmentOrder specified by the Id for the Employee specified by the EmployeeId",
        "operationId": "DeleteAttachmentOrder",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the AttachmentOrder you want to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/attachmentorders/payments/{taxYear}": {
      "get": {
        "tags": [
          "AttachmentOrder"
        ],
        "summary": "Get Payments",
        "description": "Lists all Payments made to AttachmentOrders for the Employee in the given TaxYear",
        "operationId": "PaymentsAttachmentOrder",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttachmentOrderPayment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/attachmentorders/{id}/documents": {
      "post": {
        "tags": [
          "AttachmentOrder"
        ],
        "summary": "Add Document",
        "description": "Adds document to the AttachmentOrder",
        "operationId": "AddDocumentAttachmentOrder",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the AttachmentOrder you want to attach documents to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/attachmentorders/{id}/documents/{documentId}": {
      "delete": {
        "tags": [
          "AttachmentOrder"
        ],
        "summary": "Delete AttachmentOrder Document",
        "description": "Deletes the document specified by the documentId for the AttachmentOrder specified by the Id",
        "operationId": "DeleteDocumentAttachmentOrder",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The Id of the Document you want to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "get": {
        "tags": [
          "AttachmentOrder"
        ],
        "summary": "Get AttachmentOrder Document",
        "description": "Gets the document specified by the documentId for the AttachmentOrder specified by the Id",
        "operationId": "GetDocumentAttachmentOrder",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The Id of the Document you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/audit": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Employer Audit Log",
        "operationId": "EmployerAuditListAudit",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to list Audit logs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "entity",
            "in": "query",
            "description": "Entity type name for which audit log should be retrieved",
            "schema": {
              "$ref": "#/components/schemas/EntityType"
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "description": "Id of the entity for which audit log should be retrieved",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Date from which records should be retrieved",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Date till records should be retrieved",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageNum",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/autoenrolment": {
      "get": {
        "tags": [
          "AutoEnrolment"
        ],
        "summary": "Get AE Assessments",
        "description": "Returns all AE Assessments for the Employee specified.",
        "operationId": "ListAutoEnrolment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee for which you want to retrieve AE Assessments",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments": {
      "post": {
        "tags": [
          "AutoEnrolment"
        ],
        "summary": "Assess Employee for AutoEnrolment",
        "description": "Asseses an Employee for AutoEnrolment",
        "operationId": "AssessAutoEnrolment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee you want to assess",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AeAssessment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AeAssessment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AeAssessment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/{id}": {
      "get": {
        "tags": [
          "AutoEnrolment"
        ],
        "summary": "Get AE Assessment",
        "description": "Returns the specified AeAssessment for the specified Employee",
        "operationId": "GetAutoEnrolment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee the assessment is for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Assessment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AeAssessment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AeAssessment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AeAssessment"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AutoEnrolment"
        ],
        "summary": "Delete AE Assessment",
        "description": "Deletes the AeAssessment specified by the Id for the Employee specified by the EmployeeId.",
        "operationId": "DeleteAutoEnrolment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee the assessment is for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Assessment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/last": {
      "get": {
        "tags": [
          "AutoEnrolment"
        ],
        "summary": "Get Last AE Assessment",
        "description": "Returns the most recent AeAssessment for an Employee",
        "operationId": "GetLastAutoEnrolment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee the assessment is for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AeAssessment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AeAssessment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AeAssessment"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/{id}/letter": {
      "get": {
        "tags": [
          "AutoEnrolment"
        ],
        "summary": "Get Letter",
        "description": "Returns either a PDF or HTML (depending on accept header) of the letter that needs to be sent to an employee as a result of the assessment.\r\nThe same ReportResponse model that is used for reports is used here.",
        "operationId": "GetLetterAutoEnrolment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee the assessment is for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Assessment",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/{id}/letter/email": {
      "post": {
        "tags": [
          "AutoEnrolment"
        ],
        "summary": "Email Letter",
        "description": "Send via email letter that needs to be sent to an employee as a result of the assessment.\r\nThe letter is then marked as having been sent.",
        "operationId": "EmailLetterAutoEnrolment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee the assessment is for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Assessment",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerEmail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerEmail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerEmail"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/{id}/letter/sent": {
      "put": {
        "tags": [
          "AutoEnrolment"
        ],
        "summary": "Mark Letter as Sent",
        "description": "Update an Assessment to mark the letter as sent.\r\nThis is done automatically if you send the letter via email so you'd\r\nonly need to use this is you are printing/posting the letter.",
        "operationId": "MarkLetterAsSentAutoEnrolment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee the assessment is for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Assessment",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/autoenrolment/state": {
      "put": {
        "tags": [
          "AutoEnrolment"
        ],
        "summary": "Update State",
        "description": "Updates the AutoEnrolment state for an Employee. \r\nYou would use this API call to process notices such as Opt Out, Opt In, etc.\r\nA new assessment is returned showing the result of the state change.",
        "operationId": "SetStateAutoEnrolment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee you want to set the status for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "The AutoEnrolment State to set for the Employee",
            "schema": {
              "$ref": "#/components/schemas/AeEmployeeState"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AeStatus"
            }
          },
          {
            "name": "stateDate",
            "in": "query",
            "description": "Optional. Will default to the current date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pensionId",
            "in": "query",
            "description": "Optional. Used to override the default AE Pension. Only valid with states of Enrol, VoluntaryJoiner or OptIn",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workerGroupId",
            "in": "query",
            "description": "Optional. Used to override the default AE Pension Workergroup. Only valid with states of Enrol, Join or OptIn. Must be provided if a pensionId is being provided.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AeAssessment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AeAssessment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AeAssessment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/autoenrolment/letters/pending": {
      "get": {
        "tags": [
          "AutoEnrolment"
        ],
        "summary": "Pending Letters",
        "description": "Returns all AE Assessments that are awaiting a letter to be sent",
        "operationId": "PendingLettersAutoEnrolment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/autoenrolment/letters/pending/postponement": {
      "get": {
        "tags": [
          "AutoEnrolment"
        ],
        "summary": "Pending Postponement Letters",
        "description": "Returns all employees that are awaiting a postponement letter to be sent.\r\nBecause there is no associated AeAssessment they can't be returned with the other pending letters",
        "operationId": "PendingPostponementLettersAutoEnrolment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/autoenrolment/renrol": {
      "get": {
        "tags": [
          "AutoEnrolment"
        ],
        "summary": "Cyclical Re-enrolment",
        "description": "Performs a Cyclical Re-enrolment. All employees that have opted-out or ceased membership  \r\nwill be re-assessed and auto-enrolled if necessary.\r\nThe employers cyclical re-enrolment date will then be updated to the date provided.",
        "operationId": "ReenrolAutoEnrolment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cyclicalReenrolmentDate",
            "in": "query",
            "description": "The new Cyclical Re-enrolment Date for the  Employer",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/benefits": {
      "post": {
        "tags": [
          "Benefits"
        ],
        "summary": "Create Benefit",
        "description": "Creates a Benefit for the Employee",
        "operationId": "CreateBenefits",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Benefit"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Benefit"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Benefit"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Benefit"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      },
      "get": {
        "tags": [
          "Benefits"
        ],
        "summary": "List Benefits",
        "description": "Lists all Benefits for the Employee",
        "operationId": "IndexBenefits",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/benefits/{id}": {
      "get": {
        "tags": [
          "Benefits"
        ],
        "summary": "Get Benefit",
        "description": "Gets the Benefit specified by the Id for the Employee specified by the EmployeeId",
        "operationId": "GetBenefits",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Benefit you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Benefit"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Benefits"
        ],
        "summary": "Update Benefit",
        "operationId": "UpdateBenefits",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Benefit you want to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Benefit"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Benefit"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Benefit"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Benefit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Benefit"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Benefits"
        ],
        "summary": "Delete Benefit",
        "description": "Deletes the Benefit specified by the Id for the Employee specified by the EmployeeId",
        "operationId": "DeleteBenefits",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Benefit you want to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/billing/directdebit": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Get DirectDebitMandate",
        "description": "Returns the DirectDebitMandate for the authenticated account",
        "operationId": "DirectDebitMandateBilling",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectDebitMandate"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Billing"
        ],
        "summary": "Delete DirectDebitMandate",
        "description": "Cancels and deletes the Direct Debit Mandate for the account",
        "operationId": "DeleteDirectDebitMandateBilling",
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/billing/directdebit/setup": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Setup DirectDebitMandate",
        "description": "Returns a Url to redirect a user to in order to start the process of setting up a Direct Debit Mandate.\r\nOnce the process is complete then the user is sent to the URL specified.",
        "operationId": "SetupDirectDebitMandateBilling",
        "parameters": [
          {
            "name": "returnUrl",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/billing/directdebit/confirm": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Confirm Direct Debit Setup",
        "description": "This endpoint is called by an external provider. You will never have to call this endpoint yourself.",
        "operationId": "ConfirmDirectDebitMandateBilling",
        "parameters": [
          {
            "name": "redirect_flow_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/billing/bills": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "List Bills",
        "description": "Returns a list of UsageBills for the authenticated account",
        "operationId": "BillsBilling",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/billing/bill/{id}": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Get Bill",
        "description": "Returns the specified UsageBill",
        "operationId": "BillBilling",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageBill"
                }
              }
            }
          }
        }
      }
    },
    "/billing/bill/{id}/csv": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Get Bill CSV",
        "description": "Returns the specified UsageBill as a CSV file",
        "operationId": "BillCsvBilling",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/billing/usage-stats": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Get UsageStats Report",
        "description": "Returns usage statistics data for all employers the logged in user has access to for the given date range.\r\nIf either of the dates are not provided then the values are defaulted to the first and last date of the previous calendar month.",
        "operationId": "GetUsageStatsBilling",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/bureau/processors": {
      "get": {
        "tags": [
          "Bureau"
        ],
        "summary": "List Allocated Processors",
        "description": "Returns a list of Users that have one or more Employers allocated to them as the Processor",
        "operationId": "ProcessorUsersBureau",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bureau/employers": {
      "get": {
        "tags": [
          "Bureau"
        ],
        "summary": "List Employers",
        "description": "Returns a list of Employers.\r\nThis differs from the main Employer list end point in that the metadata included is more relevant to Bureau activities\r\nIt also gives you the ability to filter based on the allocated Processor.\r\nNote: an entry is returned for each PaySchedule. So if the employer has both a Monthly and a Weekly PaySchedule then they'll appear twice",
        "operationId": "EmployersBureau",
        "parameters": [
          {
            "name": "processor",
            "in": "query",
            "description": "The Id of the Processor (User) you want to restrict the list to.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/bureau/settings": {
      "get": {
        "tags": [
          "Bureau"
        ],
        "summary": "Get BureauSettings",
        "description": "Returns the BureauSettings for the Employer",
        "operationId": "GetSettingsBureau",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BureauSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bureau"
        ],
        "summary": "Update BureauSettings",
        "description": "Updates the BureaSettings for the Employer",
        "operationId": "UpdateSettingsBureau",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BureauSettings"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BureauSettings"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BureauSettings"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BureauSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BureauSettings"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/bureau/settings/reportpack": {
      "get": {
        "tags": [
          "Bureau"
        ],
        "summary": "Get BureauSettings ReportPack",
        "description": "If a ReportPack is specified in the BureauSettings then it is returned, otherwise an empty ReportPAck is returned",
        "operationId": "GetReportPackBureau",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportPack"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/bureau/settings/processor": {
      "get": {
        "tags": [
          "Bureau"
        ],
        "summary": "Get Processor",
        "description": "If a Processor is specified in the BureauSettings then it is returned as a User, otherwise a 404 is returned",
        "operationId": "GetProcessorUserBureau",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/cis300/{taxYear}": {
      "get": {
        "tags": [
          "Cis300"
        ],
        "summary": "List Cis300",
        "description": "Returns all Cis300s for the given tax year.",
        "operationId": "ListCis300",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cis300"
        ],
        "summary": "Create Cis300",
        "description": "A Cis300 is automatically created for each Tax Month that you pay a Subcontractor.\r\nYou would only manually create one if you are intending to submit a nil return.",
        "operationId": "CreateCis300",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Cis300"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cis300"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Cis300"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Cis300"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cis300"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/cis300/{taxYear}/{id}": {
      "put": {
        "tags": [
          "Cis300"
        ],
        "summary": "Update Cis300",
        "description": "Updates an existing Cis300.",
        "operationId": "UpdateCis300",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Cis300"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cis300"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Cis300"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Cis300"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cis300"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Cis300"
        ],
        "summary": "Get Cis300",
        "description": "Retrieves a Cis300",
        "operationId": "GetCis300",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cis300"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cis300"
        ],
        "summary": "Delete Cis300",
        "description": "Not implemented, CIS300s cannot be deleted",
        "operationId": "DeleteCis300",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/rti/cis300/{taxYear}/{id}/submit": {
      "post": {
        "tags": [
          "Cis300"
        ],
        "summary": "Submit Cis300",
        "description": "Submits an existing Cis300 to HMRC.",
        "operationId": "SubmitCis300",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cis300"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/cis300/{taxYear}/{id}/markasaccepted": {
      "post": {
        "tags": [
          "Cis300"
        ],
        "summary": "Mark as Sent",
        "description": "Marks a Cis300 as having been sent to HMRC and accepted by them\r\nYou only use this method if the request has been submitted via an external system.\r\nIt will automatically be updated as Sent and/or Accepted if it's submitted via this API.",
        "operationId": "MarkAsAcceptedCis300",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cis300"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/cis300/requiringattention": {
      "get": {
        "tags": [
          "Cis300"
        ],
        "summary": "Cis300 Requiring Attention",
        "description": "Returns all Cis300 that have a Submission Status of NotSubmitted or ErrorResponse",
        "operationId": "RequiringAttentionCis300",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/cis-verification/{taxYear}": {
      "get": {
        "tags": [
          "CisVerification"
        ],
        "summary": "List CisVerificationRequest",
        "description": "Returns all CIS Verification Requests for the given tax year.",
        "operationId": "ListCisVerification",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CisVerification"
        ],
        "summary": "Create CisVerificationRequest",
        "description": "Creates a new CIS Verification Request.",
        "operationId": "CreateCisVerification",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CisVerification"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CisVerification"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CisVerification"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CisVerification"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CisVerification"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/cis-verification/{taxYear}/{id}": {
      "put": {
        "tags": [
          "CisVerification"
        ],
        "summary": "Update CisVerificationRequest",
        "description": "Updates an existing CIS Verification Request.",
        "operationId": "UpdateCisVerification",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CisVerification"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CisVerification"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CisVerification"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CisVerification"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CisVerification"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "CisVerification"
        ],
        "summary": "Get CisVerificationRequest",
        "description": "Retrieves the CIS Verification Request.",
        "operationId": "GetCisVerification",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CisVerification"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CisVerification"
        ],
        "summary": "Delete CisVerificationRequest",
        "description": "Deletes the CIS Verification Request.",
        "operationId": "DeleteCisVerification",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/rti/cis-verification/{taxYear}/{id}/submit": {
      "post": {
        "tags": [
          "CisVerification"
        ],
        "summary": "Submit CisVerificationRequest",
        "description": "Submits an existing CIS Verification Request to HMRC.",
        "operationId": "SubmitCisVerification",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CisVerification"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/cis-verification/{taxYear}/{id}/markasaccepted": {
      "post": {
        "tags": [
          "CisVerification"
        ],
        "summary": "Mark as Sent",
        "description": "Marks a CIS Verification Request as having been sent to HMRC and accepted by them\r\nYou only use this method if the request has been submitted via an external system.\r\nIt will automatically be updated as Sent and/or Accepted if it's submitted via this API.",
        "operationId": "MarkAsAcceptedCisVerification",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CisVerification"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/cis-verification/requiringattention": {
      "get": {
        "tags": [
          "CisVerification"
        ],
        "summary": "CisVerificationRequest Requiring Attention",
        "description": "Returns all CIS Verification Requests that have a Submission Status of NotSubmitted or ErrorResponse",
        "operationId": "RequiringAttentionCisVerification",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/departments": {
      "get": {
        "tags": [
          "Department"
        ],
        "summary": "List Departments",
        "description": "Lists all Departments for an Employer.",
        "operationId": "IndexDepartment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to list Departments",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Department"
        ],
        "summary": "Create Department",
        "description": "Creates a new Department for the Employer.",
        "operationId": "CreateDepartment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Department"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Department"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Department"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Department"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            }
          },
          "404": {
            "description": "Employer Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/departments/{code}": {
      "get": {
        "tags": [
          "Department"
        ],
        "summary": "Get Department",
        "description": "Gets the Department specified.",
        "operationId": "GetDepartment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Department belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Department"
        ],
        "summary": "Update Department",
        "description": "Updates a Department for the Employer.",
        "operationId": "UpdateDepartment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Department"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Department"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Department"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Department"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            }
          },
          "404": {
            "description": "Employer Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Department"
        ],
        "summary": "Delete Department",
        "description": "Deletes the specified Department.",
        "operationId": "DeleteDepartment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/dps/notices": {
      "post": {
        "tags": [
          "Dps"
        ],
        "summary": "Check for new Notices",
        "description": "Checks with HMRC for new notices. Returns an integer showing how many new notices were found",
        "operationId": "CheckForNoticesDps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Dps"
        ],
        "summary": "List Notices",
        "description": "Lists DPS Notices.",
        "operationId": "ListNoticesDps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "pageNum",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Dps"
        ],
        "summary": "Delete All Notices",
        "operationId": "DeleteAllDps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer that you want to delete all notices for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/dps/notices/xml": {
      "post": {
        "tags": [
          "Dps"
        ],
        "summary": "Parse notices from XML",
        "description": "Checks the supplied XML string for notices. They're then processed in the same was as if received from HMRC.\r\nOnly used for testing the parsing of DPS XML.\r\nReturns an integer showing how many new notices were found",
        "operationId": "ParseXmlDps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/dps/notices/{id}": {
      "get": {
        "tags": [
          "Dps"
        ],
        "summary": "Get Notice",
        "description": "Returns the specified DPS Notice.",
        "operationId": "GetDps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the DpsNotice you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DpsNotice"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Dps"
        ],
        "summary": "Apply Notice",
        "description": "Applies the specified DPS Notice.",
        "operationId": "ApplyDps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the DpsNotice you want to apply.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DpsNotice"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Dps"
        ],
        "summary": "Delete Notice",
        "operationId": "DeleteDps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the DpsNotice belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the DsNotice you want to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/dps/settings": {
      "get": {
        "tags": [
          "Dps"
        ],
        "summary": "Get DPS Settings",
        "description": "Returns the DpsSettings for the Employer",
        "operationId": "GetDpsSettingsDps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DpsSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Dps"
        ],
        "summary": "Update DPS Settings",
        "description": "Updates the DpsSettings for the Employer",
        "operationId": "UpdateDpsSettingsDps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DpsSettings"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DpsSettings"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DpsSettings"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DpsSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DpsSettings"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/email": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "List Emails",
        "description": "Returns a list of all emails sent for this Employer.",
        "operationId": "IndexEmail",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "pageNum",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/email/{emailId}": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Get Email",
        "description": "Returns the email along with its status.",
        "operationId": "GetEmailEmail",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerEmail"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Re-send Email",
        "description": "Re-send an existing email.",
        "operationId": "ResendEmailEmail",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerEmail"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/email/settings": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Get MailSettings",
        "description": "Returns the MailSettings for an Employer.",
        "operationId": "GetMailSettingsEmail",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Email"
        ],
        "summary": "Update MailSettings",
        "description": "Updates the MailSettings for an Employer.",
        "operationId": "UpdateMailSettingsEmail",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MailSettings"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailSettings"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MailSettings"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MailSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailSettings"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/email/settings/test": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Send Test Email",
        "description": "This API call will generate a test email based on your MailSettings.",
        "operationId": "TestMailSettingsEmail",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The address to send a test email to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerEmail"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/email/settings/verify": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Email Verification (Request)",
        "description": "If the user attempts to use a non-verified email address in their MailSettings then we'll send them a verification email.\r\nThis API endpoint can be used to re-send the email.",
        "operationId": "VerifyMailSettingsEmail",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "Email"
        ],
        "summary": "Email Verification (Respond)",
        "description": "Used to process the link sent in an email to verify an email address that's being used in MailSettings.",
        "operationId": "VerifyMailSettingsResponseEmail",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The employer Id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "u",
            "in": "query",
            "description": "The value from the link in the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "k",
            "in": "query",
            "description": "The value from the link in the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Create a new Employee",
        "description": "Creates an Employee for the Employer specified.\r\nIf you don't provide PayOptions then the DefaultPayOptions from the Employer will be used",
        "operationId": "CreateEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer you are creating the Employee for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          },
          "404": {
            "description": "Employer Not Found"
          }
        }
      },
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "List Employees",
        "operationId": "IndexEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to see Employees",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "pageNum",
            "in": "query",
            "description": "Zero-based page number, used in conjunction with pageSize",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Restrict the results to employees with the given status",
            "schema": {
              "$ref": "#/components/schemas/EmployeeStatus"
            }
          },
          {
            "name": "deptCode",
            "in": "query",
            "description": "If specified then only employees assigned to this department code will be listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pensionSchemeId",
            "in": "query",
            "description": "If specified then only employees enrolled into the given pension scheme will be listed.\r\n            If empty guid(00000000-0000-0000-0000-000000000000) is passed in all employees not enrolled into any pension scheme will be listed.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/import": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Import CSV",
        "description": "Import employee data from a CSV file.",
        "operationId": "ImportCsvEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format of the CSV file.",
            "schema": {
              "$ref": "#/components/schemas/CsvFileFormat"
            }
          },
          {
            "name": "previewOnly",
            "in": "query",
            "description": "Set to true and nothing will be imported but you'll be shown a preview of the data.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "allowUpdates",
            "in": "query",
            "description": "Set to true and if the payroll code matches an existing employee then that employee will be updated.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{id}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get an Employee",
        "operationId": "GetEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employee you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee"
        ],
        "summary": "Update an Employee",
        "operationId": "UpdateEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employee you want to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      },
      "delete": {
        "tags": [
          "Employee"
        ],
        "summary": "Delete an Employee",
        "operationId": "DeleteEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employee you want to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{id}/rehire": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Rehire an Employee",
        "description": "If an employee has left and you want to rehire him/her, then this method will create a copy of the employee record but with a new payroll code",
        "operationId": "ReHireEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employee you want to rehire.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/employees/delete": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Delete Employees",
        "description": "Used to delete multiple employees.\r\nThe body should contain an array of Ids to identify the employees to delete.",
        "operationId": "DeleteMultipleEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employees belong",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/employers/{employerId}/employees/leavers": {
      "put": {
        "tags": [
          "Employee"
        ],
        "summary": "Mark as Leavers",
        "description": "Used to mark multiple employees as leavers.\r\nThe body should contain an array of Ids to identify the employees to update.",
        "operationId": "MarkAsLeaversEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employees belong",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date the employees left or are leaving",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "emailP45",
            "in": "query",
            "description": "If set to true, the employee will be email a P45 if they have an email address",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          }
        }
      },
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "List Leavers",
        "description": "Returns a list of all Employees that have a leaving date set",
        "operationId": "LeaversEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to see Leavers",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "onlyUnsentP45s",
            "in": "query",
            "description": "If set to true then only employees that don't have the P45Sent set to true will be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/onhold": {
      "put": {
        "tags": [
          "Employee"
        ],
        "summary": "Mark as On Hold",
        "description": "Used to mark multiple employees as On Hold or not On Hold.\r\nThe body should contain an array of Ids to identify the employees to update.",
        "operationId": "SetOnHoldEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employees belong",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "onHold",
            "in": "query",
            "description": "The OnHold status to set",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{id}/photo": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Update Photo",
        "description": "If you already have a URL for the employee photo then you can just set the PhotoUrl property of the Employee.\r\nAlternatively, submit an image here and we'll upload it, resize it to 200px squared and set the PhotoUrl for you.",
        "operationId": "UpdatePhotoEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employee you want to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employee"
        ],
        "summary": "Delete Photo",
        "operationId": "DeletePhotoEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employee you want to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/employees/search": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Search Employer for Employees",
        "description": "Search for an employee of the specified employer based on their name or payroll code.\r\nEnsure your query is at least 3 characters long or you wont get any results.",
        "operationId": "SearchEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to search.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The search string (at least 3 characters).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exludeCisSubContactors",
            "in": "query",
            "description": "If set to true, then we'll only search employees that aren't labelled as CIS Subcontractors",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/expiring-rtw": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Expiring RightToWork",
        "description": "Returns a list of Item representing Employees that have a RightToWork with a DocumentExpiring date within the next numberOfDays days.",
        "operationId": "ExpiringRtwEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to search.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "numberOfDays",
            "in": "query",
            "description": "The number of days in the future to look got expiry dates.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/search/payrollcode": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get Employee by Payroll Code",
        "description": "Get an employee by their payroll code. Will return an Item that contains the Id for you to retrieve the full Employee record",
        "operationId": "SearchByPayrollCodeEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "The payroll code to look for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{id}/payrunentries/{taxYear}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "PayRunEntries for Employee",
        "description": "List PayRunEntries for the given Employee in the specified TaxYear",
        "operationId": "PayRunEntriesEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to search.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Employee Id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The TaxYear for which you want to list PayRunEntries.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{id}/awe": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Average Weekly Earnings",
        "description": "Calculates the Average Weekly Earnings for an Employee at the given date.\r\nYou can optionally include a LeaveType and we'll adjust the given date accordingly\r\nFor example if you specify Maternity then it'll be moved back by 15 weeks",
        "operationId": "AverageWeeklyEarningsEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Employee Id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date at which you want to calculate the earnings from.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "leaveType",
            "in": "query",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/LeaveType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AverageWeeklyEarnings"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{id}/basehourlyrate": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Calculate Base Hourly Rate",
        "operationId": "BaseHourlyRateEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Employee Id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "query",
            "description": "The frequency that this Employee is paid.",
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "payBasis",
            "in": "query",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/PayBasis"
            }
          },
          {
            "name": "payAmount",
            "in": "query",
            "description": "The amount the Employee is regularly paid each period.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{id}/basedailyrate": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Calculate Base Daily Rate",
        "operationId": "BaseDailyRateEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Employee Id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "query",
            "description": "The frequency that this Employee is paid.",
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "payBasis",
            "in": "query",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/PayBasis"
            }
          },
          {
            "name": "payAmount",
            "in": "query",
            "description": "The amount the Employee is regularly paid each period.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{id}/{taxYear}/minimum-wage": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Minimum Wage",
        "description": "Calculates the National Minimum Wage for this employee for the given TaxYear and based on \r\ntheir age at the given date",
        "operationId": "MinimumWageEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Employee Id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The TaxYear",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date for which we should calculate the employees age, for not provided we'll use todays date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/payoptions": {
      "put": {
        "tags": [
          "Employee"
        ],
        "summary": "Apply PayOptions",
        "description": "Overwrite the PayOptions for all employees with the values provided.\r\nCurrently only the following fields are updated: period, payAmount, basis, payamountMultiplier, nationalMinimumWage and regularPaylines.",
        "operationId": "ApplyPayOptionsEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the employees belong.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PayOptions"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayOptions"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayOptions"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayOptions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/employers/{employerId}/employees/payincrease": {
      "put": {
        "tags": [
          "Employee"
        ],
        "summary": "Apply Pay Increase",
        "description": "Increases the PayOptions.PayAmount and PayOptions.BaseHourlyRate by the percentage given.",
        "operationId": "ApplyPayIncreaseEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the employees belong.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "percentage",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "allEmployees",
            "in": "query",
            "description": "Set this to true",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{id}/departments": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get Employee Departments",
        "operationId": "GetDepartmentMembershipsEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employee you want to retrieve Departments for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DepartmentMembership"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee"
        ],
        "summary": "Set Employee Departments",
        "operationId": "SetDepartmentMembershipsEmployee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employee you want to set Departments for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DepartmentMembership"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DepartmentMembership"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DepartmentMembership"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DepartmentMembership"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DepartmentMembership"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers": {
      "post": {
        "tags": [
          "Employer"
        ],
        "summary": "Create an Employer",
        "description": "Use this method to create a new Employer\r\nThe only required field is the Employer name.",
        "operationId": "CreateEmployer",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Employer"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Employer"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Employer"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Employer"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success - the employer has been created and is returned in the body.\r\nThe unique URL for this employer is returned in the Location header.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "List Employers",
        "operationId": "IndexEmployer",
        "parameters": [
          {
            "name": "employerGroupCode",
            "in": "query",
            "description": "Optionally specify the code of an EmployerGroup to only see employers that are a member of that group.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/import": {
      "post": {
        "tags": [
          "Employer"
        ],
        "summary": "Import CSV",
        "description": "Import employers from a CSV file.",
        "operationId": "ImportCsvEmployer",
        "parameters": [
          {
            "name": "previewOnly",
            "in": "query",
            "description": "Set to true and nothing will be imported but you'll be shown a preview of the data.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/search": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Search Employers",
        "operationId": "SearchEmployer",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/employees/search": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Search Employees",
        "description": "Search all employers for an employee based on their name or payroll code.\r\nEnsure your query is at least 3 characters long or you wont get any results.",
        "operationId": "SearchEmployeesEmployer",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "The search string (at least 3 characters).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exludeCisSubContactors",
            "in": "query",
            "description": "If set to true, then we'll only search employees that aren't labeled as CIS Subcontractors",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{id}": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Get an Employer",
        "operationId": "GetEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employer"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employer"
        ],
        "summary": "Update an Employer",
        "operationId": "UpdateEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer you want to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Employer"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Employer"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Employer"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Employer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employer"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Employer"
        ],
        "summary": "Delete an Employer",
        "operationId": "DeleteEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer you want to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{id}/calendar": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Get Employer Calendar",
        "description": "Get a list of upcoming CalendarEntry for the Employer.",
        "operationId": "CalendarEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{id}/users": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "List Users",
        "description": "Returns a list of Users that have access to the given Employer",
        "operationId": "ListUsersEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer you want a list of Users for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{id}/users/owner": {
      "put": {
        "tags": [
          "Employer"
        ],
        "summary": "Set Owner",
        "description": "Sets the owner for the employer. You must be the owner of the Employer to set this value.\r\nThe user you are setting as the owner must already have the role Admin.\r\nYou can get a list of users from the ListUsers endpoint.",
        "operationId": "SetOwnerEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer you want to change the ownership of.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The Id of the User you want a change ownership to. They must already be a user for this employer and have the admin role assigned to them.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            "application/json": {
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            "text/json": {
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{id}/users/{userId}": {
      "delete": {
        "tags": [
          "Employer"
        ],
        "summary": "Remove User",
        "description": "Removes a User from an Employer.\r\nYou cannot remove Users that are marked as the owner of the Employer.\r\nYou must be the owner of the Employer in order to remove other Users.",
        "operationId": "RemoveUserEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer you want to remove the User from.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The Id of the User you want to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{id}/suggestPayrollCode": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Suggest Payroll Code",
        "description": "This helper method returns a unique code for the next Employee that you create for the specified Employer.\r\nYou don't have to use the value provided, you can use any value that is unqiue across Employees for the Employer.",
        "operationId": "SuggestPayCodeEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer you want a suggestion for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{id}/logo": {
      "post": {
        "tags": [
          "Employer"
        ],
        "summary": "Update Employer Logo",
        "description": "If you already have a URL for the employer Logo then you can just set the LogoUrl property of the Employer.\r\nAlternatively, submit a logo here and we'll upload it and set the LogoUrl for you.",
        "operationId": "UpdateLogoEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer you want to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employer"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{id}/custompayslip": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Get Payslip Customisations",
        "description": "Get the settings used to customise PaySlips for this Employer",
        "operationId": "CustomPayslipEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer you want customisations for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayslipCustomisation"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employer"
        ],
        "summary": "Update Payslip Customisations",
        "description": "Set the settings used to customise PaySlips for this Employer",
        "operationId": "UpdateCustomPayslipEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer you want customisations for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PayslipCustomisation"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayslipCustomisation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayslipCustomisation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayslipCustomisation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayslipCustomisation"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{id}/YearEnd": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Review Year End Changes",
        "description": "View the changes that will be made when you start the next tax year for the employer",
        "operationId": "ReviewYearEndEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/YearEnd"
                }
              }
            }
          },
          "404": {
            "description": "NotFound - \r\nWe don't yet support the tax year following the employers current tax year"
          }
        }
      },
      "put": {
        "tags": [
          "Employer"
        ],
        "summary": "Make Year End Changes",
        "description": "Apply the changes for the year end and start the next tax year for the employer.",
        "operationId": "ApplyYearEndEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "You can suppress the emailing of P60s and/or CIS Statements by supplying a value of true for dontEmailP60s and/or dontEmailCisStatements",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/YearEnd"
                }
              }
            }
          },
          "404": {
            "description": "NotFound - \r\nWe don't yet support the tax year following the employers current tax year"
          }
        }
      }
    },
    "/employers/{id}/rti/requiringattention": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "RTI Documents Requiring Attention",
        "description": "Returns all RTI documents that have a Submission Status of NotSubmitted or ErrorResponse",
        "operationId": "RtiRequiringAttentionEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{id}/automation": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Get Automation Settings",
        "description": "Returns the AutomationSettings for the Employer",
        "operationId": "GetAutomationSettingsEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employer"
        ],
        "summary": "Update Automation Settings",
        "description": "Updates the AutomationSettings for the Employer",
        "operationId": "UpdateAutomationSettingsEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationSettings"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationSettings"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationSettings"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationSettings"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{id}/groups": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Get Employer Groups",
        "operationId": "GetGroupMembershipsEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer you want to retrieve Groups for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployerGroupMembership"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employer"
        ],
        "summary": "Set Employer Groups",
        "operationId": "SetGroupMembershipsEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer you want to set Groups for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EmployerGroupMembership"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EmployerGroupMembership"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EmployerGroupMembership"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EmployerGroupMembership"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployerGroupMembership"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{id}/openingbalances": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Get EmployerOpeningBalances",
        "description": "Returns the EmployerOpeningBalances for the Employer",
        "operationId": "GetEmployerOpeningBalancesEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerOpeningBalances"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employer"
        ],
        "summary": "Update EmployerOpeningBalances",
        "description": "Updates the EmployerOpeningBalances for the Employer for their StartYear",
        "operationId": "UpdateEmployerOpeningBalancesEmployer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Employer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerOpeningBalances"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerOpeningBalances"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerOpeningBalances"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerOpeningBalances"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerOpeningBalances"
                }
              }
            }
          }
        }
      }
    },
    "/employers/groups": {
      "get": {
        "tags": [
          "EmployerGroup"
        ],
        "summary": "List EmployerGroups",
        "description": "Lists all EmployerGroups for the user.",
        "operationId": "IndexEmployerGroup",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "EmployerGroup"
        ],
        "summary": "Create EmployerGroup",
        "description": "Creates a new EmployerGroup for the user.",
        "operationId": "CreateEmployerGroup",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerGroup"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerGroup"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerGroup"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerGroup"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerGroup"
                }
              }
            }
          }
        }
      }
    },
    "/employers/groups/{code}": {
      "get": {
        "tags": [
          "EmployerGroup"
        ],
        "summary": "Get EmployerGroup",
        "description": "Gets the EmployerGroup specified.",
        "operationId": "GetEmployerGroup",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerGroup"
                }
              }
            }
          },
          "404": {
            "description": "EmployerGroup Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "EmployerGroup"
        ],
        "summary": "Update EmployerGroup",
        "description": "Updates a EmployerGroup for the user.",
        "operationId": "UpdateEmployerGroup",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerGroup"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerGroup"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerGroup"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerGroup"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EmployerGroup"
        ],
        "summary": "Delete EmployerGroup",
        "description": "Deletes the specified EmployerGroup.",
        "operationId": "DeleteEmployerGroup",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/templates": {
      "get": {
        "tags": [
          "EmployerTemplate"
        ],
        "summary": "List EmployerTemplates",
        "description": "Lists all EmployerTemplates for the Employer specified.",
        "operationId": "IndexEmployerTemplate",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to list Pay Codes",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/templates/{type}": {
      "get": {
        "tags": [
          "EmployerTemplate"
        ],
        "summary": "Get EmployerTemplate",
        "description": "Gets the EmployerTemplate specified by the Type.",
        "operationId": "GetEmployerTemplate",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the EmployerTemplate belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "The EmployerTemplateType you want to retrieve.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EmployerTemplateType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerTemplate"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "EmployerTemplate"
        ],
        "summary": "Update EmployerTemplate",
        "description": "Updates the EmployerTemplate specified by the Type.\r\nThe only values need to supply are <code>Content</code>\r\nand (if applicable) <code>Subject</code>.\r\nIf these values are empty strings or not provided then the template will revert to the default values.",
        "operationId": "UpdateEmployerTemplate",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the EmployerTemplate belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EmployerTemplateType"
            }
          }
        ],
        "requestBody": {
          "description": "The EmployerTemplateType you want to retrieve.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerTemplate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerTemplate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerTemplate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerTemplate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerTemplate"
                }
              }
            }
          }
        }
      }
    },
    "/engine/config": {
      "get": {
        "tags": [
          "Engine"
        ],
        "summary": "Get Configuration",
        "description": "Returns the raw configuration data that is used as the basis for any calculations for the given tax year.\r\nYou would never need to use this configuration values yourself in any API calls. It is provided just for information purposes",
        "operationId": "ConfigEngine",
        "parameters": [
          {
            "name": "taxYear",
            "in": "query",
            "description": "The year that you want to retrieve details for. If not provided then current tax year will be used.",
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxYearConfig"
                }
              }
            }
          }
        }
      }
    },
    "/engine/config/{taxYear}/ni/{payPeriod}": {
      "get": {
        "tags": [
          "Engine"
        ],
        "summary": "Get National Insurance Thresholds",
        "description": "Returns the National Insurance thresholds for the given PayPeriod",
        "operationId": "GetNationalInsuranceThresholdsEngine",
        "parameters": [
          {
            "name": "taxYear",
            "in": "path",
            "description": "The year that you want to retrieve details for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "description": "The PayPeriod (ie, monthly) that you want to retrieve details for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodStart",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "periodEnd",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "effectiveDate",
            "in": "query",
            "description": "The date as of which you want to retrieve details for. If not provided then latest available details for the current tax year will be used.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NationalInsuranceCalculationPeriodValues"
                }
              }
            }
          }
        }
      }
    },
    "/engine/tax": {
      "get": {
        "tags": [
          "Engine"
        ],
        "summary": "Calculate Tax due",
        "description": "Calculates tax amount due, given the values specified.\r\nYou would never need to use this API call. It is provided just for information and testing purposes.\r\nAccess is limited so you'll probably receive a 401 response if you try to use it.",
        "operationId": "CalculateTaxEngine",
        "parameters": [
          {
            "name": "taxYear",
            "in": "query",
            "description": "If not provided then current tax year will be used.",
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "taxCode",
            "in": "query",
            "description": "If not provided then the default code for the tax year will be used.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gross",
            "in": "query",
            "description": "The gross amount for which tax should be calculated.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "periodStart",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "periodEnd",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "payPeriod",
            "in": "query",
            "description": "The PayPeriod (Weekly, Monthly, etc)",
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "The period that this payment is being made for",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "week1",
            "in": "query",
            "description": "If set to true then tax will be calculated in a Week1/Month1 basis",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "grossToDate",
            "in": "query",
            "description": "Gross pay to date",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 0
            }
          },
          {
            "name": "taxToDate",
            "in": "query",
            "description": "Tax paid to date",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        }
      }
    },
    "/engine/ni": {
      "get": {
        "tags": [
          "Engine"
        ],
        "summary": "Calculate NI due.",
        "description": "Calculates National Insurance Contributions due given the values specified.\r\nYou would never need to use this API call in practice. It is provided just for information and testing purposes.\r\nAccess is limited so you'll probably receive a 401 response if you try to use it.",
        "operationId": "CalculateNiEngine",
        "parameters": [
          {
            "name": "taxYear",
            "in": "query",
            "description": "If not provided then current tax year will be used.",
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "gross",
            "in": "query",
            "description": "The gross amount for which tax should be calculated.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "niCategory",
            "in": "query",
            "description": "The letter from the NI table",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payPeriod",
            "in": "query",
            "description": "The PayPeriod (Weekly, Monthly, etc)",
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NationalInsuranceCalculation"
                }
              }
            }
          }
        }
      }
    },
    "/engine/branding/{brandCode}": {
      "get": {
        "tags": [
          "Engine"
        ],
        "summary": "Tenant Branding",
        "description": "Returns Tenant Branding. Not for public use, will return 401",
        "operationId": "GetTenantBrandingEngine",
        "parameters": [
          {
            "name": "brandCode",
            "in": "path",
            "description": "The Id of the Tenant you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/eps/{taxYear}": {
      "get": {
        "tags": [
          "Eps"
        ],
        "summary": "List EPS",
        "description": "Returns all Employment Payment Summaries for the given tax year.",
        "operationId": "ListEps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Eps"
        ],
        "summary": "Create EPS",
        "description": "Creates a new Employer Payment Summary",
        "operationId": "CreateEps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Eps"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Eps"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Eps"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Eps"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Eps"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/eps/{taxYear}/{id}": {
      "put": {
        "tags": [
          "Eps"
        ],
        "summary": "Update EPS",
        "description": "Updates an existing Employment Payment Summary.",
        "operationId": "UpdateEps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Eps"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Eps"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Eps"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Eps"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Eps"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Eps"
        ],
        "summary": "Get EPS",
        "description": "Retrieves the Employer Payment Summary specified",
        "operationId": "GetEps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Eps"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Eps"
        ],
        "summary": "Delete Eps",
        "description": "Deletes the Eps.",
        "operationId": "DeleteEps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/rti/eps/{taxYear}/{id}/submit": {
      "post": {
        "tags": [
          "Eps"
        ],
        "summary": "Submit EPS",
        "description": "Submits an existing Employment Payment Summary to HMRC.",
        "operationId": "SubmitEps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Eps"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/eps/{taxYear}/{id}/markasaccepted": {
      "post": {
        "tags": [
          "Eps"
        ],
        "summary": "Mark as Sent",
        "description": "Marks an Employer Payment Summary as having been sent to HMRC and accepted by them.\r\nYou would only use this method if the EPS had been submitted via an external system.\r\nIt will automatically be updated as Sent and/or Accepted if it's submitted via this API.",
        "operationId": "MarkAsAcceptedEps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Eps"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/eps/requiringattention": {
      "get": {
        "tags": [
          "Eps"
        ],
        "summary": "EPS Requiring Attention",
        "description": "Returns all Employer Payment Summaries that have a Submission Status of NotSubmitted or ErrorResponse",
        "operationId": "RequiringAttentionEps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/eps/{taxYear}/{taxMonth}/recoverableamounts": {
      "get": {
        "tags": [
          "Eps"
        ],
        "summary": "Recoverable Amounts",
        "description": "Get all recoverable amounts (SMP, etc) for a given tax year, up to the given tax month",
        "operationId": "RecoverableAmountsEps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "taxMonth",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecoverableAmounts"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/exb/{taxYear}": {
      "get": {
        "tags": [
          "Exb"
        ],
        "summary": "List EXB",
        "description": "Returns all ExpensesAndBenefits for the given tax year.",
        "operationId": "ListExb",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Exb"
        ],
        "summary": "Create EXB",
        "description": "Creates a new Expenses And Benefits submission",
        "operationId": "CreateExb",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Exb"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Exb"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Exb"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Exb"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Eps"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/exb/{taxYear}/{id}": {
      "put": {
        "tags": [
          "Exb"
        ],
        "summary": "Update EXB",
        "description": "Updates an existing Expenses And Benefits submission.",
        "operationId": "UpdateExb",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Exb"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Exb"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Exb"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Exb"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exb"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Exb"
        ],
        "summary": "Get EXB",
        "description": "Retrieves the Expenses And Benefits submission specified",
        "operationId": "GetExb",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exb"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Exb"
        ],
        "summary": "Delete EXB",
        "description": "Deletes the EXB.",
        "operationId": "DeleteExb",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/rti/exb/{taxYear}/{id}/submit": {
      "post": {
        "tags": [
          "Exb"
        ],
        "summary": "Submit EXB",
        "description": "Submits an existing Expenses And Benefits submission to HMRC.",
        "operationId": "SubmitExb",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exb"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/exb/{taxYear}/{id}/markasaccepted": {
      "post": {
        "tags": [
          "Exb"
        ],
        "summary": "Mark as Sent",
        "description": "Marks an Expenses And Benefits submission as having been sent to HMRC and accepted by them.\r\nYou would only use this method if the EXB had been submitted via an external system.\r\nIt will automatically be updated as Sent and/or Accepted if it's submitted via this API.",
        "operationId": "MarkAsAcceptedExb",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exb"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/exb/requiringattention": {
      "get": {
        "tags": [
          "Exb"
        ],
        "summary": "EXB Requiring Attention",
        "description": "Returns all Expenses And Benefits submissions that have a Submission Status of NotSubmitted or ErrorResponse",
        "operationId": "RequiringAttentionExb",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/exb/{taxYear}/values": {
      "get": {
        "tags": [
          "Exb"
        ],
        "summary": "Annual Values",
        "description": "Returns an empty Exb showing the number of employees and total benefits for the year provided",
        "operationId": "AnnualValuesExb",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exb"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/external-data": {
      "get": {
        "tags": [
          "ExternalData"
        ],
        "summary": "List Providers",
        "description": "Returns a list of External Data Providers and indicates which the Employer has successfully authenticated with.",
        "operationId": "ListExternalData",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalDataProvider"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/companies": {
      "get": {
        "tags": [
          "ExternalData"
        ],
        "summary": "List Companies",
        "description": "Return a list of companies from the external data provider",
        "operationId": "CompaniesExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalDataCompany"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/nominals": {
      "get": {
        "tags": [
          "ExternalData"
        ],
        "summary": "List Nominal Codes",
        "description": "Return a list of Nominal Codes from the external data provider",
        "operationId": "NominalCodesExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/{taxYear}/{payPeriod}/{periodNumber}/journal": {
      "post": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Post Journal",
        "description": "Post a Journal for a payrun to the ExternalDataProvider\r\nA 200 response does not mean the journal was necessarily successfully posted.\r\nThe PayRunJournal is returned (without the Lines) so that you can inspect the status to determine success",
        "operationId": "PostJournalExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "description": "To identify the PayRun",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "description": "To identify the PayRun",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "To identify the PayRun",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Set to true if you want to force the journal to be posted even if it already has been",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunJournal"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/{taxYear}/{payPeriod}/{periodNumber}/payments": {
      "post": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Post Payments",
        "description": "Post Payments for a payrun to the ExternalDataProvider\r\nA 200 response does not mean the payments were necessarily successfully posted.\r\nThe BankPaymentInstruction is returned (without the payments) so that you can inspect the status to determine success",
        "operationId": "PostPaymentsExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "description": "To identify the PayRun",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "description": "To identify the PayRun",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "To identify the PayRun",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "incEmployees",
            "in": "query",
            "description": "Include payments for employees",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "incHmrc",
            "in": "query",
            "description": "Include payments for HMRC (if any)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "incPensions",
            "in": "query",
            "description": "Include payments for Pension Providers (if any)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "incAeos",
            "in": "query",
            "description": "Include any payment due as a reult of AttachmentOrders (if any)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "incDeductions",
            "in": "query",
            "description": "Include any payment due to Deductions that are set to be paid to a Payee (if any)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Set to true if you want to force the payments to be posted even if it already has been",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "paymentDate",
            "in": "query",
            "description": "Optional. If a value is provided then it'll be used in place of the payment date for the payment.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankPaymentInstruction"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/employees": {
      "get": {
        "tags": [
          "ExternalData"
        ],
        "summary": "List Employees",
        "description": "Return a list of ExternalEmployeeMapping for Employees in the external data provider.\r\nThe metadata of the Item contains a field called externalId. This can be used to retrieve the full employee record.",
        "operationId": "EmployeesExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Import Employees",
        "description": "Import Employees from the external data provider.",
        "operationId": "ImportEmployeesExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The externalIds to import",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/employees/push": {
      "put": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Push Employees",
        "description": "Push employees to the ExternalDataProvider.",
        "operationId": "PushEmployeesExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/payslips": {
      "post": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Push Payslips",
        "description": "Push payslips to the ExternalDataProvider.",
        "operationId": "PushPayslipsExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "force",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/p45": {
      "post": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Push P45",
        "description": "Push a P45 to the ExternalDataProvider.",
        "operationId": "PushP45ExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/p60": {
      "post": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Push P60",
        "description": "Pushes a P60 to the ExternalDataProvider.",
        "operationId": "PushP60ExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/p11d": {
      "post": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Push P11D",
        "description": "Pushes a P11D for the given employee to the ExternalDataProvider.",
        "operationId": "PushP11DExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/p11ds": {
      "post": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Push P11Ds",
        "description": "Pushes all P11Ds for the given TaxYear to the ExternalDataProvider.",
        "operationId": "PushP11DsExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/pension-letter": {
      "post": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Push Pension Letter",
        "description": "Pushes a Pension Letter for the given employee to the ExternalDataProvider.",
        "operationId": "PushPensionLetterExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "assessmentId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/employees/{employeeId}": {
      "get": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Get Employee",
        "description": "Return an ExternalEmployeeMapping for the specified Employee from the external data provider",
        "operationId": "EmployeeExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the employee in the external data provider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalEmployeeMapping"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Update Employee",
        "description": "Update an ExternalEmployeeMapping to map/unmap/import/ignore an employee from an external data provider",
        "operationId": "UpdateEmployeeExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the employee in the external data provider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalEmployeeMapping"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalEmployeeMapping"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalEmployeeMapping"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalEmployeeMapping"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalEmployeeMapping"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/employees/i/sync-all": {
      "get": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Sync Employees",
        "description": "Syncs data from the ExternalDataProvider to update all mapped employees",
        "operationId": "SyncAllEmployeesExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/employees/{employeeId}/sync": {
      "get": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Sync Employee",
        "description": "Syncs data from the ExternalDataProvider to update the specified mapped employee.\r\nAny changes made as a result of the sync are show in the metadata.logs property.",
        "operationId": "SyncEmployeeExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the employee in the external data provider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/employees/{employeeId}/logs": {
      "get": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Get Employee Logs",
        "description": "Return a list of changes made locally to this employee based on changes in the external data provider",
        "operationId": "EmployeeLogsExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the employee in the external data provider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/{taxYear}/{payPeriod}/{periodNumber}/leave": {
      "post": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Sync Leave",
        "description": "Sync Leave from the ExternalDataProvider for the specified PayRun.\r\nReturns a JSON object indicating how many Leaves have been created, updated or deleted, etc.",
        "operationId": "SyncLeaveExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/contributions/{taxYear}/{payPeriod}/{periodNumber}": {
      "get": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Contributions CSV File",
        "description": "Returns a CSV file containing contributions for the specified payrun in a format specific to the ExternalDataProvider",
        "operationId": "PensionContributionsCsvExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "schemeId",
            "in": "query",
            "description": "The Id of the Pension Scheme you want a file for.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/time-and-attendance": {
      "get": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Get Time And Attendance Data",
        "description": "Return a list of PayOptionsImport representing Time and Attendance data from the specified ExternalDataProvider, for to specified date range",
        "operationId": "TimeAndAttendanceExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayOptionsImport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/http-get": {
      "get": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Http Get",
        "description": "Perform a GET to given URL of the specified ExtenalDataProvider API",
        "operationId": "GetRequestExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "url",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/http-post": {
      "post": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Http Post",
        "description": "Perform a GET to given URL of the specified ExtenalDataProvider API",
        "operationId": "PostRequestExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "url",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": { }
            },
            "application/json": {
              "schema": { }
            },
            "text/json": {
              "schema": { }
            },
            "application/*+json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/authorize": {
      "get": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Get Authorization Url",
        "description": "For ExternalDataProviders with an AuthScheme of OAuth1 or OAuth2.\r\nReturns a Url to redirect a user to in order to start the authorization process with the given ExternalDataProvider.\r\nOur API handles the response from the OAuth provider and processes it to obtain a token.\r\nThe user is then sent to the URL specified.",
        "operationId": "AuthorizeExternalData",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the ExternalDataProvider you want to authorize with.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "returnUrl",
            "in": "query",
            "description": "The URL to send the user to once the process is complete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Set Credentials",
        "description": "For ExternalDataProviders with an AuthScheme of Basic.\r\nSets the username and password for the service.",
        "operationId": "SetCredentialsExternalData",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the ExternalDataProvider you want to authorize with.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "The username for the ExternalDataProvider.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the ExternalDataProvider.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Any additional data that is needed (optional)",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StringStringKeyValuePair"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StringStringKeyValuePair"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StringStringKeyValuePair"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StringStringKeyValuePair"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/config": {
      "get": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Get Config Data",
        "description": "Returns any additional configuration data for the connection to the ExternalDataProvider.",
        "operationId": "GetConfigDataExternalData",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the ExternalDataProvider you want configuration data for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Set Config Data",
        "description": "Sets the additional configuration data for the connection to the ExternalDataProvider.\r\nOnly the value set in the userData field is updated",
        "operationId": "SetConfigDataExternalData",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the ExternalDataProvider you want configuration data for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": { }
            },
            "application/json": {
              "schema": { }
            },
            "text/json": {
              "schema": { }
            },
            "application/*+json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/external-data/{id}/disconnect": {
      "get": {
        "tags": [
          "ExternalData"
        ],
        "summary": "Disconnect",
        "description": "Disconnect from the external provider and revoke any OAuth token that has been received.",
        "operationId": "DisconnectExternalData",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the ExternalDataProvider you want to disconnect from.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/external-data/{id}/respond": {
      "get": {
        "tags": [
          "ExternalData"
        ],
        "summary": "3rd Party Response",
        "description": "This endpoint is used by third parties to respond to an oAuth authorization request. You do not need to use this",
        "operationId": "RespondExternalData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/rti/fps/{taxYear}": {
      "post": {
        "tags": [
          "Fps"
        ],
        "summary": "Create FPS",
        "description": "Creates a new Full Payment Submission.  This is limited to corrections, to a previous year, for a single employee.",
        "operationId": "CreateFps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Fps"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Fps"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Fps"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Fps"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fps"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Fps"
        ],
        "summary": "List FPS",
        "description": "Returns all Full Payment Submissions for the given tax year.",
        "operationId": "ListFps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/fps/{taxYear}/{id}": {
      "put": {
        "tags": [
          "Fps"
        ],
        "summary": "Update FPS",
        "description": "Updates an existing Full Payment Submission.",
        "operationId": "UpdateFps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Fps"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Fps"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Fps"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Fps"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fps"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Fps"
        ],
        "summary": "Get FPS",
        "description": "Retrieves the Full Payment Submission specified",
        "operationId": "GetFps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fps"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Fps"
        ],
        "summary": "Delete FPS",
        "description": "Not implemented, FPSes cannot be deleted",
        "operationId": "DeleteFps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/rti/fps/{taxYear}/mostrecentforemployee/{employeeId}": {
      "get": {
        "tags": [
          "Fps"
        ],
        "summary": "Get most recent FPS for Employee",
        "description": "Returns the most recent Full Payment Submission that includes the specified employee",
        "operationId": "MostRecentForEmployeeFps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "correction",
            "in": "query",
            "description": "Only search for FPS's submitted as a correction to a previous year",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/rti/fps/{taxYear}/{id}/submit": {
      "post": {
        "tags": [
          "Fps"
        ],
        "summary": "Submit FPS",
        "description": "Submits an existing Full Payment Submission to HMRC.",
        "operationId": "SubmitFps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fps"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/fps/{taxYear}/{id}/markasaccepted": {
      "post": {
        "tags": [
          "Fps"
        ],
        "summary": "Mark as Sent",
        "description": "Marks an Full Payment Submission as having been sent to HMRC and accepted by them.\r\nYou only use this method if the FPS has been submitted via an external system.\r\nIt will automatically be updated as Sent and/or Accepted if it's submitted via this API.",
        "operationId": "MarkAsAcceptedFps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fps"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/fps/requiringattention": {
      "get": {
        "tags": [
          "Fps"
        ],
        "summary": "FPS Requiring Attention",
        "description": "Returns all Full Payment Submissions that have a Submission Status of NotSubmitted or ErrorResponse",
        "operationId": "RequiringAttentionFps",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/hmrcpayment/{taxYear}": {
      "get": {
        "tags": [
          "HmrcPayment"
        ],
        "summary": "List HmrcLiabilities",
        "description": "Lists all periods for which a payment is due to HMRC in the given TaxYear",
        "operationId": "IndexHmrcPayment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to list HMRC Payments",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/hmrcpayment/{taxYear}/{periodEnding}": {
      "get": {
        "tags": [
          "HmrcPayment"
        ],
        "summary": "Get HmrcLiability",
        "description": "Gets the HmrcLiability record for the period ending on the date specified.",
        "operationId": "GetHmrcPayment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "periodEnding",
            "in": "path",
            "description": "The final date of the month or quarter that the HmrcLiability is for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HmrcLiability"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "HmrcPayment"
        ],
        "summary": "Update HmrcLiability",
        "description": "Updates the editable fields of a HmrcLiability (ie, Adjustment, CISDeductionsSuffered, etc)",
        "operationId": "UpdateHmrcPayment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "periodEnding",
            "in": "path",
            "description": "The final date of the month or quarter that the HmrcLiability is for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/HmrcLiability"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HmrcLiability"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/HmrcLiability"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/HmrcLiability"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HmrcLiability"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/hmrcpayment/{taxYear}/{periodEnding}/bankpayment": {
      "get": {
        "tags": [
          "HmrcPayment"
        ],
        "summary": "HMRC Bank Payment",
        "description": "Returns a payments file for the HMRC payment that needs to be made",
        "operationId": "BankPaymentHmrcPayment",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "periodEnding",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankPaymentInstructionReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BankPaymentInstructionReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/import/payments/mappings": {
      "get": {
        "tags": [
          "Import"
        ],
        "summary": "List PaymentsCsvMappings",
        "description": "Lists all PaymentsCsvMappings for an Employer.",
        "operationId": "ListPaymentsCsvMappingsImport",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to list mappings",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Import"
        ],
        "summary": "Create PaymentsCsvMapping",
        "description": "Creates a new PaymentsCsvMapping for the Employer.",
        "operationId": "CreatePaymentsCsvMappingImport",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCsvMapping"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCsvMapping"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCsvMapping"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCsvMapping"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/import/payments/mappings/{id}": {
      "get": {
        "tags": [
          "Import"
        ],
        "summary": "Get PaymentsCsvMapping",
        "description": "Gets the PaymentsCsvMapping specified.",
        "operationId": "PaymentsCsvMappingImport",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the PaymentCsvMapping belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsCsvMapping"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Import"
        ],
        "summary": "Update PaymentsCsvMapping",
        "description": "Updates the PaymentsCsvMapping specified.",
        "operationId": "UpdatePaymentsCsvMappingImport",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the PaymentsCsvMapping belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCsvMapping"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCsvMapping"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCsvMapping"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCsvMapping"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsCsvMapping"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Import"
        ],
        "summary": "Delete PaymentsCsvMapping",
        "description": "Deletes the specified PaymentsCsvMapping.",
        "operationId": "DeletePaymentCsvMappingImport",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/import/payments/mappings/{id}/csv": {
      "get": {
        "tags": [
          "Import"
        ],
        "summary": "Get PaymentsCsvMapping CSV File",
        "description": "Gets a CSV file in the format needed to import for the specified PaymentsCsvMapping\r\nThis is only available for PaymentsCsvMapping with a Type of ColumnBased",
        "operationId": "PaymentsCsvMappingCsvFileImport",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the PaymentCsvMapping belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/import/pay": {
      "post": {
        "tags": [
          "Import"
        ],
        "summary": "Import Pay To Employee",
        "description": "Takes a list PayOptionsImport and updates employees PayOptions to use the values provided.",
        "operationId": "ImportEmployeePayImport",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "linesOnly",
            "in": "query",
            "description": "If set to true then only lines will be imported. Changes to regular pay will be ignored. Defaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "append",
            "in": "query",
            "description": "If set to true then the lines submitted will be appended to existing lines rather than replace them. Defaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "updateExisting",
            "in": "query",
            "description": "If set to true then any submnitted lines that match the paycode of one (and only one) existin line will be used to update the value of that lines. Any unmatched lines will be appended to existing lines.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "validateOnly",
            "in": "query",
            "description": "If set to true, the import will only be validated for data correctness. If false, the import is validated and then imported.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayOptionsImport"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayOptionsImport"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayOptionsImport"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayOptionsImport"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/invitation": {
      "get": {
        "tags": [
          "Invitation"
        ],
        "summary": "List Invitations",
        "description": "Lists all Invitations for an Employer.\r\nOnly unaccepted Invitations are listed as they are deleted once they've been accepted.",
        "operationId": "IndexInvitation",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to list Pay Codes",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Invitation"
        ],
        "summary": "Create Invitation",
        "description": "Creates a new Invitation for the Employer.",
        "operationId": "CreateInvitation",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Invitation"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invitation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Invitation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Invitation"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/invitation/{id}": {
      "get": {
        "tags": [
          "Invitation"
        ],
        "summary": "Get Invitation",
        "description": "Gets the Invitation specified.",
        "operationId": "GetInvitation",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Invitation belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Invitation"
        ],
        "summary": "Delete Invitation",
        "description": "Deletes the specified Invitation.",
        "operationId": "DeleteInvitation",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/invitations/{id}": {
      "post": {
        "tags": [
          "Invitation"
        ],
        "summary": "Accept Invitation",
        "description": "Accepts the Invitation.\r\nThe user making this API call must have the email address that the invite was created for and the email address must be verified.",
        "operationId": "AcceptInvitation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "acceptInvitation",
            "in": "query",
            "description": "Set to true to accept the invitation or false to decline it.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/leave": {
      "post": {
        "tags": [
          "Leave"
        ],
        "summary": "Create Leave",
        "description": "Creates Leave for the Employee",
        "operationId": "CreateLeave",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Leave"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Leave"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Leave"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Leave"
              }
            }
          }
        },
        "responses": {
          "409": {
            "description": "Conflict"
          },
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "get": {
        "tags": [
          "Leave"
        ],
        "summary": "List Leave",
        "description": "Lists all Leave for the Employee",
        "operationId": "IndexLeave",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/leave/{id}": {
      "get": {
        "tags": [
          "Leave"
        ],
        "summary": "Get Leave",
        "description": "Gets the Leave specified by the Id for the Employee specified by the EmployeeId",
        "operationId": "GetLeave",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Leave you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Leave"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Leave"
        ],
        "summary": "Update Leave",
        "operationId": "UpdateLeave",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Leave you want to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Leave"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Leave"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Leave"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Leave"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Leave"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Leave"
        ],
        "summary": "Delete Leave",
        "description": "Deletes the Leave specified by the Id for the Employee specified by the EmployeeId",
        "operationId": "DeleteLeave",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Leave you want to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "409": {
            "description": "Conflict"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/leave/findlinkedpiw": {
      "get": {
        "tags": [
          "Leave"
        ],
        "summary": "Find Linked Piw",
        "description": "Finds the linked piw the supplied leave would linked to, or null if none found",
        "operationId": "FindLinkedPiwLeave",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "leaveType",
            "in": "query",
            "description": "The type of leave to you want to find a linked Piw for.",
            "schema": {
              "$ref": "#/components/schemas/LeaveType"
            }
          },
          {
            "name": "leavePayType",
            "in": "query",
            "description": "The type of leave pay to you want to find a linked Piw for.",
            "schema": {
              "$ref": "#/components/schemas/LeavePayType"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The leave from date you want to find a linked Piw for.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The leave to date you want to find a linked Piw for.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedPiw"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/leave/{id}/documents": {
      "post": {
        "tags": [
          "Leave"
        ],
        "summary": "Add Document",
        "description": "Adds document to the leave",
        "operationId": "AddDocumentLeave",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the leave you want to attach documents to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/leave/{id}/documents/{documentId}": {
      "delete": {
        "tags": [
          "Leave"
        ],
        "summary": "Delete Leave Document",
        "description": "Deletes the document specified by the documentId for the Leave specified by the Id",
        "operationId": "DeleteDocumentLeave",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The Id of the Document you want to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "get": {
        "tags": [
          "Leave"
        ],
        "summary": "Get Leave Document",
        "description": "Gets the document specified by the documentId for the Leave specified by the Id",
        "operationId": "GetDocumentLeave",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The Id of the Document you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/loans": {
      "post": {
        "tags": [
          "Loan"
        ],
        "summary": "Create Loan",
        "description": "Creates a Loan for the Employee",
        "operationId": "CreateLoan",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Loan"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Loan"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Loan"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Loan"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      },
      "get": {
        "tags": [
          "Loan"
        ],
        "summary": "List Loans",
        "description": "Lists all AttachmentOrders for the Employee",
        "operationId": "IndexLoan",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/loans/{id}": {
      "get": {
        "tags": [
          "Loan"
        ],
        "summary": "Get Loan",
        "description": "Gets the Loan specified by the Id for the Employee specified by the EmployeeId",
        "operationId": "GetLoan",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Loan you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Loan"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Loan"
        ],
        "summary": "Update Loan",
        "operationId": "UpdateLoan",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Loan you want to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Loan"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Loan"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Loan"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Loan"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Loan"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Loan"
        ],
        "summary": "Delete Loan",
        "description": "Deletes the Loan specified by the Id for the Employee specified by the EmployeeId",
        "operationId": "DeleteLoan",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Loan you want to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/loans/{id}/documents": {
      "post": {
        "tags": [
          "Loan"
        ],
        "summary": "Add Document",
        "description": "Adds document to the Loan",
        "operationId": "AddDocumentLoan",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Loan you want to attach documents to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/loans/{id}/documents/{documentId}": {
      "delete": {
        "tags": [
          "Loan"
        ],
        "summary": "Delete Loan Document",
        "description": "Deletes the document specified by the documentId for the Loan specified by the Id",
        "operationId": "DeleteDocumentLoan",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The Id of the Document you want to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "get": {
        "tags": [
          "Loan"
        ],
        "summary": "Get Loan Document",
        "description": "Gets the document specified by the documentId for the Loan specified by the Id",
        "operationId": "GetDocumentLoan",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The Id of the Document you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/notes": {
      "post": {
        "tags": [
          "Note"
        ],
        "summary": "Create Note",
        "description": "Creates a Note for the Employee",
        "operationId": "CreateNote",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "List Notes",
        "description": "Lists all Note for the Employee",
        "operationId": "IndexNote",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/notes/{id}": {
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "Get Note",
        "description": "Gets the Note specified by the Id for the Employee specified by the EmployeeId",
        "operationId": "GetNote",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Note you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Note"
        ],
        "summary": "Update Note",
        "operationId": "UpdateNote",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Note you want to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Note"
        ],
        "summary": "Delete Note",
        "description": "Deletes the Note specified by the Id for the Employee specified by the EmployeeId",
        "operationId": "DeleteNote",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Note you want to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/notes/{id}/documents": {
      "post": {
        "tags": [
          "Note"
        ],
        "summary": "Add Document",
        "description": "Adds document to the Note",
        "operationId": "AddDocumentNote",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Note you want to attach documents to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/notes/{id}/documents/{documentId}": {
      "delete": {
        "tags": [
          "Note"
        ],
        "summary": "Delete Note Document",
        "description": "Deletes the document specified by the documentId for the Note specified by the Id",
        "operationId": "DeleteDocumentNote",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The Id of the Document you want to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "Get Note Document",
        "description": "Gets the document specified by the documentId for the Note specified by the Id",
        "operationId": "GetDocumentNote",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The Id of the Document you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/rti/nvr/{taxYear}": {
      "get": {
        "tags": [
          "Nvr"
        ],
        "summary": "List NVR",
        "description": "Returns all NiNo Verification Requests for the given tax year.",
        "operationId": "ListNvr",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Nvr"
        ],
        "summary": "Create NVR",
        "description": "Creates a new NiNo Verification Request.",
        "operationId": "CreateNvr",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Nvr"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Nvr"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Nvr"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Nvr"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nvr"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/nvr/{taxYear}/{id}": {
      "put": {
        "tags": [
          "Nvr"
        ],
        "summary": "Update NVR",
        "description": "Updates an existing NiNo Verification Request.",
        "operationId": "UpdateNvr",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Nvr"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Nvr"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Nvr"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Nvr"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nvr"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Nvr"
        ],
        "summary": "Get NVR",
        "description": "Retrieves the NiNo Verification Request.",
        "operationId": "GetNvr",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nvr"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Nvr"
        ],
        "summary": "Delete NVR",
        "description": "Deletes the NVR.",
        "operationId": "DeleteNvr",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/rti/nvr/{taxYear}/{id}/submit": {
      "post": {
        "tags": [
          "Nvr"
        ],
        "summary": "Submit an existing NVR",
        "description": "Submits an existing NiNo Verification Request to HMRC.",
        "operationId": "SubmitNvr",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nvr"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/nvr/{taxYear}/{id}/markasaccepted": {
      "post": {
        "tags": [
          "Nvr"
        ],
        "summary": "Mark as Sent",
        "description": "Marks a  NiNo Verification Request as having been sent to HMRC and accepted by them\r\nYou only use this method if the NVR has been submitted via an external system.\r\nIt will automatically be updated as Sent and/or Accepted if it's submitted via this API.",
        "operationId": "MarkAsAcceptedNvr",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nvr"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/rti/nvr/requiringattention": {
      "get": {
        "tags": [
          "Nvr"
        ],
        "summary": "NVR Requiring Attention",
        "description": "Returns all NiNo Verification Requests that have a Submission Status of NotSubmitted or ErrorResponse",
        "operationId": "RequiringAttentionNvr",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/openingBalances": {
      "get": {
        "tags": [
          "OpeningBalances"
        ],
        "summary": "Get Opening Balances",
        "description": "Returns the Opening Balances for an Employee",
        "operationId": "GetOpeningBalances",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee for which you want to retrieve Opening Balances",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OpeningBalances"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpeningBalances"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpeningBalances"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "OpeningBalances"
        ],
        "summary": "Update Opening Balances",
        "description": "Updates the Opening Balances for an Employee.",
        "operationId": "UpdateOpeningBalances",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee for which you want to update Opening Balances",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OpeningBalances"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpeningBalances"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OpeningBalances"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OpeningBalances"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OpeningBalances"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpeningBalances"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpeningBalances"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/openingBalances/nic/{taxYear}": {
      "get": {
        "tags": [
          "OpeningBalances"
        ],
        "summary": "Get NicSummaries",
        "description": "Returns the NicSummaries for an Employee for a given TaxYear.\r\nIf the TaxYear is the same as on their OpeningBalances then the NicSummaries will be the same as shown there.",
        "operationId": "GetNicSummariesOpeningBalances",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee for which you want to retrieve Opening Balances",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The TaxYear the NicSummaries apply to",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "openingBalancesOnly",
            "in": "query",
            "description": "Limit the results to opening balance year to date",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NicSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NicSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NicSummary"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "OpeningBalances"
        ],
        "summary": "Update NicSummaries",
        "description": "Updates the NicSummaries for an Employee for a given TaxYear.\r\nIf the TaxYear is the same as on their OpeningBalances then the NicSummaries there will also be updated.",
        "operationId": "UpdateNicSummariesOpeningBalances",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee for which you want to retrieve Opening Balances",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The TaxYear the NicSummaries apply to",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NicSummary"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NicSummary"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NicSummary"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NicSummary"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NicSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NicSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NicSummary"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/openingBalances/p45": {
      "put": {
        "tags": [
          "OpeningBalances"
        ],
        "summary": "Update P45 Value",
        "description": "Updates the P45 Values on the Opening Balances for an Employee.\r\nThis would ideally be done when the Opening Balances are updated but if payruns have already been started for the employee then Opening Balances can't be updated - hence this API call just to update the P45 values.\r\nThere must be a currently open PayRun for the employee.\r\nOnly the PreviousEmployerGross and PreviousEmployerTax properties of the submitted OpeningBalances model are updated.",
        "operationId": "UpdateP45OpeningBalances",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee for which you want to update P45 figures",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OpeningBalances"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpeningBalances"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OpeningBalances"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OpeningBalances"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OpeningBalances"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpeningBalances"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpeningBalances"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/openingBalances/terminationpayments": {
      "put": {
        "tags": [
          "OpeningBalances"
        ],
        "summary": "Update Termination Pay",
        "description": "Updates the Termination Pay value on the Opening Balances for an Employee.\r\nThis would ideally be done when the Opening Balances are updated but if payruns have already been started for the employee then Opening Balances can't be updated - hence this API call just to update the Termination Pay value.\r\nOnly the TerminationPayments property of the submitted OpeningBalances model is updated.",
        "operationId": "UpdateTerminationPaymentsOpeningBalances",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee for which you want to update Termination Payments",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OpeningBalances"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpeningBalances"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OpeningBalances"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OpeningBalances"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OpeningBalances"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpeningBalances"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpeningBalances"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/paycodes": {
      "get": {
        "tags": [
          "PayCode"
        ],
        "summary": "List PayCodes",
        "description": "Lists all PayCodes for the Employer specified.",
        "operationId": "IndexPayCode",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to list Pay Codes",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "verbose",
            "in": "query",
            "description": "If provided and set to true then full details of all Pay Codes will be returned insead of just a summary",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayCode"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PayCode"
        ],
        "summary": "Create PayCode",
        "description": "Creates a new PayCode for the Employer.",
        "operationId": "CreatePayCode",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PayCode"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayCode"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayCode"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayCode"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayCode"
                }
              }
            }
          },
          "404": {
            "description": "Employer Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/paycodes/{code}": {
      "get": {
        "tags": [
          "PayCode"
        ],
        "summary": "Get PayCode",
        "description": "Gets the PayCode specified.",
        "operationId": "GetPayCode",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Pay Code belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the Pay Code you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayCode"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PayCode"
        ],
        "summary": "Update PayCode",
        "description": "Updates the details of an existing PayCode.",
        "operationId": "UpdatePayCode",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PayCode"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayCode"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayCode"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayCode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayCode"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "PayCode"
        ],
        "summary": "Delete PayCode",
        "description": "Deletes the specified PayCode.",
        "operationId": "DeletePayCode",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/paycodes/nominalcodes": {
      "get": {
        "tags": [
          "PayCode"
        ],
        "summary": "Get Nominal Code Mappings",
        "description": "Returns the list of mappings of PayCodes to NominalCodes",
        "operationId": "NominalCodeMappingsPayCode",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to get the mapping",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NominalCodeMapping"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PayCode"
        ],
        "summary": "Updates Nominal Code Mappings",
        "description": "Updates the list of mappings of PayCodes to NominalCodes",
        "operationId": "UpdateNominalCodeMappingsPayCode",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NominalCodeMapping"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NominalCodeMapping"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NominalCodeMapping"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NominalCodeMapping"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NominalCodeMapping"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payees": {
      "get": {
        "tags": [
          "Payee"
        ],
        "summary": "List Payees",
        "description": "Lists all Payees for an Employer.",
        "operationId": "IndexPayee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to list Payees",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payee"
        ],
        "summary": "Create Payee",
        "description": "Creates a new Payee for the Employer.",
        "operationId": "CreatePayee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Payee"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payee"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Payee"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Payee"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payee"
                }
              }
            }
          },
          "404": {
            "description": "Employer Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/payees/{id}": {
      "get": {
        "tags": [
          "Payee"
        ],
        "summary": "Get Payee",
        "description": "Gets the Payee specified.",
        "operationId": "GetPayee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Payee belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payee"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payee"
        ],
        "summary": "Update Payee",
        "description": "Updates a Payee for the Employer.",
        "operationId": "UpdatePayee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Payee"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payee"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Payee"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Payee"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payee"
                }
              }
            }
          },
          "404": {
            "description": "Employer Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Payee"
        ],
        "summary": "Delete Payee",
        "description": "Deletes the specified Payee.",
        "operationId": "DeletePayee",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}": {
      "get": {
        "tags": [
          "PayRun"
        ],
        "summary": "List PayRuns",
        "operationId": "GetPayRunsPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PayRun"
        ],
        "summary": "Starts the next PayRun",
        "operationId": "CreateNextPayRunPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success - \r\nthe PayRun has been created.\r\nThe unique URL for this PayRun is returned in the Location header.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRun"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "put": {
        "tags": [
          "PayRun"
        ],
        "summary": "Starts the next PayRun (deprecated)",
        "description": "This PUT will be removed in Jan 2022. You should instead use a POST to this URL",
        "operationId": "StartNextPayRunPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success - the PayRun has been created.\r\nThe unique URL for this PayRun is returned in the Location header."
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}": {
      "get": {
        "tags": [
          "PayRun"
        ],
        "summary": "Get a PayRun",
        "operationId": "GetPayRunPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRun"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PayRun"
        ],
        "summary": "Delete a PayRun",
        "operationId": "DeletePayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "put": {
        "tags": [
          "PayRun"
        ],
        "summary": "Update PayRun",
        "description": "Updates a PayRun to the state provided along with the reason (optional) for the change.",
        "operationId": "UpdatePayRunPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sendPayslipEmails",
            "in": "query",
            "description": "Only relevant if setting the State to Finalised. Set to true if you want to have payslips emailed to employees.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Specify the PayRun state you want to change to and the reason for the change.\r\nOnly Open and Finalised states are available at the moment.\r\nOther states are used with Bureau functionality which isn't currently generally available.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PayRunStateChange"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayRunStateChange"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayRunStateChange"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayRunStateChange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - the PayRun has been updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRun"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/warnings": {
      "get": {
        "tags": [
          "PayRun"
        ],
        "summary": "Get PayRun Warnings",
        "description": "Returns an Item for any PayRunEntry on the payrun that has a potential issue.\r\nThe list of issues for a PayRunEntry are in the Metadata property of the Item.",
        "operationId": "GetPayRunWarningsPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/events": {
      "get": {
        "tags": [
          "PayRun"
        ],
        "summary": "Get PayPeriodEvents",
        "operationId": "GetPayRunEventsPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaySchedulePeriodEvent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/ytd": {
      "put": {
        "tags": [
          "PayRun"
        ],
        "summary": "Update YTD",
        "description": "Upload a CSV to override the YTD values on a Payrun.\r\nThe CSV should have the same headings as the YTD report",
        "operationId": "YtdPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeYtdValues"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/leave": {
      "get": {
        "tags": [
          "PayRun"
        ],
        "summary": "List Leave related to a PayRun",
        "description": "Returns a List of Items representing any Leave within the PayRun date range for Employees that are included in the given PayRun.\r\nNote that if Leave was added after the PayRun was closed, but the Leave is within the PayRun period then it'll be returned here even though it wouldn't have been processed with the PayRun.",
        "operationId": "LeavePayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/aeo": {
      "get": {
        "tags": [
          "PayRun"
        ],
        "summary": "List AttachmentOrders related to a PayRun",
        "description": "Returns a List of Items representing any AttachmentOrders within the PayRun date range for Employees that are included in the given PayRun.",
        "operationId": "AeoPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/changes": {
      "get": {
        "tags": [
          "PayRun"
        ],
        "summary": "List PayRun Changes",
        "description": "Returns a of changes made to a payrun since it was created.\r\nThis endpoint is currently being beta tested and subject to un-announced breaking changes.",
        "operationId": "ChangesPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunChanges"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/{id}/changes": {
      "get": {
        "tags": [
          "PayRun"
        ],
        "summary": "List PayRun Changes for PayRunEntry",
        "description": "Returns a list of AuditEntry reflecting changes made to a PayRunEntry and related employee record for a given PayRun\r\nThis endpoint is currently being beta tested and subject to un-announced breaking changes.",
        "operationId": "ChangesForPayRunEntryPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "significantChangesOnly",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/journal": {
      "get": {
        "tags": [
          "PayRun"
        ],
        "summary": "Get Journal for PayRun",
        "description": "Returns values that can be used to create accounting entries for this PayRun.",
        "operationId": "GetPayRunJournalPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "deptBreakdown",
            "in": "query",
            "description": "Set to true and the journal will be split between any relevant Departments",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunJournal"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/finalise": {
      "post": {
        "tags": [
          "PayRun"
        ],
        "summary": "Finalise a PayRun (deprecated)",
        "description": "This endpoint is now deprecated and will be removed in Jan 2022.\r\nYou should instead use the Update method and set the State to Finalised.\r\n\r\nReturns True if the resulting FPS has been automatically submitted due to the Employers RTISubmissionSettings, otherwise returns false.\r\nYou can suppress the emailing of payslips to employees by adding a key named dontEmailEmployeePayslips with a value of true to the body. See the related guides for more information.",
        "operationId": "FinalisePayRunPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/reopen": {
      "post": {
        "tags": [
          "PayRun"
        ],
        "summary": "Re-open a PayRun (deprecated)",
        "description": "This endpoint is now deprecated and will be removed in Jan 2022. \r\nYou should instead use the Update method and set the State to Open.\r\n\r\nRe-opens a PayRun so that it can be edited.\r\nOnly the most recent PayRun can be re-opened, and only if the Employer is still in the same TaxYear as the PayRun and there are no open PayRuns.",
        "operationId": "ReOpenPayRunPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRun"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/email": {
      "post": {
        "tags": [
          "PayRun"
        ],
        "summary": "(Re)send Payslip Emails",
        "description": "Payslips are usually emailed automatically when a PayRun is finalised. But if you suppressed them or need to re-send them then you can do so with this API call.",
        "operationId": "SendPayslipEmailsPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/paycodes": {
      "get": {
        "tags": [
          "PayRun"
        ],
        "summary": "Get PayCodes for a PayRun",
        "operationId": "GetPayRunPayCodesPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayCode"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/{id}": {
      "get": {
        "tags": [
          "PayRun"
        ],
        "summary": "Get a PayRunEntry",
        "operationId": "GetPayRunEntryPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunEntry"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PayRun"
        ],
        "summary": "Update a PayRunEntry",
        "operationId": "UpdatePayRunEntryPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PayRunEntry"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayRunEntry"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayRunEntry"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayRunEntry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunEntry"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/{id}/umbrella": {
      "post": {
        "tags": [
          "PayRun"
        ],
        "summary": "PayRunEntry Umbrella Payment",
        "description": "Automatically sets the values on the PayRunEntry based on an UmbrellaPayment.\r\nUsing this method overwrites any existing values for the PayRunEntry.",
        "operationId": "PayRunEntryUmbrellaPaymentPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UmbrellaPayment"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UmbrellaPayment"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UmbrellaPayment"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UmbrellaPayment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunEntry"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{payPeriod}/importpay": {
      "post": {
        "tags": [
          "PayRun"
        ],
        "summary": "Import Pay",
        "description": "Takes a list PayOptionsImport and updates the currently open payrun to use the amounts given.\r\nYou must have an open payrun for the PayPeriod specified and all payroll codes submitted must match an employee on the payrun.\r\nAny lines imported for a PayRunEntry will replace existing lines for that PayRunEntry.",
        "operationId": "ImportPayPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "linesOnly",
            "in": "query",
            "description": "If set to true then only lines will be imported. Changes to regular pay will be ignored. Defaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "append",
            "in": "query",
            "description": "If set to true then the lines submitted will be appended to existing lines rather than replace them. Defaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "updateExisting",
            "in": "query",
            "description": "If set to true then any submitted lines that match the paycode of one (and only one) existing line will be used to update the value of that lines. Any unmatched lines will be appended to existing lines.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "validateOnly",
            "in": "query",
            "description": "If set to true, the import will only be validated for data correctness. If false, the import is validated and then imported.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayOptionsImport"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayOptionsImport"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayOptionsImport"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayOptionsImport"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{payPeriod}/importumbrellapay": {
      "post": {
        "tags": [
          "PayRun"
        ],
        "summary": "Import Umbrella Pay",
        "description": "Takes a list UmbrellaPayment and updates the currently open payrun to use the amounts given.\r\nYou must have an open payrun for the PayPeriod specified and all payroll codes submitted must match an employee on the payrun.\r\nYou should have also set the UmbrellaSettings for the Employer",
        "operationId": "ImportUmbrellaPayPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UmbrellaPayment"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UmbrellaPayment"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UmbrellaPayment"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UmbrellaPayment"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRun"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{payPeriod}/importtimeandattendance": {
      "post": {
        "tags": [
          "PayRun"
        ],
        "summary": "Import Time And Attendance",
        "description": "If the employer is connected to an ExternalDataProvider that provides Time and Attendance data then this API\r\ncall will update the currently open payrun for the PayPeriod specified with data from the specified provider.\r\nReturns a list of PayOptionsImport to show what's been imported.",
        "operationId": "ImportTimeAndAttendancePayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "providerId",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayOptionsImport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/paymentdate": {
      "post": {
        "tags": [
          "PayRun"
        ],
        "summary": "Set PaymentDate",
        "description": "Sets the PaymentDate for a PayRun.\r\nIf the date given is outside of the TaxPeriod that the payrun is for then only the payment date for the individual \r\nPayRunEntries is updated, the PayRun will retain it's current PaymentDate",
        "operationId": "UpdatePaymentDatePayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string",
                "format": "date-time"
              }
            },
            "application/json": {
              "schema": {
                "type": "string",
                "format": "date-time"
              }
            },
            "text/json": {
              "schema": {
                "type": "string",
                "format": "date-time"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRun"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/zeroise": {
      "post": {
        "tags": [
          "PayRun"
        ],
        "summary": "Zeroise PayRunEntries",
        "description": "Zeroises the payrun entries specified in the ids property",
        "operationId": "ZeroisePayRunEntriesPayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRun"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/employees/{employeeId}/Last": {
      "get": {
        "tags": [
          "PayRun"
        ],
        "summary": "Gets the last closed pay run entry for an employee.",
        "operationId": "LastPayRunEntryForEmployeePayRun",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee you want to get last pay run entry for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunEntry"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/schedules/{taxYear}": {
      "get": {
        "tags": [
          "PaySchedule"
        ],
        "summary": "Get PaySchedules",
        "description": "Get all PaySchedules for the given TaxYear.",
        "operationId": "GetAllPaySchedule",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to get the PaySchedule",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The year that you want to retrieve details for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaySchedule"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/schedules/{taxYear}/{payPeriod}": {
      "get": {
        "tags": [
          "PaySchedule"
        ],
        "summary": "Get PaySchedule (deprecated)",
        "description": "Get the PaySchedule for the PayPeriod and TaxYear specified (and an optional ordinal. 1 will be used if ordinal is not provided).",
        "operationId": "GetWithOptionalOrdinalPaySchedule",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to get the PaySchedule",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "description": "The PayPeriod (ie, Monthly) that you want to retrieve details for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The year that you want to retrieve details for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaySchedule"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PaySchedule"
        ],
        "summary": "Create a PaySchedule (deprecated)",
        "description": "Create PaySchedule using a certain pay frequency and TaxYear specified (and an optional ordinal. 1 will be used if ordinal is not provided).",
        "operationId": "CreateWithOptionalOrdinalPaySchedule",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to update the PaySchedule",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "description": "The PayPeriod (ie, Monthly) that you want to update details for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The year that the PaySchedule is for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedule"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedule"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedule"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedule"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "put": {
        "tags": [
          "PaySchedule"
        ],
        "summary": "Update PaySchedule (deprecated)",
        "description": "Update PaySchedule for the PayPeriod and TaxYear specified (and an optional ordinal. 1 will be used if ordinal is not provided).",
        "operationId": "SaveWithOptionalOrdinalPaySchedule",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to update the PaySchedule",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "description": "The PayPeriod (ie, Monthly) that you want to update details for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The year that the PaySchedule is for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedule"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedule"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedule"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaySchedule"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "delete": {
        "tags": [
          "PaySchedule"
        ],
        "summary": "Delete PaySchedule (deprecated)",
        "description": "Delete the PaySchedule for the PayPeriod and TaxYear specified (and an optional ordinal. 1 will be used if ordinal is not provided).",
        "operationId": "DeleteWithOptionalOrdinalPaySchedule",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to get the PaySchedule",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "description": "The PayPeriod (ie, Monthly) that you want to retrieve details for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The year that you want to retrieve details for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/schedules/{taxYear}/{payPeriod}/{ordinal}": {
      "get": {
        "tags": [
          "PaySchedule"
        ],
        "summary": "Get PaySchedule",
        "description": "Get the PaySchedule for the PayPeriod and TaxYear specified.",
        "operationId": "GetPaySchedule",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to get the PaySchedule",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "description": "The PayPeriod (ie, Monthly) that you want to retrieve details for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The year that you want to retrieve details for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "path",
            "description": "Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaySchedule"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PaySchedule"
        ],
        "summary": "Create a PaySchedule",
        "description": "Create PaySchedule using a certain pay frequency.",
        "operationId": "CreatePaySchedule",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to update the PaySchedule",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "description": "The PayPeriod (ie, Monthly) that you want to update details for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The year that the PaySchedule is for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "path",
            "description": "Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedule"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedule"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedule"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedule"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "put": {
        "tags": [
          "PaySchedule"
        ],
        "summary": "Update PaySchedule",
        "description": "Update PaySchedule for the PayPeriod.",
        "operationId": "SavePaySchedule",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to update the PaySchedule",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "description": "The PayPeriod (ie, Monthly) that you want to update details for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The year that the PaySchedule is for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "path",
            "description": "Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedule"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedule"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedule"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaySchedule"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "delete": {
        "tags": [
          "PaySchedule"
        ],
        "summary": "Delete PaySchedule",
        "description": "Delete the PaySchedule for the PayPeriod and TaxYear specified.",
        "operationId": "DeletePaySchedule",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to get the PaySchedule",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "description": "The PayPeriod (ie, Monthly) that you want to retrieve details for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The year that you want to retrieve details for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "path",
            "description": "Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/schedules/{taxYear}/{payPeriod}/{ordinal}/periods": {
      "get": {
        "tags": [
          "PaySchedule"
        ],
        "summary": "Get PaySchedulePeriods",
        "description": "Get the PaySchedulePeriods for PaySchedule specified.",
        "operationId": "GetPeriodsPaySchedule",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to get the PaySchedule periods",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "description": "The PayPeriod (ie, Monthly) that you want to retrieve details for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The year that you want to retrieve details for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "path",
            "description": "Optionally specify the second, third, fourth (etc) PaySchedule for this PayPeriod. Defaults to 1 (first)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "periodNumber",
            "in": "query",
            "description": "Optionally specify a period number to get a result just for that period",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeEvents",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaySchedulePeriod"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/schedules/{taxYear}/{payPeriod}/{ordinal}/periods/{periodNumber}": {
      "put": {
        "tags": [
          "PaySchedule"
        ],
        "summary": "Update PaySchedulePeriod",
        "description": "Update the PaymentDate for a PaySchedulePeriod.",
        "operationId": "UpdatePaySchedulePeriodPaySchedule",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to update the PaySchedulePeriod",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "description": "The PayPeriod (ie, Monthly) that you want to update details for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The year that the PaySchedule is for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "path",
            "description": "Specify the first, second, third (etc) PaySchedule for this PayPeriod.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "description": "Specify the number of the period that you want to update the PaymentDate for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedulePeriod"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedulePeriod"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedulePeriod"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PaySchedulePeriod"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaySchedulePeriod"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/pension": {
      "get": {
        "tags": [
          "Pension"
        ],
        "summary": "Get Pension",
        "description": "Returns the Pension, if any, for an Employee",
        "operationId": "GetPension",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee for which you want to retrieve the Pension",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Pension"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pension"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pension"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pension"
        ],
        "summary": "Update Pension",
        "description": "Updates the Pension for an Employee.",
        "operationId": "UpdatePension",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee for which you want to update the Pension",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Pension"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pension"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Pension"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Pension"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Pension"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pension"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pension"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Pension"
        ],
        "summary": "Remove Pension",
        "description": "Removes the Pension for an Employee.\r\nFor Non-AE Pensions, this is the same as an Update with an empty JSON object.\r\nFor AE Pensions this will remove the employee from the pension and delete any associated AeAssessments",
        "operationId": "RemovePension",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Employee belongs",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee for which you want to remove the Pension",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/pensionschemes": {
      "get": {
        "tags": [
          "PensionScheme"
        ],
        "summary": "List PensionSchemes",
        "operationId": "IndexPensionScheme",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to list PensionSchemes",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PensionScheme"
        ],
        "summary": "Create a PensionScheme",
        "operationId": "CreatePensionScheme",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PensionScheme"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PensionScheme"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PensionScheme"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PensionScheme"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PensionScheme"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/pensionschemes/{id}": {
      "get": {
        "tags": [
          "PensionScheme"
        ],
        "summary": "Get a PensionScheme",
        "operationId": "GetPensionScheme",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the PensionScheme belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the PensionScheme you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PensionScheme"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PensionScheme"
        ],
        "summary": "Update a PensionScheme",
        "operationId": "UpdatePensionScheme",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PensionScheme"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PensionScheme"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PensionScheme"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PensionScheme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PensionScheme"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "PensionScheme"
        ],
        "summary": "Delete a PensionScheme",
        "operationId": "DeletePensionScheme",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/pensionschemes/{id}/employees": {
      "get": {
        "tags": [
          "PensionScheme"
        ],
        "summary": "Get Employees",
        "description": "Returns the employees that are enrolled in the specified scheme",
        "operationId": "EmployeesPensionScheme",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the PensionScheme belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the PensionScheme you want to retrieve Employees for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/pensionschemes/{id}/contributions/{taxYear}": {
      "get": {
        "tags": [
          "PensionScheme"
        ],
        "summary": "List Contributions",
        "description": "Returns a list of Items that tell you which PayRuns contain contributions to this scheme and the Url to the relevant report.\r\nIF the scheme is connected to an ExternalDataProvider then the status of the submission will also be included.",
        "operationId": "ListContributionsPensionScheme",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the PensionScheme belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the PensionScheme.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The TaxYear to query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/pensionschemes/{id}/contributions/{taxYear}/{payPeriod}/{periodNumber}": {
      "get": {
        "tags": [
          "PensionScheme"
        ],
        "summary": "Contributions for Payrun",
        "description": "Returns contributions for a specific scheme and payrun",
        "operationId": "ContributionsForPayrunPensionScheme",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the PensionScheme belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the PensionScheme.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The TaxYear to query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PensionContributionsSubmission"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/pensionschemes/{id}/contributions/{taxYear}/{submissionId}": {
      "post": {
        "tags": [
          "PensionScheme"
        ],
        "summary": "Re-submit Contributions",
        "description": "Re-submits previously failed Contributions to a Pension Scheme.",
        "operationId": "ResubmitContributionsPensionScheme",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the PensionScheme belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the PensionScheme.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The TaxYear of the submission",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "submissionId",
            "in": "path",
            "description": "The Id of the Submission to re-submit.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "PensionScheme"
        ],
        "summary": "Contributions Data",
        "description": "Returns an ExternalProviderConversation showing data sent to and received from the ExternalDataProvider for the pension contribution submission.",
        "operationId": "ContributionsPensionScheme",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the PensionScheme belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the PensionScheme.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The TaxYear of the submission",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "submissionId",
            "in": "path",
            "description": "The Id of the Submission.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalProviderConversation"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/pensionschemes/{id}/contributions/{taxYear}/{submissionId}/markassent": {
      "post": {
        "tags": [
          "PensionScheme"
        ],
        "summary": "Mark as Sent",
        "description": "Marks the Pension Contributions as sent",
        "operationId": "MarkAsSentPensionScheme",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the PensionScheme belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the PensionScheme.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The TaxYear of the submission",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "submissionId",
            "in": "path",
            "description": "The Id of the Submission.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalProviderConversation"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/posts": {
      "get": {
        "tags": [
          "Post"
        ],
        "summary": "List Posts",
        "description": "Lists all Posts for an Employee.\r\nYou must have the multi-post feature enabled.\r\nThis endpoint is currently being beta tested and subject to un-announced breaking changes.",
        "operationId": "IndexPost",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for the Employee.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee which you want to list Posts.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "Post"
        ],
        "summary": "Create Post",
        "description": "Creates a new Post for the Employee.\r\nYou must have the multi-post feature enabled.\r\nThis endpoint is currently being beta tested and subject to un-announced breaking changes.",
        "operationId": "CreatePost",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for the Employee.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee to which the Post belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/employees/{employeeId}/posts/{id}": {
      "get": {
        "tags": [
          "Post"
        ],
        "summary": "Get Post",
        "description": "Gets the Post specified.\r\nYou must have the multi-post feature enabled.\r\nThis endpoint is currently being beta tested and subject to un-announced breaking changes.",
        "operationId": "GetPost",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for the Employee.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee to which the Post belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Post you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Post"
        ],
        "summary": "Update Post",
        "description": "Updates a Post for the Employee.\r\nYou must have the multi-post feature enabled.\r\nThis endpoint is currently being beta tested and subject to un-announced breaking changes.",
        "operationId": "UpdatePost",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for the Employee.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee to which the Post belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Post to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Post"
        ],
        "summary": "Delete Post",
        "description": "Deletes the specified Post.\r\nYou must have the multi-post feature enabled.\r\nThis endpoint is currently being beta tested and subject to un-announced breaking changes.",
        "operationId": "DeletePost",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for the Employee.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee to which the Post belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Post to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/processingnotes": {
      "post": {
        "tags": [
          "ProcessingNote"
        ],
        "summary": "Create ProcessingNote",
        "description": "Creates a Processing Note for the PayRun.\r\nYou must have Bureau Features enabled and the payrun must be editable.",
        "operationId": "CreateProcessingNote",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessingNote"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessingNote"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessingNote"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessingNote"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success - the ProcessingNote has has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessingNote"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "get": {
        "tags": [
          "ProcessingNote"
        ],
        "summary": "List ProcessingNotes for a PayRun",
        "operationId": "ListProcessingNote",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "payrunEntryId",
            "in": "query",
            "description": "Optionally filter ProcessingNotes to just those for the specified PayRunEntry",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/processingnotes/{id}": {
      "get": {
        "tags": [
          "ProcessingNote"
        ],
        "summary": "Get a ProcessingNote",
        "operationId": "GetProcessingNote",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessingNote"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{id}/documents": {
      "post": {
        "tags": [
          "ProcessingNote"
        ],
        "summary": "Add Document",
        "description": "Adds document to the ProcessingNote",
        "operationId": "AddDocumentProcessingNote",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the ProcessingNote you want to attach documents to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/payrun/{id}/documents/{documentId}": {
      "delete": {
        "tags": [
          "ProcessingNote"
        ],
        "summary": "Delete ProcessingNote Document",
        "description": "Deletes the document specified by the documentId for the ProcessingNote specified by the Id",
        "operationId": "DeleteDocumentProcessingNote",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The Id of the Document you want to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "get": {
        "tags": [
          "ProcessingNote"
        ],
        "summary": "Get ProcessingNote Document",
        "description": "Gets the document specified by the documentId for the ProcessingNote specified by the Id",
        "operationId": "GetDocumentProcessingNote",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The Id of the Document you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/reports/packs": {
      "get": {
        "tags": [
          "ReportPack"
        ],
        "summary": "List ReportPacks",
        "description": "Lists all ReportPacks for an Employer.",
        "operationId": "IndexReportPack",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to list ReportPacks",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ReportPack"
        ],
        "summary": "Create ReportPack",
        "description": "Creates a new ReportPack for the Employer.",
        "operationId": "CreateReportPack",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportPack"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportPack"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportPack"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportPack"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportPack"
                }
              }
            }
          },
          "404": {
            "description": "Employer Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/reports/packs/{id}": {
      "get": {
        "tags": [
          "ReportPack"
        ],
        "summary": "Get ReportPack",
        "description": "Gets the ReportPack specified.",
        "operationId": "GetReportPack",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the ReportPack belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportPack"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ReportPack"
        ],
        "summary": "Update ReportPack",
        "description": "Updates a ReportPack for the Employer.",
        "operationId": "UpdateReportPack",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportPack"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportPack"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportPack"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportPack"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportPack"
                }
              }
            }
          },
          "404": {
            "description": "Employer Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "ReportPack"
        ],
        "summary": "Delete ReportPack",
        "description": "Deletes the specified ReportPack.",
        "operationId": "DeleteReportPack",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/p60/{employeeId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "P60 For Employee",
        "description": "Gets a P60 in PDF format for the TaxYear and Employee specified. A URL is returned which points to the PDF file.",
        "operationId": "P60Reports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The TaxYear the P60 is for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/p60": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "All P60s For TaxYear",
        "description": "Returns all P60s in a single PDF file for the TaxYear and Employer specified\r\nIf you set the accept header to \"text/html\" then unlike other reports the html is NOT in the <code>Content</code> field.\r\nAs there are multiple HTML documents they are encoded as a JSON array of strings in the <code>Model</code> field.",
        "operationId": "P60MultipleReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The TaxYear you want P60s for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeEmployeesWithP60EmailSent",
            "in": "query",
            "description": "Exclude Employees with Already Sent P60 Emails.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/p60/email/{employeeId}": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Email P60 to an Employee",
        "description": "Email a P60 to an Employee",
        "operationId": "EmailP60Reports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee you want the email a P60 to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "query",
            "description": "The TaxYear you want P60s for.",
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/reports/p60/email": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Email P60 to all Employees",
        "description": "Email P60 to all Employee",
        "operationId": "EmailP60MultipleReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "query",
            "description": "The TaxYear you want P60s for.",
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "excludeEmployeesWithP60EmailSent",
            "in": "query",
            "description": "Exclude Employees with Already Sent P60 Emails.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/p11d/{employeeId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "P11D For Employee",
        "description": "Gets a P11D in PDF format for the TaxYear and Employee specified. A URL is returned which points to the PDF file.",
        "operationId": "P11DReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The Id of the Employee.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The TaxYear the P60 is for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/papdis": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "PAPDIS File",
        "description": "Returns a PAPDIS compliant file for the PayRun and Pension Provider PAPDIS Id specified",
        "operationId": "PapdisFileReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "schemeId",
            "in": "query",
            "description": "The Id of the Pension Scheme you want a file for.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/PapdisDocumentReportResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PapdisDocumentReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/PapdisDocumentReportResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PapdisDocumentReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/PapdisDocumentReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/cis300/{id}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "CIS300",
        "description": "Returns a CIS300 as a CSV or human-readable report",
        "operationId": "Cis300Reports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of CIS300.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cis300ReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/Cis300ReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Cis300ReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Cis300ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/fps/{id}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "FPS",
        "description": "Returns an FPS as a CSV file",
        "operationId": "FpsReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of FPS.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "incAllEmployees",
            "in": "query",
            "description": "If true, then any employees that were paid earlier in the year but not on this FPS will also be included",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FpsReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/FpsReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/exb/{id}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "EXB",
        "description": "Returns an EXB as a CSV file",
        "operationId": "ExbReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of EXB.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExbReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ExbReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/AeAssessments": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "AutoEnrolment Assessments",
        "description": "Returns a list of Items representing your current Employees along with their most recent Auto Enrolment Assessment in the metadata field.",
        "operationId": "AeAssessmentsReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemListReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ItemListReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/p45": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "P45 For Employee",
        "description": "Get a P45 for an Employee you've marked as a leaver",
        "operationId": "P45Reports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "The Id of the Employee you want a P45 for.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/p45/email": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Email P45 to Employee",
        "description": "Email a P45 to an Employee you've marked as a leaver",
        "operationId": "EmailP45Reports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "The Id of the Employee you want the email a P45 to.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{employeeId}/p11detailed": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "P11 (Detailed)",
        "description": "Returns a detailed P11 Report for the given employee.",
        "operationId": "P11DetailedReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The employee Id of the employee you want to report on",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The tax year you want to report on.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/P11DetailedReportResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/P11DetailedReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/P11DetailedReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/p11detailed": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "All Detailed P11s For TaxYear",
        "description": "Returns all detailed P11s in a single PDF file for the TaxYear and Employer specified\r\nIf you set the accept header to \"text/html\" then unlike other reports the html is NOT in the <code>Content</code> field.\r\nAs there are multiple HTML documents they are encoded as a JSON array of strings in the <code>Model</code> field.",
        "operationId": "P11DetailedMultipleReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the employer you want to report on",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The tax year you want to report on.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{employeeId}/p11": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "P11",
        "description": "Returns a P11 Report, detailing all payments and deductions for the given employee",
        "operationId": "P11Reports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The employee Id of the employee you want to report on",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "description": "The tax year you want to report on.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/P11ReportResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/P11ReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/P11ReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/P11ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/p30/{periodEnding}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "P30",
        "description": "Returns a P30 Report summarising the employers HMRC liabilities for the period.\r\nFor available periods retrieve a list of HmrcLiability and examine the metadata.\r\nIf the accept header is set to \"text/csv\" then the periodEnding parameter is ignored and you'll receive a CSV for the entire TaxYear.",
        "operationId": "P30Reports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "periodEnding",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/p32": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "P32",
        "description": "Returns a P32 Report detailing the employers HMRC liabilities for the year.",
        "operationId": "P32Reports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/P32ReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/P32ReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/P32ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/payments/employee": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "PayRun Payments",
        "description": "Returns a list of all employee payments that need to be made as a result of a Payrun.\r\nIf you specifically want just bank payments (employees where PayMethod is Credit) then you\r\nmay find the Bank Payment Instructions API call more useful",
        "operationId": "PayRunPaymentsReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "includeNonEmployeePayments",
            "in": "query",
            "description": "If set to true then we'll also include payments that need to be made to HMRC and PensionProviders",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrunPaymentsReportReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/PayrunPaymentsReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/PayrunPaymentsReportReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/PayrunPaymentsReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/payrun-csv": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "PayRun CSV (deprecated)",
        "description": "Download the lines of a PayRun to a CSV file.\r\nPlease use Get PayRun CSV that now accepts a parameter for CSV type",
        "operationId": "PayRunCsvReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "summary",
            "in": "query",
            "description": "If set to true then instead of a line-by-line CSV, you'll receive a summary for each employee",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/payruncsv": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get PayRun CSV",
        "description": "Download the lines of a PayRun to a CSV file.",
        "operationId": "GetPayRunCsvReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "csvType",
            "in": "query",
            "description": "Choose the type of CSV you want to generate",
            "schema": {
              "$ref": "#/components/schemas/PayRunCsvType"
            }
          },
          {
            "name": "mappingId",
            "in": "query",
            "description": "If you provide the id of a PaymentCsvMapping that is column based then we'll return the CSV formatted accordingly",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/aeo/{employeeId}/{id}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "AEO Statement",
        "description": "Returns a statement for an Attachment Order, listing payments that have been made.",
        "operationId": "AeoStatementReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the AttachmentOrder",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentOrderReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentOrderReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentOrderReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentOrderReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/gross-to-net": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Gross To Net",
        "description": "Returns a report comparing employees' gross pay with their net pay for one or more pay periods.",
        "operationId": "GrossToNetReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "fromPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "toPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "forCis",
            "in": "query",
            "description": "If true then CIS Subcontractors are reported on.\r\n            If all your employees are CIS Subcontractors then this will default to true, otherwise it defaults to false",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrossToNetReportReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/GrossToNetReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/GrossToNetReportReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/GrossToNetReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/ytd": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Year To Date Values",
        "description": "Returns a CSV file containing YTD values for all Employees on the payrun.",
        "operationId": "PayrunYtdReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/YtdReportReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/YtdReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/YtdReportReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/YtdReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/costanalysis": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Cost Analysis",
        "description": "Returns a report analysing the costs of a payrun or range of payruns.",
        "operationId": "CostAnalysisReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "fromPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "toPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostAnalysisReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/CostAnalysisReportReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/CostAnalysisReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/costofemployment": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Cost Of Employment",
        "description": "Returns a report detailing the employment cost per employee for a payrun or range of payruns.",
        "operationId": "CostOfEmploymentReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "fromPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "toPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostOfEmploymentReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/CostOfEmploymentReportReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/CostOfEmploymentReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/fullsummaryofpay": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Cost Of Employment",
        "description": "Returns a report detailing the employment cost per employee for a payrun or range of payruns.",
        "operationId": "FullSummaryOfPayReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "period",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullSummaryOfPayReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/FullSummaryOfPayReportReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/FullSummaryOfPayReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/statutory-pay": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Statutory Pay",
        "description": "Returns a report detailing statutory pay for one or more pay periods.",
        "operationId": "StatutoryPayReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "fromPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "toPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatutoryPayReportReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/StatutoryPayReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/StatutoryPayReportReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/StatutoryPayReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/variance": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Variance Report",
        "description": "Returns a report comparing two pay periods or two ranges of payperiods.",
        "operationId": "VarianceReportReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "fromPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "toPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payPeriodCompare",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "ordinalCompare",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYearCompare",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "fromPeriodCompare",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "toPeriodCompare",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "showPercentage",
            "in": "query",
            "description": "If true then any variations will be shown as a percentage.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "minChange",
            "in": "query",
            "description": "Set a threshold for reporting variance. Ie, provide 0.10 and any variance below 10% will be ignored",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VarianceReportReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/VarianceReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/VarianceReportReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/VarianceReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/umbrella-reconciliation": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Umbrella Reconciliation",
        "description": "Returns an Umbrella Reconciliation report.",
        "operationId": "UmbrellaReconciliationReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "fromPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "toPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Specify an employee id to report on just that employee, otherwise all employees will be included.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UmbrellaReconciliationReportReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/UmbrellaReconciliationReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/UmbrellaReconciliationReportReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/UmbrellaReconciliationReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/furlough": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "FurloughReport",
        "description": "Returns a Furlough Report.",
        "operationId": "FurloughReportReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FurloughReportReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/FurloughReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/FurloughReportReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/FurloughReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/hourly-pay": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Hourly Pay",
        "description": "Returns a report summarising the hourly pay for employees for one or more pay periods.",
        "operationId": "HourlyPayReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "fromPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "toPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HourlyPayReportReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/HourlyPayReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/HourlyPayReportReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/HourlyPayReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/holiday": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Holiday",
        "description": "Returns a report summarising holiday usage for all employees.",
        "operationId": "HolidayReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accruals",
            "in": "query",
            "description": "If set to true then you'll receive a report for holiday pay accruals instead of holiday allowances. Defaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HolidayReportReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/HolidayReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/HolidayReportReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/HolidayReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/right-to-work": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "RightToWork",
        "description": "Returns a report summarising RightToWork information for all employees.",
        "operationId": "RightToWorkReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RightToWorkReportReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/RightToWorkReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/RightToWorkReportReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/RightToWorkReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/payments/employee/credit": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Bank Payment Instructions",
        "description": "Returns a list of bank payments that need to be made to employees as a result of a Payrun.\r\nYou can optionally provide a PaymentDate and only payments for that date will be returned.",
        "operationId": "BankPaymentInstructionsReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "incPensions",
            "in": "query",
            "description": "Set to true and we'll include any payment due to Pension Providers",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "incHmrc",
            "in": "query",
            "description": "Set to true and we'll include any payment due to HMRC",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "incAeos",
            "in": "query",
            "description": "Set to true and we'll include any payment due as a result of AttachmentOrders",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "incDeductions",
            "in": "query",
            "description": "Set to true and we'll include any payment due to Deductions that are set to be paid to a Payee",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankPaymentInstructionReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BankPaymentInstructionReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/cisstatement/{taxMonth}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "CIS Statement",
        "description": "Returns a CIS Statement for the employee specified.",
        "operationId": "CisStatementReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "taxMonth",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Specify an employeeId to get a single statement.\r\n            If you don't provide a value then all Subcontractors will be included.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/CisStatementListReportResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CisStatementListReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/cissummary": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "CIS Subcontractor Summary",
        "description": "Returns a list of all CIS Subcontractors along with verification details",
        "operationId": "CisSubContractorSummaryReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/CisSubContractorSummaryListReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/CisSubContractorSummaryListReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/CisSubContractorSummaryListReportResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CisSubContractorSummaryListReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/payrunsummary": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "PayRunSummary",
        "description": "Returns an array of PayRunSummaryLine for one or multiple periods. Similar to a PayRunJournal except that it can cover multiple periods.",
        "operationId": "PayRunSummaryReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "fromPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "toPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "deptCode",
            "in": "query",
            "description": "If specified then only employees assigned to this department code at the time of the payrun will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeQty",
            "in": "query",
            "description": "If set to true and acceptType is text/csv, then where a PayCode on a PayLine is a multiplier code we'll include a Qty value for the number of days/hours",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunSummaryLineIEnumerableReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunSummaryLineIEnumerableReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/analysis": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Analysis",
        "description": "Returns an AnalysisReport for one or multiple periods.",
        "operationId": "AnalysisReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "fromPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "toPeriod",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "deptCode",
            "in": "query",
            "description": "If specified then only employees assigned to this department code at the time of the payrun will be included",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisReportReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/{id}/payslip": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Payslip",
        "description": "Returns a single Payslip for the given PayRunEntry of a PayRun. The type of response depends on the accept header.",
        "operationId": "PayslipReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the PayRunEntry.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/PayslipReportResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayslipReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/PayslipReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/payslips": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Payslips",
        "description": "Returns all Payslips for the given PayRun\r\nIf you set the accept header to \"text/html\" then unlike other reports the html is NOT in the <code>Content</code> field.\r\nAs there are multiple HTML documents they are encoded as a JSON array of strings in the <code>Model</code> field.",
        "operationId": "PayslipsReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "unemailed",
            "in": "query",
            "description": "Set this to True if you only want the Payslips that haven't been sent by email",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payslip/example/pdf": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Example Payslip",
        "description": "Use this operation to test your PayslipCustomisation.\r\nWe'll use dummy date and create a Payslip PDF or HTML document based on the customisation that you submit",
        "operationId": "ExamplePayslipReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Your PayslipCustomisation.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PayslipCustomisation"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayslipCustomisation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayslipCustomisation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayslipCustomisation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employees": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Employee Export Details",
        "description": "Returns a CSV file containing details for all Employees.",
        "operationId": "EmployeeExportReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "includeBankAccountDetails",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeYtd",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "incPensionInfo",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includePayInfo",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeNotes",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ytd": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Year To Date Values",
        "description": "Returns a CSV file containing YTD values for all Employees.",
        "operationId": "YtdReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/taxcode": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Taxcode Change",
        "description": "Returns a CSV file containing Tax Code Changes values for all Employees.",
        "operationId": "TaxCodeChangesReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCodeChangeReportReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCodeChangeReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCodeChangeReportReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCodeChangeReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/employers": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Employer Export",
        "description": "Returns a CSV file containing details for all Employers.",
        "operationId": "EmployerExportReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of any employer to which you have access. It wont affect the report results.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/NiLetterValidationReport": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "NI Letter Validation (Payrun)",
        "description": "Checks the NI Letters allocated to employees on a specific payrun",
        "operationId": "NiLetterValidationReportReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "periodNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordinal",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NiLetterValidationReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/NiLetterValidationReportReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/NiLetterValidationReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/NiLetterValidationReport": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "NI Letter Validation (Employees)",
        "description": "Checks the NI Letters allocated to your employees. If no pay date is provided, the checks are based on todays date.",
        "operationId": "NiLetterValidationReportEmployeesReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "payPeriod",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PayPeriods"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NiLetterValidationReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/NiLetterValidationReportReportResponse"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/NiLetterValidationReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/reports/{taxYear}/EmployeeBenefits": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Employee Benefits",
        "description": "Returns a output containing details for employee benefits.",
        "operationId": "EmployeeBenefitsReports",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taxYear",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaxYear"
            }
          },
          {
            "name": "reportType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeBenefitsReportReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeBenefitsReportReportResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeBenefitsReportReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/tags": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "List Tags",
        "description": "Lists all Tags for an Employer.",
        "operationId": "IndexTag",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to list Tags",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tag"
        ],
        "summary": "Create Tag",
        "description": "Creates a new Tag for the Employer.",
        "operationId": "CreateTag",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/tags/{code}": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Get Tag",
        "description": "Gets the Tag specified.",
        "operationId": "GetTag",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Tag belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tag"
        ],
        "summary": "Update Tag",
        "description": "Updates a Tag for the Employer.",
        "operationId": "UpdateTag",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tag"
        ],
        "summary": "Delete Tag",
        "description": "Deletes the specified Tag.",
        "operationId": "DeleteTag",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/tenants": {
      "post": {
        "tags": [
          "Tenant"
        ],
        "summary": "Create a Tenant",
        "description": "Use this method to create a new Tenant\r\nOnly available to SuperAdmins",
        "operationId": "CreateTenant",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Tenant"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tenant"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Tenant"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Tenant"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success - \r\nthe Tenant has been created and is returned in the body.\r\nThe unique URL for this Tenant is returned in the Location header.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/tenants/{id}": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Get a Tenant",
        "description": "If you are an administrator for a Tenant then you can retrieve the settings for it using this API call",
        "operationId": "GetTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Update a Tenant",
        "description": "If you are an administrator for a Tenant then you can update the settings for it using this API call",
        "operationId": "UpdateTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant you want to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Tenant"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tenant"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Tenant"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Tenant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/tenants/{id}/css": {
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Update CSS",
        "description": "Update the custom CSS for a Tenant",
        "operationId": "UpdateCssTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant you want to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/css/colors": {
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Update CSS Colors",
        "description": "Update the colors for a Tenant",
        "operationId": "UpdateCssColorsTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant you want to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StringStringKeyValuePair"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StringStringKeyValuePair"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StringStringKeyValuePair"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StringStringKeyValuePair"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StringStringKeyValuePair"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/logo": {
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Upload Logo",
        "description": "Upload an image to use as your main logo. We'll upload it and set the URL on the HomeImgUrl property of the Tenant.",
        "operationId": "UpdateLogoTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant you want to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/favicon": {
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Upload Favicon",
        "description": "Upload an image to use as favicon. We'll upload it and set the URL on the FavIcon property of the Tenant.",
        "operationId": "UpdateFavIconTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant you want to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/users": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "List Users",
        "description": "Returns a list of users for the Tenant",
        "operationId": "UsersTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant you want to list Users for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "pageNum",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortByLastLogin",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "category",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UserCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/users/admins": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "List Admin Users",
        "description": "Returns a list of admin users for the Tenant",
        "operationId": "AdminUsersTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant you want to list admin Users for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tenant"
        ],
        "summary": "Remove Admin User",
        "description": "Removes the specified admin user for the Tenant",
        "operationId": "RemoveAdminUserTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant you want to remove the  admin User from.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "Tenant"
        ],
        "summary": "Add Admin User",
        "description": "Adds the specified user as an admin for the Tenant",
        "operationId": "AddAdminUserTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant you want to remove the  admin User from.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/tenants/{id}/users/search": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Search Users",
        "description": "Returns a list of users for the Tenant that match the search",
        "operationId": "UsersSearchTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant you want to search Users for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/users/{userId}": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Get a User",
        "description": "Returns details of a User that belongs to the Tenant",
        "operationId": "UserTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant you want to get a User for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/users/{userId}/bills": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Get User Bills",
        "description": "Returns all UsageBills for a User",
        "operationId": "UserBillsTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant you want to get a Users UsageBills for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/users/{userId}/employers": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Get User Employers",
        "description": "Returns Employer details for a User that belongs to the Tenant",
        "operationId": "UserEmployersTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant you want to get User Employers for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/users/{userId}/disabled": {
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Disable User Account",
        "description": "Disables (or re-enabled) a user account",
        "operationId": "DisabledTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "disabled",
            "in": "query",
            "description": "Whether or not the account should be disabled.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "A message to show the user explaining why the account is disabled.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/tenants/{id}/users/{userId}/employercreation": {
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Enable Employer Creation",
        "description": "Enable (or disable) a user accounts ability to create new employers",
        "operationId": "EmployerCreationTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Whether or not the account can create employers.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/tenants/{id}/users/{userId}/tenant": {
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Set User Tenant",
        "description": "Changes the Tenant for a User. Only applicable if you manage two or more Tenants",
        "operationId": "SetTenantTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant the user is currently assigned to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "newTenantId",
            "in": "query",
            "description": "The Id of the Tenant the user is to be assigned to.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/tenants/{id}/users/{userId}/accounting": {
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Set User Accounting Id",
        "description": "Updates the Customer Accounting Id for a user",
        "operationId": "SetAccountingIdTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accountingId",
            "in": "query",
            "description": "The CustomerAccountingId for the user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/tenants/{id}/users/{userId}/monthlyminimum": {
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Set Monthly Minimum",
        "description": "Updates the MonthlyMinimum subscrition charge for a user",
        "operationId": "SetMonthlyMinimumTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MonthlyMinimum"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MonthlyMinimum"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MonthlyMinimum"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MonthlyMinimum"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/tenants/{id}/users/{userId}/bureauredir": {
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Set Bureau Redirect",
        "description": "Sets or removes the redirect email address for a users Bureau-related notifications",
        "operationId": "SetBureauRedirectEmailAddressTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "emailAddress",
            "in": "query",
            "description": "The email address to redirect to, or an empty string to remove the redirect.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/tenants/{id}/bills/{year}/{month}": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Get Bills",
        "description": "Returns a list of UsageBill for Users of this Tenant, for the Year and Month supplied",
        "operationId": "BillsTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant you want to list bills for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "year",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/bills/{year}/{month}/{billId}": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Get Bill",
        "description": "Returns details of a UsageBill for a User of this Tenant",
        "operationId": "BillTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant the bill belongs to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "year",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "billId",
            "in": "path",
            "description": "The Id of the UsageBill.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageBill"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Update Bill",
        "description": "Updates the UsageBill.",
        "operationId": "UpdateBillTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant the bill belongs to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "year",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "billId",
            "in": "path",
            "description": "The Id of the UsageBill.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UsageBill"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsageBill"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UsageBill"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UsageBill"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageBill"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/usage/{year}/{month}": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Get Usage",
        "description": "Returns activity for Users of this Tenant, for the Year and Month supplied",
        "operationId": "UsageTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "year",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/employers/{employerId}/usage": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Get Employer Usage",
        "description": "Returns all activity for the given Employer",
        "operationId": "EmployerUsageTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/employers/{employerId}/users": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Get Employer Users",
        "description": "Returns all users for the given Employer",
        "operationId": "EmployerUsersTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/reports/users/nobillableactivity": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Get Users with no Billable Activity.",
        "description": "Returns a .csv file containing users created in or before the given month that do not have billable activity.",
        "operationId": "GetUsersWithNoBillableActivityTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "month",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "year",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/reports/weeklyactivity": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Weekly Activity Report",
        "description": "Returns a report detailing User activity, summarised by week, for the given date range",
        "operationId": "WeeklyActivityTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allTenants",
            "in": "query",
            "description": "If set to true then the report will include all Tenants to which you have access",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/bills": {
      "post": {
        "tags": [
          "Tenant"
        ],
        "summary": "Create Bills for Period",
        "description": "Generates usage and creates bills for all Tenants\r\nOnly available to SuperAdmins",
        "operationId": "CreateBillsTenant",
        "parameters": [
          {
            "name": "month",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "year",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Generated bills",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/ritsubmissionsettings": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Get RtiSubmissionSettings",
        "description": "If the Tenant has BureauFeaturesEnabled then they can store RtiSubmissionSettings for use across multiple employers.\r\nThis end point returns them RtiSubmissionSettings.",
        "operationId": "GetRtiSubmissionSettingsTenant",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The Id of the Tenant.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RtiSubmissionSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Update RtiSubmissionSettings",
        "description": "If the Tenant has BureauFeaturesEnabled then they can store RtiSubmissionSettings for use across multiple employers.\r\nThis end point updates the RtiSubmissionSettings.",
        "operationId": "UpdateRtiSubmissionSettingsTenant",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The Id of the Tenant.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RtiSubmissionSettings"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RtiSubmissionSettings"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RtiSubmissionSettings"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RtiSubmissionSettings"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RtiSubmissionSettings"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/users/{userId}/omnipresentrole": {
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Set Omnipresent Role",
        "description": "If the Tenant has EnableOmnipresentUsers enabled then they have the ability to make users have automatic access to all employers on that tenant with the specified Role.\r\nThis end point updates the Omnipresent Role of the user.",
        "operationId": "SetOmnipresentRoleTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "The role for the user for omnipresent access. Any role apart from PayrollClient can be used.",
            "schema": {
              "$ref": "#/components/schemas/Role"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/tenants/{id}/email": {
      "get": {
        "tags": [
          "TenantEmail"
        ],
        "summary": "List Emails",
        "description": "Returns a list of all emails sent for this Tenant.",
        "operationId": "IndexTenantEmail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "pageNum",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/email/{emailId}": {
      "get": {
        "tags": [
          "TenantEmail"
        ],
        "summary": "Get Email",
        "description": "Returns the email along with its status.",
        "operationId": "GetEmailTenantEmail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantEmail"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TenantEmail"
        ],
        "summary": "Re-send Email",
        "description": "Re-sends an existing email.",
        "operationId": "ResendEmailTenantEmail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantEmail"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/email/settings": {
      "get": {
        "tags": [
          "TenantEmail"
        ],
        "summary": "Get MailSettings",
        "description": "Returns the MailSettings for a Tenant.",
        "operationId": "GetMailSettingsTenantEmail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TenantEmail"
        ],
        "summary": "Update MailSettings",
        "description": "Updates the MailSettings for a Tenant.",
        "operationId": "UpdateMailSettingsTenantEmail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MailSettings"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailSettings"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MailSettings"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MailSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailSettings"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{id}/email/settings/test": {
      "post": {
        "tags": [
          "TenantEmail"
        ],
        "summary": "Send test email",
        "description": "This API call will generate a test email based on your MailSettings.",
        "operationId": "TestMailSettingsTenantEmail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Tenant",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The address to send a test email to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerEmail"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/webhooks": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "List Webhooks",
        "description": "Lists all Webhooks for an Employer.",
        "operationId": "IndexWebhook",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to list Webhooks",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "Create Webhook",
        "description": "Creates a new Webhook for the Employer.",
        "operationId": "CreateWebhook",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/employers/{employerId}/webhooks/{id}": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "Get Webhook",
        "description": "Gets the Webhook specified.",
        "operationId": "GetWebhook",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Webhook belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Webhook"
        ],
        "summary": "Update Webhook",
        "description": "Updates a Webhook for the Employer.",
        "operationId": "UpdateWebhook",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhook"
        ],
        "summary": "Delete Webhook",
        "description": "Deletes the specified Webhook.",
        "operationId": "DeleteWebhook",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/employers/{employerId}/webhooks/samples/{webhookEvent}": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "Sample Value",
        "description": "Returns an example of the data you can expect your end point to receive when a webhook is fired.",
        "operationId": "SampleWebhook",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the Webhook belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "webhookEvent",
            "in": "path",
            "description": "The WebhookEvent that you want a sample value for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/WebhookEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/webhooks/{id}/payloads": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "List WebhookPayloads",
        "description": "Returns a list of all WebhookPayloads for this webhook",
        "operationId": "PayloadsWebhook",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "pageNum",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/webhooks/{id}/payloads/{payloadId}": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "Get WebhookPayload",
        "description": "Returns the specified WebhookPayload for this webhook",
        "operationId": "PayloadWebhook",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payloadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookPayload"
                }
              }
            }
          }
        }
      }
    },
    "/employers/{employerId}/workingpatterns": {
      "get": {
        "tags": [
          "WorkingPattern"
        ],
        "summary": "List WorkingPatterns",
        "description": "Lists all WorkingPattern for the Employer specified.",
        "operationId": "IndexWorkingPattern",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer for which you want to list WorkingPattern",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "WorkingPattern"
        ],
        "summary": "Create WorkingPattern",
        "description": "Creates a new WorkingPattern for the Employer.",
        "operationId": "CreateWorkingPattern",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkingPattern"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkingPattern"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkingPattern"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkingPattern"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkingPattern"
                }
              }
            }
          },
          "404": {
            "description": "Employer Not Found"
          }
        }
      }
    },
    "/employers/{employerId}/workingpatterns/{id}": {
      "get": {
        "tags": [
          "WorkingPattern"
        ],
        "summary": "Get WorkingPattern",
        "description": "Gets the WorkingPattern specified.",
        "operationId": "GetWorkingPattern",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "The Id of the Employer to which the WorkingPattern belongs.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the WorkingPattern you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkingPattern"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "WorkingPattern"
        ],
        "summary": "Update WorkingPattern",
        "description": "Updates the details of an existing WorkingPattern.",
        "operationId": "UpdateWorkingPattern",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkingPattern"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkingPattern"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkingPattern"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkingPattern"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkingPattern"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "WorkingPattern"
        ],
        "summary": "Delete WorkingPattern",
        "description": "Deletes the specified WorkingPattern.",
        "operationId": "DeleteWorkingPattern",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "type": "object",
        "properties": {
          "line1": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "line2": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "line3": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "line4": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "line5": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "postCode": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "foreignCountry": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AeAction": {
        "enum": [
          "NoChange",
          "Enrol",
          "Exit",
          "Inconclusive",
          "Postpone",
          "ReEnrol"
        ],
        "type": "string"
      },
      "AeAssessment": {
        "type": "object",
        "properties": {
          "assessmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "employeeState": {
            "$ref": "#/components/schemas/AeEmployeeState"
          },
          "age": {
            "type": "integer",
            "description": "[readonly] The age of the Employee at the time of the assessment",
            "format": "int32"
          },
          "ukWorker": {
            "$ref": "#/components/schemas/AeUKWorker"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "description": "[readonly] The PaySchedule ordinal for the Employee at the time of the assessment",
            "format": "int32"
          },
          "earningsInPeriod": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "qualifyingEarningsInPeriod": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "aeExclusionCode": {
            "$ref": "#/components/schemas/AeExclusionCode"
          },
          "status": {
            "$ref": "#/components/schemas/AeStatus"
          },
          "reason": {
            "type": "string",
            "description": "[readonly] The reason for determining the Status given.",
            "nullable": true
          },
          "action": {
            "$ref": "#/components/schemas/AeAssessmentAction"
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "As part of AutoEnrolment we assess your Employees to see if they need to be auto-enroled in a Pension.\r\nThis model shows the result of an assessment."
      },
      "AeAssessmentAction": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/AeAction"
          },
          "employeeState": {
            "$ref": "#/components/schemas/AeEmployeeState"
          },
          "actionCompleted": {
            "type": "boolean",
            "description": "[readonly] Indicates whether or not the required action was successfully completed"
          },
          "actionCompletedMessage": {
            "type": "string",
            "description": "[readonly] Gives further information about the action taken or the reason if wasn't successfully completed",
            "nullable": true
          },
          "requiredLetter": {
            "$ref": "#/components/schemas/AeStatutoryLetter"
          },
          "pensionSchemeId": {
            "type": "string",
            "description": "[readonly] The PensionSchemeId that a completed action relates to",
            "format": "uuid"
          },
          "workerGroupId": {
            "type": "string",
            "description": "[readonly] The WorkerGroupId that a completed action relates to",
            "format": "uuid"
          },
          "letterNotYetSent": {
            "type": "boolean",
            "description": "[readonly] Indicates whether or not any required letter has been sent"
          }
        },
        "additionalProperties": false
      },
      "AeEmployeeState": {
        "enum": [
          "Automatic",
          "OptOut",
          "OptIn",
          "VoluntaryJoiner",
          "ContractualPension",
          "CeasedMembership",
          "Leaver",
          "Excluded",
          "Enrol"
        ],
        "type": "string"
      },
      "AeExclusionCode": {
        "enum": [
          "NotKnown",
          "NotAWorker",
          "NotWorkingInUk",
          "NoOrdinarilyWorkingInUk",
          "OutsideOfAgeRange",
          "SingleEmployee",
          "CeasedActiveMembershipInPast12Mo",
          "CeasedActiveMembership",
          "ReceivedWulsInPast12Mo",
          "ReceivedWuls",
          "Leaving",
          "TaxProtection",
          "CisSubContractor"
        ],
        "type": "string"
      },
      "AeStatus": {
        "enum": [
          "Eligible",
          "NonEligible",
          "Entitled",
          "NoDuties"
        ],
        "type": "string"
      },
      "AeStatutoryLetter": {
        "enum": [
          "B1",
          "B2",
          "B3",
          "B4"
        ],
        "type": "string"
      },
      "AeUKWorker": {
        "enum": [
          "No",
          "Yes",
          "Ordinarily"
        ],
        "type": "string"
      },
      "AnalysisReport": {
        "type": "object",
        "properties": {
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalysisReportLine"
            },
            "nullable": true
          },
          "payCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayCode"
            },
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Item"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "periodTo": {
            "type": "integer",
            "format": "int32"
          },
          "startPeriodName": {
            "type": "string",
            "nullable": true
          },
          "endPeriodName": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false
      },
      "AnalysisReportLine": {
        "type": "object",
        "properties": {
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "gross": {
            "type": "number",
            "format": "double"
          },
          "niableGross": {
            "type": "number",
            "format": "double"
          },
          "pensionableGross": {
            "type": "number",
            "format": "double"
          },
          "net": {
            "type": "number",
            "format": "double"
          },
          "takeHome": {
            "type": "number",
            "format": "double"
          },
          "employerNic": {
            "type": "number",
            "format": "double"
          },
          "employerPension": {
            "type": "number",
            "format": "double"
          },
          "showQtyColumn": {
            "type": "boolean"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalysisReportLineValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AnalysisReportLineValue": {
        "type": "object",
        "properties": {
          "qty": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "AnalysisReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/AnalysisReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "AttachmentOrder": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AttachmentOrderType"
          },
          "carryForwardShortfall": {
            "type": "boolean",
            "description": "[ReadOnly] Whether or not shortfalls should be carried forward",
            "readOnly": true
          },
          "allowProtectedEarnings": {
            "type": "boolean",
            "description": "[ReadOnly] Whether or not shortfalls should be carried forward",
            "readOnly": true
          },
          "autoDeduction": {
            "type": "boolean",
            "description": "[readonly] Whether or not the amount to be deducted is automatically calculated",
            "readOnly": true
          },
          "reference": {
            "maxLength": 100,
            "type": "string",
            "description": "The reference which appeared on the court paperwork",
            "nullable": true
          },
          "issueDate": {
            "type": "string",
            "description": "The date of issue for this Order",
            "format": "date"
          },
          "applyFrom": {
            "type": "string",
            "description": "The date from which to apply this Order",
            "format": "date"
          },
          "applyUntil": {
            "type": "string",
            "description": "An optional date on which to stop applying this order",
            "format": "date",
            "nullable": true
          },
          "deductionIsPercentage": {
            "type": "boolean",
            "description": "Whether or not the amount given for Deduction is a percentage rather than a fixed amount"
          },
          "deduction": {
            "type": "number",
            "description": "The percentage or amount (depending on DeductionIsPercentage) to deduct",
            "format": "double"
          },
          "protectedEarningsIsPercentage": {
            "type": "boolean",
            "description": "Whether or not the amount for ProtectedEarnings is a percentage rather than a fixed amount."
          },
          "protectedEarnings": {
            "type": "number",
            "description": "The percentage or amount or percentage (depending on ProtectedEarningsIsPercentage) to protect",
            "format": "double"
          },
          "chargeAdminFee": {
            "type": "boolean",
            "description": "Whether or not a £1 admin fee should be deducted for this order"
          },
          "shortfall": {
            "type": "number",
            "description": "Any shortfall that is being carried forward",
            "format": "double"
          },
          "stopWhenTotalPaid": {
            "type": "boolean",
            "description": "Whether or not this order should be stopped once a total amount has been paid"
          },
          "totalAmountToPay": {
            "type": "number",
            "description": "The Total amount that needs to be paid for this Order",
            "format": "double"
          },
          "amountPreviouslyPaid": {
            "type": "number",
            "description": "Any amount that has previously been paid towards this Order",
            "format": "double"
          },
          "stopped": {
            "type": "boolean",
            "description": "[readonly] Whether or not this Order has been stopped.\r\nThis is set automatically when either it's paid in full or the ApplyUntil date has been reached."
          },
          "notes": {
            "maxLength": 300,
            "type": "string",
            "description": "A free-form text field to record any comments",
            "nullable": true
          },
          "includeBankDetails": {
            "type": "boolean"
          },
          "bankDetails": {
            "$ref": "#/components/schemas/BankDetails"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentOrderPayment"
            },
            "description": "[readonly] Payments made towards this order. Only populated when viewed as a report.",
            "nullable": true
          },
          "payee": {
            "type": "string",
            "description": "The Id of the Payee, if any, that deductions are to be paid to.",
            "format": "uuid",
            "nullable": true
          },
          "documentCount": {
            "type": "integer",
            "description": "[readonly] The number of attachments associated with this model",
            "format": "int32"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "[readonly] The attachments associated with this model",
            "nullable": true
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Used to represent an Attachment of Earnings Order (AEO)"
      },
      "AttachmentOrderPayment": {
        "type": "object",
        "properties": {
          "attachmentOrder": {
            "$ref": "#/components/schemas/Item"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "date": {
            "type": "string",
            "description": "[readonly] The date this deduction was made",
            "format": "date"
          },
          "description": {
            "type": "string",
            "description": "[readonly] Description of deduction, usually the reference from the AttachmentOrder",
            "nullable": true
          },
          "attachablePay": {
            "type": "number",
            "description": "[readonly] The total Attachable pay for the Employee on this PayRun",
            "format": "double"
          },
          "protectedPay": {
            "type": "number",
            "description": "[readonly] The amount of the Attachable Pay that must be protected",
            "format": "double"
          },
          "otherAttachmentOrderDeductions": {
            "type": "number",
            "description": "[readonly] Deductions made on this PayRun for this employee due to  other higher priority AttachmentOrders",
            "format": "double"
          },
          "desiredDeduction": {
            "type": "number",
            "description": "[readonly] The amount that should be deducted, if arrestable pay is available.\r\nNot including any shortfall",
            "format": "double"
          },
          "shortfall": {
            "type": "number",
            "description": "[readonly] Any shortfall (ie arrears) that existed before this PayRun.",
            "format": "double"
          },
          "totalPaid": {
            "type": "number",
            "description": "[readonly] Total amount paid to date, including this deduction.",
            "format": "double"
          },
          "resultingDeduction": {
            "type": "number",
            "description": "[readonly] The actual amount deducted",
            "format": "double"
          },
          "resultingShortfall": {
            "type": "number",
            "description": "[readonly] The resulting shortfall (including any shortfall from previous periods",
            "format": "double"
          },
          "adminFee": {
            "type": "number",
            "description": "[readonly] Any admin fee charged",
            "format": "double"
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Used to represent a payment towards an Attachment of Earnings Order (AEO)"
      },
      "AttachmentOrderReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/AttachmentOrder"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "AttachmentOrderType": {
        "enum": [
          "AeoP",
          "Aeo",
          "Csa",
          "Csa2012",
          "Deo",
          "AeoNp",
          "CcPre92",
          "CcPost92",
          "Ctaeo",
          "Mcaeo",
          "Ea",
          "Cma",
          "Cao",
          "Isd",
          "Ea2006",
          "Caps",
          "Dea",
          "DeaHigher",
          "DeaFixed",
          "CtaeoWales"
        ],
        "type": "string"
      },
      "AuditEventAction": {
        "enum": [
          "Added",
          "Edited",
          "Deleted"
        ],
        "type": "string"
      },
      "AuthScheme": {
        "enum": [
          "OAuth1",
          "OAuth2",
          "Basic",
          "ApiKeyInHeader",
          "Hmac",
          "OAuth2Cc",
          "OAuth2Password"
        ],
        "type": "string"
      },
      "AutoEnrolment": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/AeEmployeeState"
          },
          "stateDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date",
            "nullable": true
          },
          "ukWorker": {
            "$ref": "#/components/schemas/AeUKWorker"
          },
          "daysToDeferAssessment": {
            "type": "integer",
            "description": "The number of days, if any, to defer assessment of this employee.\r\nYou're allowed to defer assessment of new employees by up to 3 months.",
            "format": "int32"
          },
          "postponementDate": {
            "type": "string",
            "description": "[readonly] If a value is present, then employee wont be enrolled on an AE Pension until after this date.\r\nThis is automatically set to a date if the employee is deemed to be an EligibleJobHolder, but the employer has set a Postponement period and this value is currently null\r\nThis is automatically set to null if it already has a value and the employee is deemed NOT to be an EligibleJobHolder - ie, they previously qualified but now do not.",
            "format": "date",
            "nullable": true
          },
          "deferByMonthsNotDays": {
            "type": "boolean",
            "description": "If set to true then the value in DaysToDeferAssessment will be treated as a number of months, not a number of days"
          },
          "exempt": {
            "type": "boolean"
          },
          "aeExclusionCode": {
            "$ref": "#/components/schemas/AeExclusionCode"
          },
          "aePostponementLetterSent": {
            "type": "boolean"
          },
          "lastAssessment": {
            "$ref": "#/components/schemas/AeAssessment"
          }
        },
        "additionalProperties": false
      },
      "AutoEnrolmentSettings": {
        "type": "object",
        "properties": {
          "stagingDate": {
            "type": "string",
            "format": "date"
          },
          "cyclicalReenrolmentDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "previousCyclicalReenrolmentDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "defaultPension": {
            "$ref": "#/components/schemas/PensionSelection"
          },
          "pensionSameAsDefault": {
            "type": "boolean"
          },
          "daysToDeferAssessment": {
            "type": "integer",
            "description": "The number of days, if any, to defer assessment of new employees.\r\nYou're allowed to defer assessment of new employees by up to 3 months.\r\nThis is the default value used when you create a new employee. It can be changed on a per-employee basis.",
            "format": "int32"
          },
          "deferByMonthsNotDays": {
            "type": "boolean",
            "description": "If set to true then the value in DaysToDeferAssessment will be treated as a number of months, not a number of days"
          },
          "deferEnrolmentBy": {
            "type": "integer",
            "description": "The number of days )or weeks, or months), if any, to defer enrolment of employees that are Eligible Jobholders.\r\nFor example, if this is set to 30 days then if an employee meets the criteria for enrolment then they'll only be enrolled if they still meet the criteria 30 days later",
            "format": "int32"
          },
          "deferEnrolmentByPeriodType": {
            "$ref": "#/components/schemas/DeferalPeriodType"
          },
          "includeNonPensionedEmployeesInSubmission": {
            "type": "boolean",
            "description": "Whether or not to include details of non-pensioned employees in your submissions to this provider"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AutomationSettings": {
        "type": "object",
        "properties": {
          "enableAutoPilot": {
            "type": "boolean",
            "description": "IF enabled then payruns will be automatically finalised on the payment date and the next payrun will be started"
          },
          "autoPilotTime": {
            "$ref": "#/components/schemas/AutoPilotFinaliseTime"
          },
          "autoPilotOffset": {
            "maximum": 6,
            "minimum": 0,
            "type": "integer",
            "description": "How many days before the payment date a payrun should be finalised.\r\nSet it to 0 if you want the payrun to be automatically finalised on the payment date itself",
            "format": "int32"
          },
          "enableAutoOpen": {
            "type": "boolean",
            "description": "IF enabled then whenever you close a payrun, the next one will be started. Automatically set to true if EnableAutoPilot is true"
          },
          "autoSubmitFps": {
            "type": "boolean",
            "description": "If set to true, we'll automatically send your FPS to HMRC whenever you finalise a PayRun.\r\nThis property will always have the same value as the property with the same name on the RtiSubmissionSettings model."
          },
          "autoSubmitPayments": {
            "type": "boolean",
            "description": "If set to true, we'll automatically submit payments whenever you finalise a PayRun.\r\nThe employer must be connected to an ExternalDataProvider supporting Type of 'Payments'."
          },
          "autoSubmitJournal": {
            "type": "boolean",
            "description": "If set to true, we'll automatically submit the payroll journal whenever you finalise a PayRun.\r\nThe employer must be connected to an ExternalDataProvider supporting Type of 'Accounting'."
          },
          "autoSubmitPayments_Employee": {
            "type": "boolean",
            "description": "Used in conjunction with AutoSubmitPayments."
          },
          "autoSubmitPayments_Hmrc": {
            "type": "boolean",
            "description": "Used in conjunction with AutoSubmitPayments."
          },
          "autoSubmitPayments_Deductions": {
            "type": "boolean",
            "description": "Used in conjunction with AutoSubmitPayments."
          },
          "autoSubmitPayments_Aeos": {
            "type": "boolean",
            "description": "Used in conjunction with AutoSubmitPayments."
          },
          "autoSubmitPayments_Pensions": {
            "type": "boolean",
            "description": "Used in conjunction with AutoSubmitPayments."
          },
          "employeesWithoutEmailAddress": {
            "type": "integer",
            "description": "[readonly] A count of how many employees or subcontractors for this employer do not have email addresses",
            "format": "int32"
          },
          "employeesWithEmailAddressButNotAutoSending": {
            "type": "integer",
            "description": "[readonly] A count of how many employees or subcontractors for this employer do have email addresses but don't have the option enabled to auto-email payslips",
            "format": "int32"
          },
          "subcontractorsNotAutoSendingStatement": {
            "type": "integer",
            "description": "[readonly] A count of how many subscontractors for this employer do don't have the option enabled to auto-email statement",
            "format": "int32"
          },
          "codingNoticesAutomaticallyApplied": {
            "type": "boolean",
            "description": "[readonly] An indicator of whether or not this employer is automatically applying DpsNotices"
          },
          "payrunEmails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayrunEmail"
            },
            "description": "Automated emails that will be sent when a PayRun is finalised",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Configures various automation settings for an Employer"
      },
      "AutoPilotFinaliseTime": {
        "enum": [
          "JustAfterMidnight",
          "NineAm",
          "OnePm",
          "FourPm",
          "SixPm",
          "ElevenPm"
        ],
        "type": "string"
      },
      "AverageWeeklyEarnings": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/AverageWeeklyEarningsResult"
          },
          "resultDescription": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "averageEarnings": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "threshold": {
            "type": "number",
            "format": "double"
          },
          "eligibilityThreshold": {
            "type": "number",
            "format": "double"
          },
          "requestedDate": {
            "type": "string",
            "format": "date"
          },
          "relevantPeriodStart": {
            "type": "string",
            "format": "date"
          },
          "relevantPeriodEnd": {
            "type": "string",
            "format": "date"
          },
          "relevantPeriodWeekCount": {
            "type": "number",
            "format": "double"
          },
          "relevantPeriodEarnings": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "AverageWeeklyEarningsResult": {
        "enum": [
          "Success",
          "EarningsBelowThreshold",
          "NotEnoughPayrollData",
          "TaxYearNotSupported"
        ],
        "type": "string"
      },
      "BackgroundTaskStatus": {
        "enum": [
          "Queued",
          "Sent",
          "Failed",
          "Processing"
        ],
        "type": "string"
      },
      "BankDetails": {
        "type": "object",
        "properties": {
          "bankName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "bankBranch": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "bankReference": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "accountName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "accountNumber": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "sortCode": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "note": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankHolidayCollection": {
        "enum": [
          "None",
          "EnglandAndWales",
          "Scotland",
          "NorthernIreland"
        ],
        "type": "string"
      },
      "BankPaymentInstruction": {
        "type": "object",
        "properties": {
          "originator": {
            "$ref": "#/components/schemas/BankDetails"
          },
          "bankPayments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayRunPayment"
            },
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "statusMessage": {
            "type": "string",
            "description": "[readonly] A message to elaborate on the Status",
            "nullable": true
          },
          "link": {
            "type": "string",
            "description": "[readonly] If available, a link to the payments in an ExternalDataProvider",
            "nullable": true
          },
          "serviceUserNumber": {
            "type": "string",
            "description": "Service user number to be used while sending payment instruction",
            "nullable": true
          },
          "bureauNumber": {
            "type": "string",
            "description": "Bureau number to be used if available while sending payment instruction",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankPaymentInstructionReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/BankPaymentInstruction"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "BankPaymentInstructionsCsvFormat": {
        "enum": [
          "StandardCsv",
          "Telleroo",
          "BarclaysBacs",
          "SantanderBacs",
          "Sif",
          "Revolut",
          "Standard18FasterPayments",
          "Standard18Bacs",
          "Bankline",
          "BanklineBulk",
          "StandardCsvBacs",
          "LloydsMultipleStandardCsvBacs",
          "LloydsV11CsvBacs",
          "CoOpBulkCsvBacs",
          "CoOpFasterPaymentsCsv"
        ],
        "type": "string"
      },
      "Benefit": {
        "type": "object",
        "properties": {
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "type": {
            "$ref": "#/components/schemas/BenefitType"
          },
          "declarationType": {
            "$ref": "#/components/schemas/BenefitDeclarationType"
          },
          "description": {
            "maxLength": 120,
            "type": "string",
            "description": "A description of this benefit",
            "nullable": true
          },
          "value": {
            "type": "number",
            "format": "double"
          },
          "employeeContribution": {
            "type": "number",
            "format": "double"
          },
          "cashEquivalent": {
            "type": "number",
            "description": "[readonly]",
            "format": "double",
            "readOnly": true
          },
          "assetType": {
            "$ref": "#/components/schemas/BenefitDetailsAssetType"
          },
          "useOfAssetType": {
            "$ref": "#/components/schemas/BenefitDetailsUseOfAssetType"
          },
          "class1AType": {
            "$ref": "#/components/schemas/BenefitDetailsClass1AType"
          },
          "nonClass1AType": {
            "$ref": "#/components/schemas/BenefitDetailsNonClass1AType"
          },
          "paymentType": {
            "$ref": "#/components/schemas/BenefitDetailsPaymentType"
          },
          "tradingOrganisation": {
            "type": "boolean",
            "description": "Only relevant to Benefits with Type Entertainment"
          },
          "cashEquivalentFuel": {
            "type": "number",
            "description": "Only relevant to Benefits with Type Vans",
            "format": "double"
          },
          "loan": {
            "$ref": "#/components/schemas/BenefitDetailsLoan"
          },
          "car": {
            "$ref": "#/components/schemas/BenefitDetailsCar"
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Used to represent Benefits and Expenses"
      },
      "BenefitDeclarationType": {
        "enum": [
          "P11D",
          "Paye"
        ],
        "type": "string"
      },
      "BenefitDetailsAssetType": {
        "enum": [
          "Other",
          "Multiple",
          "Property",
          "Cars",
          "PreciousMetals"
        ],
        "type": "string"
      },
      "BenefitDetailsCar": {
        "type": "object",
        "properties": {
          "makeAndModel": {
            "type": "string",
            "nullable": true
          },
          "registration": {
            "type": "string",
            "nullable": true
          },
          "firstRegistered": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "hasApprovedEmissionsValue": {
            "type": "boolean"
          },
          "co2Emissions": {
            "type": "integer",
            "format": "int32"
          },
          "engineSize": {
            "type": "integer",
            "format": "int32"
          },
          "zeroEmissionsMileage": {
            "type": "integer",
            "format": "int32"
          },
          "fuelType": {
            "$ref": "#/components/schemas/BenefitDetailsCarPowerType"
          },
          "availableFrom": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "availableTo": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "daysUnavailable": {
            "type": "integer",
            "format": "int32"
          },
          "listPrice": {
            "type": "number",
            "format": "double"
          },
          "nonStandardAccessories": {
            "type": "number",
            "format": "double"
          },
          "employeeCapitalContributions": {
            "type": "number",
            "format": "double"
          },
          "employeePrivateContributions": {
            "type": "number",
            "format": "double"
          },
          "freeFuel": {
            "type": "boolean"
          },
          "fuelAvailableFrom": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "fuelAvailableTo": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "freeFuelReinstated": {
            "type": "boolean"
          },
          "registeredPriorTo1998": {
            "type": "boolean",
            "description": "[readonly]",
            "readOnly": true
          },
          "rate": {
            "type": "number",
            "description": "[readonly] The applicable rate based on CO2Emissions and Engine Size",
            "format": "double"
          },
          "chargeableValue": {
            "type": "number",
            "description": "[readonly] The chargeable value of the car",
            "format": "double",
            "readOnly": true
          },
          "fullYearCharge": {
            "type": "number",
            "description": "[readonly] The charge for the car for a full year, not taking in to account available dates or EmployeePrivateContributions",
            "format": "double",
            "readOnly": true
          },
          "cashEquivalent": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "cashEquivalentFuel": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "BenefitDetailsCarPowerType": {
        "enum": [
          "Diesel6d",
          "DieselNon6d",
          "Petrol",
          "Hybrid",
          "Electric"
        ],
        "type": "string"
      },
      "BenefitDetailsClass1AType": {
        "enum": [
          "Other",
          "Multiple",
          "StopLossCharges",
          "NonQualifyingRelocationBenefit",
          "EducationalAssitance",
          "SubscriptionsAndFees"
        ],
        "type": "string"
      },
      "BenefitDetailsLoan": {
        "type": "object",
        "properties": {
          "numberOfJointBorrowers": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "loanMade": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "loanDischarged": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "startingBalance": {
            "type": "number",
            "format": "double"
          },
          "closingBalance": {
            "type": "number",
            "format": "double"
          },
          "maxBalanceInYear": {
            "type": "number",
            "format": "double"
          },
          "interestPaid": {
            "type": "number",
            "format": "double"
          },
          "cashEquivalent": {
            "type": "number",
            "description": "[readonly]",
            "format": "double",
            "readOnly": true
          },
          "fullTaxMonths": {
            "type": "integer",
            "description": "[readonly]",
            "format": "int32"
          },
          "monthlyValue": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "officialInterest": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "BenefitDetailsNonClass1AType": {
        "enum": [
          "Other",
          "Multiple",
          "LoansWrittenOrWaived",
          "NurseryPlaces",
          "EducationalAssitance",
          "SubscriptionsAndFees"
        ],
        "type": "string"
      },
      "BenefitDetailsPaymentType": {
        "enum": [
          "Other",
          "SeasonTickets",
          "PrivateCarExpenses",
          "PrivateEducation",
          "AccountancyFees",
          "DomesticBills",
          "Multiple"
        ],
        "type": "string"
      },
      "BenefitDetailsUseOfAssetType": {
        "enum": [
          "Other",
          "Multiple",
          "CorporateHospitality",
          "Boat",
          "Aircraft",
          "TimeshareAccommodation",
          "HolidayAccommodation"
        ],
        "type": "string"
      },
      "BenefitType": {
        "enum": [
          "AssetsTransferred",
          "PaymentsOnBehalf",
          "UnborneTax",
          "Vouchers",
          "Accommodation",
          "MileageAllowance",
          "Car",
          "Vans",
          "Loan",
          "Medical",
          "QualifyingRelocationExpenses",
          "Services",
          "AssetsAtEmployeeDisposal",
          "OtherClass1AItems",
          "OtherNonClass1AItems",
          "DirectorTax",
          "TravellingAndSubsistence",
          "Entertainment",
          "HomeTelephone",
          "NonQualifyingRelocationExpenses",
          "OtherExpenses"
        ],
        "type": "string"
      },
      "BureauSettings": {
        "type": "object",
        "properties": {
          "enableApprovals": {
            "type": "boolean",
            "description": "Whether or not Payruns for this employer need to go through an Approval process"
          },
          "processorUserId": {
            "type": "string",
            "description": "The Id of the user, if any, that is the allocated Processor",
            "format": "uuid",
            "nullable": true
          },
          "reportPackId": {
            "type": "string",
            "description": "The Id of the ReportPack, if any, to present to the Payroll Client",
            "format": "uuid",
            "nullable": true
          },
          "isBacsClient": {
            "type": "boolean",
            "description": "Indicates that the bureau is responsible for BACS payments of net wages to employees"
          },
          "isBacsClientForHmrc": {
            "type": "boolean",
            "description": "Indicates that the bureau is responsible for BACS payments of HMRC liabilites"
          },
          "showContactCard": {
            "type": "boolean",
            "description": "Show a Contact card with the Processors details  on the PayrollClient dashboard"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the BureauSettings for an Employer."
      },
      "CalendarEntry": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "start": {
            "type": "string",
            "format": "date"
          },
          "end": {
            "type": "string",
            "format": "date"
          },
          "type": {
            "$ref": "#/components/schemas/CalendarEntryType"
          }
        },
        "additionalProperties": false
      },
      "CalendarEntryType": {
        "enum": [
          "EmployeeStarting",
          "EmployeeLeaving",
          "EmployeeAbsence",
          "PayDay",
          "EmployeeBirthday",
          "EmployeeWorkAnniversary"
        ],
        "type": "string"
      },
      "CarCharge": {
        "type": "object",
        "properties": {
          "dieselSurcharge": {
            "type": "number",
            "format": "double"
          },
          "maxCharge": {
            "type": "number",
            "format": "double"
          },
          "minCharge": {
            "type": "number",
            "format": "double"
          },
          "fuelCharge": {
            "type": "number",
            "format": "double"
          },
          "newCarRateReductionDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "newCarRateReductionAmount": {
            "type": "number",
            "format": "double"
          },
          "co2Table": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CarChargeRate"
            },
            "nullable": true
          },
          "engineSizeTable": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CarChargeRate"
            },
            "nullable": true
          },
          "zeroEmissionsTable": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CarChargeRate"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Part of the TaxYearConfig that our engine uses to calculate charges for a Company Car.\r\nIt is used internally when our engine performs calculations.\r\nYou do not need to do anything with this model, it's provided purely for informational purposes."
      },
      "CarChargeRate": {
        "type": "object",
        "properties": {
          "rangeStart": {
            "type": "integer",
            "format": "int32"
          },
          "rangeStop": {
            "type": "integer",
            "format": "int32"
          },
          "rate": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Part of the TaxYearConfig that our engine uses to calculate charges for a Company Car.\r\nIt is used internally when our engine performs calculations.\r\nYou do not need to do anything with this model, it's provided purely for informational purposes."
      },
      "ChangeSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "auditId": {
            "type": "string",
            "format": "uuid"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "actionPerformed": {
            "$ref": "#/components/schemas/AuditEventAction"
          },
          "entityType": {
            "$ref": "#/components/schemas/EntityType"
          },
          "entityId": {
            "type": "string",
            "description": "Id of the underlying entity",
            "format": "uuid"
          },
          "employeeUniqueId": {
            "type": "string",
            "description": "Unique id of the employee this operation belongs to",
            "format": "uuid"
          },
          "actionPerformedBy": {
            "type": "string",
            "nullable": true
          },
          "actionPerformedOn": {
            "type": "string",
            "nullable": true
          },
          "uniqueId": {
            "type": "string",
            "description": "Unique id of the owner this request belongs to",
            "format": "uuid"
          },
          "parentEventType": {
            "type": "string",
            "nullable": true
          },
          "modifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldModification"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Cis300": {
        "type": "object",
        "properties": {
          "taxMonth": {
            "type": "integer",
            "format": "int32"
          },
          "employeeCount": {
            "type": "integer",
            "format": "int32"
          },
          "employmentStatusDeclaration": {
            "type": "boolean"
          },
          "verificationDeclaration": {
            "type": "boolean"
          },
          "informationCorrectDeclaration": {
            "type": "boolean"
          },
          "inactivityDeclaration": {
            "type": "boolean"
          },
          "cisReturn": {
            "$ref": "#/components/schemas/CisReturn"
          },
          "iRmark": {
            "type": "string",
            "nullable": true
          },
          "xml": {
            "type": "string",
            "nullable": true
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "employerReferences": {
            "$ref": "#/components/schemas/EmpRefs"
          },
          "govTalkSubmission": {
            "$ref": "#/components/schemas/GovTalkSubmission"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Cis300Declarations": {
        "type": "object",
        "properties": {
          "employmentStatus": {
            "type": "string",
            "nullable": true
          },
          "verification": {
            "type": "string",
            "nullable": true
          },
          "informationCorrect": {
            "type": "string",
            "nullable": true
          },
          "inactivity": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Cis300ReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/Cis300"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "CisContractor": {
        "type": "object",
        "properties": {
          "utr": {
            "type": "string",
            "nullable": true
          },
          "aOref": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to represent details of a CIS SubContractor when communicating with the HMRC Gateway"
      },
      "CisDetails": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CISSubContractorType"
          },
          "utr": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "tradingName": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "companyUtr": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "companyNumber": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "vatRegistered": {
            "type": "boolean"
          },
          "vatNumber": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "vatRate": {
            "type": "number",
            "format": "double"
          },
          "reverseChargeVAT": {
            "type": "boolean"
          },
          "verification": {
            "$ref": "#/components/schemas/CisVerificationDetails"
          }
        },
        "additionalProperties": false,
        "description": "If an Employee is marked as a CIS Subcontractor then this model provides further details specifically related to the CIS details of the Employee."
      },
      "CisPartnership": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "utr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "If an Employee is marked as a CIS Subcontractor and is registered as a Partnership then this model provides further details specifically related to the CIS Partnership."
      },
      "CisRequest": {
        "type": "object",
        "properties": {
          "contractor": {
            "$ref": "#/components/schemas/CisContractor"
          },
          "subcontractor": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CisSubContractor"
            },
            "nullable": true
          },
          "declaration": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CisReturn": {
        "type": "object",
        "properties": {
          "contractor": {
            "$ref": "#/components/schemas/CisContractor"
          },
          "subcontractor": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CisSubContractor"
            },
            "nullable": true
          },
          "nilReturn": {
            "type": "string",
            "nullable": true
          },
          "declarations": {
            "$ref": "#/components/schemas/Cis300Declarations"
          }
        },
        "additionalProperties": false
      },
      "CisStatement": {
        "type": "object",
        "properties": {
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "taxMonth": {
            "type": "integer",
            "description": "[readonly]",
            "format": "int32"
          },
          "contractorName": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "contractorAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "contractorOfficeNumber": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "contractorPayeReference": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "subcontractorName": {
            "$ref": "#/components/schemas/RtiEmployeeName"
          },
          "subContractorUtr": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "verificationNumber": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "grossAmountPaid": {
            "type": "number",
            "description": "[readonly] Gross Amount Paid (Excl VAT)",
            "format": "double"
          },
          "costOfMaterials": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "amountLiableToDeduction": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "amountDeducted": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "amountPayable": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "CIS Payment and Deduction Statement (CISOL1)"
      },
      "CisStatementListReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CisStatement"
            },
            "description": "[readonly] If the type is application.json then this will contain a JSON representation of the relevant model",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "CisSubContractor": {
        "type": "object",
        "properties": {
          "employeeUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "emailStatementTo": {
            "type": "string",
            "nullable": true
          },
          "numberOfPayments": {
            "type": "integer",
            "format": "int32"
          },
          "item": {
            "$ref": "#/components/schemas/Item"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "action": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "$ref": "#/components/schemas/RtiEmployeeName"
          },
          "tradingName": {
            "type": "string",
            "nullable": true
          },
          "worksRef": {
            "type": "string",
            "nullable": true
          },
          "unmatchedRate": {
            "type": "string",
            "nullable": true
          },
          "utr": {
            "type": "string",
            "nullable": true
          },
          "crn": {
            "type": "string",
            "nullable": true
          },
          "nino": {
            "type": "string",
            "nullable": true
          },
          "partnership": {
            "$ref": "#/components/schemas/CisPartnership"
          },
          "address": {
            "$ref": "#/components/schemas/RtiEmployeeAddress"
          },
          "telephone": {
            "type": "string",
            "nullable": true
          },
          "totalPaymentsUnrounded": {
            "type": "string",
            "nullable": true
          },
          "costOfMaterialsUnrounded": {
            "type": "string",
            "nullable": true
          },
          "umbrellaFee": {
            "type": "string",
            "nullable": true
          },
          "validationMsg": {
            "type": "string",
            "nullable": true
          },
          "verificationNumber": {
            "type": "string",
            "nullable": true
          },
          "totalPayments": {
            "type": "string",
            "nullable": true
          },
          "costOfMaterials": {
            "type": "string",
            "nullable": true
          },
          "totalDeducted": {
            "type": "string",
            "nullable": true
          },
          "matched": {
            "type": "string",
            "nullable": true
          },
          "taxTreatment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CisSubContractorSummary": {
        "type": "object",
        "properties": {
          "payrollCode": {
            "type": "string",
            "nullable": true
          },
          "tradingName": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "niNumber": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/CISSubContractorType"
          },
          "utr": {
            "type": "string",
            "nullable": true
          },
          "taxStatus": {
            "$ref": "#/components/schemas/CISTaxStatus"
          },
          "verificationNumber": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "validationMessage": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "CisSubContractorSummaryListReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CisSubContractorSummary"
            },
            "description": "[readonly] If the type is application.json then this will contain a JSON representation of the relevant model",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "CISSubContractorType": {
        "enum": [
          "SoleTrader",
          "Partnership",
          "Company",
          "Trust"
        ],
        "type": "string"
      },
      "CISTaxStatus": {
        "enum": [
          "Gross",
          "NetOfStandardDeduction",
          "NetOfHigherDeduction"
        ],
        "type": "string"
      },
      "CisVerification": {
        "type": "object",
        "properties": {
          "employees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "nullable": true
          },
          "employeeCount": {
            "type": "integer",
            "format": "int32"
          },
          "cisRequest": {
            "$ref": "#/components/schemas/CisRequest"
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CisSubContractor"
            },
            "nullable": true
          },
          "iRmark": {
            "type": "string",
            "nullable": true
          },
          "xml": {
            "type": "string",
            "nullable": true
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "employerReferences": {
            "$ref": "#/components/schemas/EmpRefs"
          },
          "govTalkSubmission": {
            "$ref": "#/components/schemas/GovTalkSubmission"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "If an Employee is marked as a CIS Subcontractor then this model is included ad a child of CisDetails and is used to represent the Verification details of the Subcontractor"
      },
      "CisVerificationDetails": {
        "type": "object",
        "properties": {
          "manuallyEntered": {
            "type": "boolean"
          },
          "matchInsteadOfVerify": {
            "type": "boolean"
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "taxStatus": {
            "$ref": "#/components/schemas/CISTaxStatus"
          },
          "verificationRequest": {
            "type": "string",
            "description": "[readonly] If a Verification request has been made for this employee then this will show its ID",
            "format": "uuid",
            "nullable": true
          },
          "verificationResponse": {
            "$ref": "#/components/schemas/CisSubContractor"
          }
        },
        "additionalProperties": false
      },
      "CookiePreference": {
        "type": "object",
        "properties": {
          "gainsight": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CostAnalysisReport": {
        "type": "object",
        "properties": {
          "singlePayrun": {
            "$ref": "#/components/schemas/PayRun"
          },
          "totalPay": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "pension": {
            "type": "number",
            "format": "double"
          },
          "aeoFees": {
            "type": "number",
            "format": "double"
          },
          "totalCost": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "employerNic": {
            "type": "number",
            "format": "double"
          },
          "netPayrollCost": {
            "type": "number",
            "format": "double"
          },
          "maleCount": {
            "type": "integer",
            "format": "int32"
          },
          "femaleCount": {
            "type": "integer",
            "format": "int32"
          },
          "leaverCount": {
            "type": "integer",
            "format": "int32"
          },
          "joinerCount": {
            "type": "integer",
            "format": "int32"
          },
          "paymentAfterLeavingCount": {
            "type": "integer",
            "format": "int32"
          },
          "recoverableAmounts": {
            "$ref": "#/components/schemas/RecoverableAmounts"
          },
          "employer": {
            "$ref": "#/components/schemas/Item"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "periodTo": {
            "type": "integer",
            "format": "int32"
          },
          "startPeriodName": {
            "type": "string",
            "nullable": true
          },
          "endPeriodName": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false
      },
      "CostAnalysisReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/CostAnalysisReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "CostBreakdown": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "The value of cost",
            "format": "double",
            "readOnly": true
          },
          "breakdown": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "description": "Breakdown of the cost",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the breakdown of a PayRun cost.\r\nThe Value if calculated using the breakdown of the cost."
      },
      "CostOfEmploymentReport": {
        "type": "object",
        "properties": {
          "payrunCount": {
            "type": "integer",
            "format": "int32"
          },
          "hasDepartments": {
            "type": "boolean"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CostOfEmploymentReportLine"
            },
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Item"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "periodTo": {
            "type": "integer",
            "format": "int32"
          },
          "startPeriodName": {
            "type": "string",
            "nullable": true
          },
          "endPeriodName": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false
      },
      "CostOfEmploymentReportLine": {
        "type": "object",
        "properties": {
          "pay": {
            "type": "number",
            "format": "double"
          },
          "employerNic": {
            "type": "number",
            "format": "double"
          },
          "pension": {
            "type": "number",
            "format": "double"
          },
          "aeoFees": {
            "type": "number",
            "format": "double"
          },
          "statPayReclaim": {
            "type": "number",
            "format": "double"
          },
          "totalCost": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "payrollCode": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CostOfEmploymentReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/CostOfEmploymentReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "Country": {
        "enum": [
          "England",
          "NorthernIreland",
          "Scotland",
          "Wales",
          "OutsideUk",
          "Uk"
        ],
        "type": "string"
      },
      "CsvFileFormat": {
        "enum": [
          "MoneysoftEmployees",
          "BrightPayEmployees",
          "Fps",
          "SageEmployeeDetails",
          "AccessPeoplePlanner",
          "EmployeeCsv"
        ],
        "type": "string"
      },
      "DeferalPeriodType": {
        "enum": [
          "Days",
          "Weeks",
          "Months",
          "PayPeriods"
        ],
        "type": "string"
      },
      "Department": {
        "required": [
          "code",
          "title"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "The unique code for this Department"
          },
          "title": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of this Department"
          },
          "color": {
            "maxLength": 6,
            "type": "string",
            "description": "A color to used to represent this Department, in hex format. ie 'ff0000'",
            "nullable": true
          },
          "employeeCount": {
            "type": "integer",
            "description": "[readonly] The number of employees with this set as their primary department",
            "format": "int32"
          },
          "accountingCode": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DepartmentMembership": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "minLength": 1,
            "type": "string",
            "description": "The Code for the Department"
          },
          "color": {
            "type": "string",
            "description": "[readonly] The Color for the Department",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "[readonly] The Title for the Department",
            "nullable": true
          },
          "primary": {
            "type": "boolean",
            "description": "Set to true if this is the primary Department for the Employee.\r\nOnly one department can be set as the primary."
          },
          "weighting": {
            "type": "number",
            "description": "If there is more than one Department Membership for the Employee then this determines the weighting to give to this membership.\r\nie, if he is in two departments you might set the primary as 0.8 and the secondary as 0.2;",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Used to represent an Employees membership of a Department"
      },
      "DirectDebitMandate": {
        "type": "object",
        "properties": {
          "isCompleted": {
            "type": "boolean"
          },
          "mandateLink": {
            "type": "string",
            "nullable": true
          },
          "customerLink": {
            "type": "string",
            "nullable": true
          },
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "accountNumberEnding": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DirectorshipDetails": {
        "type": "object",
        "properties": {
          "isDirector": {
            "type": "boolean"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "leaveDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "niAlternativeMethod": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DpsDataType": {
        "enum": [
          "P6",
          "P9",
          "SL1",
          "SL2",
          "PGL1",
          "PGL2",
          "AR",
          "NOT",
          "RTI",
          "CIS"
        ],
        "type": "string"
      },
      "DpsNotice": {
        "type": "object",
        "properties": {
          "issueDate": {
            "type": "string",
            "format": "date"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date"
          },
          "taxYear": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "sequenceNumber": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/DpsDataType"
          },
          "formType": {
            "type": "string",
            "nullable": true
          },
          "forename": {
            "type": "string",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "nullable": true
          },
          "niNo": {
            "type": "string",
            "nullable": true
          },
          "worksNumber": {
            "type": "string",
            "nullable": true
          },
          "taxCode": {
            "type": "string",
            "nullable": true
          },
          "week1Month1": {
            "type": "boolean",
            "nullable": true
          },
          "previousTax": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "previousPay": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "planType": {
            "$ref": "#/components/schemas/StudentLoan"
          },
          "appliedOn": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DpsSettings": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "If enabled, we'll automatically retrieve DPS notices from HMRC for you"
          },
          "retrieveFrom": {
            "type": "string",
            "description": "The date from which notices should be retrieved",
            "format": "date"
          },
          "autoApply": {
            "type": "boolean",
            "description": "If enabled, we'll automatically apply DPSNotices before starting a payrun that covers the EffectiveDate"
          },
          "lastChecked": {
            "type": "string",
            "description": "[readonly] The time we last checked for notices",
            "format": "date",
            "nullable": true
          },
          "error": {
            "type": "string",
            "description": "[readonly] If we received an error from HMRC when checking for notices, it'll be displayed here",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This model is used to set an employers settings for HMRCs Data Provisioning Service"
      },
      "EmailAttachment": {
        "required": [
          "filename",
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "pdfPasswordType": {
            "$ref": "#/components/schemas/PdfPasswordType"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Employee": {
        "type": "object",
        "properties": {
          "hasPension": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          },
          "personalDetails": {
            "$ref": "#/components/schemas/PersonalDetails"
          },
          "employmentDetails": {
            "$ref": "#/components/schemas/EmploymentDetails"
          },
          "autoEnrolment": {
            "$ref": "#/components/schemas/AutoEnrolment"
          },
          "leaveSettings": {
            "$ref": "#/components/schemas/LeaveSettings"
          },
          "rightToWork": {
            "$ref": "#/components/schemas/RightToWork"
          },
          "bankDetails": {
            "$ref": "#/components/schemas/BankDetails"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "payOptions": {
            "$ref": "#/components/schemas/PayOptions"
          },
          "status": {
            "$ref": "#/components/schemas/EmployeeStatus"
          },
          "aeNotEnroledWarning": {
            "type": "boolean",
            "description": "[readonly] If true then the employee should be enrolled in an Auto Enrolment Qualifying pension but isn't",
            "readOnly": true
          },
          "sourceSystemId": {
            "maxLength": 50,
            "type": "string",
            "description": "[readonly] Can only be given a value when the employee is created. It can then never be changed.\r\nUsed by external systems so they can store an immutable reference",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeBenefitsReport": {
        "type": "object",
        "properties": {
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false
      },
      "EmployeeBenefitsReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/EmployeeBenefitsReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "EmployeeStatus": {
        "enum": [
          "Current",
          "Former",
          "Upcoming"
        ],
        "type": "string",
        "description": "[readonly] Indicates whether the Employee is currently employed or not"
      },
      "EmployeeYtdValues": {
        "type": "object",
        "properties": {
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "payrollCode": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/YtdValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Employer": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 200,
            "type": "string"
          },
          "crn": {
            "maxLength": 25,
            "type": "string",
            "description": "Company Registration Number",
            "nullable": true
          },
          "logoUrl": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "alternativeId": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          },
          "bankPaymentsCsvFormat": {
            "$ref": "#/components/schemas/BankPaymentInstructionsCsvFormat"
          },
          "bacsServiceUserNumber": {
            "maxLength": 6,
            "type": "string",
            "nullable": true
          },
          "bacsBureauNumber": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "rejectInvalidBankDetails": {
            "type": "boolean"
          },
          "bankPaymentsReferenceFormat": {
            "maxLength": 120,
            "type": "string",
            "nullable": true
          },
          "useTenantRtiSubmissionSettings": {
            "type": "boolean",
            "description": "If the Tenant for this employer has Bureau Features enabled then they can set RtiSubmissionSettings to be used across multiple employers.\r\nIf this is set to true then those settings will be used instead of any set at the Employer level"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "bankDetails": {
            "$ref": "#/components/schemas/BankDetails"
          },
          "defaultPayOptions": {
            "$ref": "#/components/schemas/PayOptions"
          },
          "hmrcDetails": {
            "$ref": "#/components/schemas/HmrcDetails"
          },
          "defaultPension": {
            "$ref": "#/components/schemas/PensionSelection"
          },
          "rtiSubmissionSettings": {
            "$ref": "#/components/schemas/RtiSubmissionSettings"
          },
          "autoEnrolmentSettings": {
            "$ref": "#/components/schemas/AutoEnrolmentSettings"
          },
          "leaveSettings": {
            "$ref": "#/components/schemas/LeaveSettings"
          },
          "settings": {
            "$ref": "#/components/schemas/EmployerSettings"
          },
          "umbrellaSettings": {
            "$ref": "#/components/schemas/UmbrellaSettings"
          },
          "employeeCount": {
            "type": "integer",
            "description": "[readonly] The number of Employees this Employer has, including CIS Subcontractors.",
            "format": "int32"
          },
          "subcontractorCount": {
            "type": "integer",
            "description": "[readonly] The number of CIS Subcontractors this Employer has.",
            "format": "int32"
          },
          "startYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "currentYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "supportAccessEnabled": {
            "type": "boolean",
            "description": "If set to true then the support team can access this employer to help resolve\r\nsupport queries"
          },
          "archived": {
            "type": "boolean",
            "description": "A flag to indicate whather or not the employer is Archived, ie no longer actively used"
          },
          "canUseBureauFeatures": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          },
          "sourceSystemId": {
            "maxLength": 50,
            "type": "string",
            "description": "[readonly] Can only be given a value when the employer is created. It can then never be changed.\r\nUsed by external systems so they can store an immutable reference",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployerDefaults": {
        "type": "object",
        "properties": {
          "employer": {
            "$ref": "#/components/schemas/EmployerItem"
          },
          "payCodes": {
            "type": "boolean",
            "description": "If true then PayCodes will be copied from the specified Employer"
          },
          "csvMappings": {
            "type": "boolean",
            "description": "If true then CSV Mappings will be copied from the specified Employer"
          },
          "departments": {
            "type": "boolean",
            "description": "If true then Departments will be copied from the specified Employer"
          },
          "rti": {
            "type": "boolean",
            "description": "If true then RTI Settings will be copied from the specified Employer"
          },
          "users": {
            "type": "boolean",
            "description": "If true then Users will be copied from the specified Employer"
          },
          "hmrcNoticeSettings": {
            "type": "boolean",
            "description": "If true then HMRC Notice Settings will be copied from the specified Employer"
          },
          "payOptions": {
            "type": "boolean",
            "description": "If true then Default Pay Options will be copied from the specified Employer."
          }
        },
        "additionalProperties": false,
        "description": "When a user creates a new Employer, certain settings can be copied from an existing employer.\r\nThis model determines which employer (if any) settings should be copied from and what should be copied."
      },
      "EmployerEmail": {
        "required": [
          "subject",
          "toEmail",
          "toName"
        ],
        "type": "object",
        "properties": {
          "_statusMessage": {
            "type": "string",
            "nullable": true
          },
          "toName": {
            "maxLength": 150,
            "type": "string"
          },
          "toEmail": {
            "maxLength": 150,
            "type": "string"
          },
          "subject": {
            "maxLength": 150,
            "type": "string"
          },
          "buttonText": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "buttonLink": {
            "maxLength": 250,
            "type": "string",
            "nullable": true
          },
          "bodyPreview": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "afterBtnBody": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "statusDate": {
            "type": "string",
            "format": "date-time"
          },
          "statusMessage": {
            "type": "string",
            "nullable": true
          },
          "sendAttempts": {
            "type": "integer",
            "format": "int32"
          },
          "webAppBaseUrl": {
            "type": "string",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailAttachment"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EmployerGroup": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "The unique code for this EmployerGroup"
          },
          "employerCount": {
            "type": "integer",
            "format": "int32"
          },
          "color": {
            "maxLength": 6,
            "type": "string",
            "description": "A color to used to represent this EmployerGroup, in hex format. ie 'ff0000'",
            "nullable": true
          },
          "name": {
            "maxLength": 150,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EmployerGroupMembership": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "minLength": 1,
            "type": "string",
            "description": "The Code for the EmployerGroup"
          },
          "color": {
            "type": "string",
            "description": "[readonly] The Color for the EmployerGroup",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "[readonly] The Title for the EmployerGroup",
            "nullable": true
          },
          "primary": {
            "type": "boolean",
            "description": "Set to true if this is the primary EmployerGroup for the Employer.\r\nOnly one EmployerGroup can be set as the primary."
          }
        },
        "additionalProperties": false,
        "description": "Used to represent an Employers membership of a EmployerGroup"
      },
      "EmployerItem": {
        "type": "object",
        "properties": {
          "isOwner": {
            "type": "boolean"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployerOpeningBalances": {
        "type": "object",
        "properties": {
          "smpRecovered": {
            "type": "number",
            "description": "Value of Statutory Maternity Pay recovered year to date",
            "format": "double"
          },
          "sppRecovered": {
            "type": "number",
            "description": "Value of Statutory Paternity Pay recovered year to date",
            "format": "double"
          },
          "sapRecovered": {
            "type": "number",
            "description": "Value of Statutory Adoption Pay recovered year to date",
            "format": "double"
          },
          "shPPRecovered": {
            "type": "number",
            "description": "Value of Shared Parental Pay recovered year to date",
            "format": "double"
          },
          "spbpRecovered": {
            "type": "number",
            "description": "Value of Statutory Parental Bereavment Pay recovered year to date",
            "format": "double"
          },
          "nicCompensationOnSMP": {
            "type": "number",
            "description": "Value of NIC compensation on SMP year to date",
            "format": "double"
          },
          "nicCompensationOnSPP": {
            "type": "number",
            "description": "Value of NIC compensation on Statutory Paternity Pay year to date",
            "format": "double"
          },
          "nicCompensationOnSAP": {
            "type": "number",
            "description": "Value of NIC compensation on Statutory Adoption Pay year to date",
            "format": "double"
          },
          "nicCompensationOnShPP": {
            "type": "number",
            "description": "Value of NIC compensation on Shared Parental Pay year to date",
            "format": "double"
          },
          "nicCompensationOnSPBP": {
            "type": "number",
            "description": "Value of NIC compensation on Statutory Parental Bereavement Pay year to date",
            "format": "double"
          },
          "cisDeductionsSuffered": {
            "type": "number",
            "description": "Value of CIS deductions suffered year to date",
            "format": "double"
          },
          "apprenticeshipLevy": {
            "type": "number",
            "description": "Value of Apprenticeship levy paid year to date",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "EmployerSettings": {
        "type": "object",
        "properties": {
          "allowNegativePay": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Miscellaneous settings related to the employer that don't naturally belong in other models"
      },
      "EmployerTemplate": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EmployerTemplateType"
          },
          "description": {
            "type": "string",
            "description": "Explains the purpose of this template",
            "nullable": true
          },
          "isCustom": {
            "type": "boolean",
            "description": "Indicates whether or not this template has been changed from the default content.",
            "readOnly": true
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "subject": {
            "maxLength": 250,
            "type": "string",
            "nullable": true
          },
          "defaultContent": {
            "type": "string",
            "description": "[readonly] The default content for this template",
            "nullable": true
          },
          "defaultSubject": {
            "type": "string",
            "description": "[readonly] The default subject for this template",
            "nullable": true
          },
          "hasSubject": {
            "type": "boolean",
            "description": "[readonly] If false then the Subject property is not relevant for this template type"
          },
          "tokens": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "[readonly] A list of tokens that can be used with this template.\r\nFor example, if 'Employee.FirstName' is in the list then use '{Employee.FirstName}' in the Content or Subject and\r\nit'll be replaced with the relevant value when the template is parsed.",
            "nullable": true
          },
          "tokensExpanded": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EmployerTemplateType": {
        "enum": [
          "PayslipEmail",
          "AutoEnrolment_Enrolled",
          "AutoEnrolment_Enrolled_NetPay",
          "AutoEnrolment_NotEnrolled",
          "AutoEnrolment_Insert",
          "CisStatementEmail",
          "PayrunSummary",
          "PayslipsUnemailed",
          "PayrunAutoEmail",
          "P60Email",
          "AnnualCisStatementEmail",
          "P45Email",
          "AutoEnrolment_Postponed",
          "AutoEnrolment_ReEnrolled"
        ],
        "type": "string"
      },
      "EmploymentDetails": {
        "required": [
          "payrollCode"
        ],
        "type": "object",
        "properties": {
          "cisSubContractor": {
            "type": "boolean",
            "description": "Set to True if this Employee is a CIS Subcontractor. The <code>Cis</code> property contains further information"
          },
          "payrollCode": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "The Employees Payroll Code. Must be unique within the Employer."
          },
          "jobTitle": {
            "maxLength": 120,
            "type": "string",
            "description": "Job Title of Primary post of the Employee",
            "nullable": true
          },
          "onHold": {
            "type": "boolean",
            "description": "Set to true to temporarily exclude the employee from payruns"
          },
          "onFurlough": {
            "type": "boolean",
            "description": "Set to true if the employee is on furlough."
          },
          "furloughStart": {
            "type": "string",
            "description": "Furlough Start Date.",
            "format": "date",
            "nullable": true
          },
          "furloughEnd": {
            "type": "string",
            "description": "Furlough End Date.",
            "format": "date",
            "nullable": true
          },
          "furloughCalculationBasis": {
            "$ref": "#/components/schemas/FurloughCalculationBasis"
          },
          "furloughCalculationBasisAmount": {
            "type": "number",
            "format": "double"
          },
          "partialFurlough": {
            "type": "boolean",
            "description": "Set to true if the employee is partially furloughed."
          },
          "furloughHoursNormallyWorked": {
            "type": "number",
            "format": "double"
          },
          "furloughHoursOnFurlough": {
            "type": "number",
            "format": "double"
          },
          "isApprentice": {
            "type": "boolean",
            "description": "Set to True if this Employee is an apprentice. This affects the calculations for National Minimum Wage"
          },
          "apprenticeshipStartDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "apprenticeshipEndDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "workingPattern": {
            "type": "string",
            "description": "Used when calculating payments for Leave.\r\nIf null then the default Working Pattern is used",
            "format": "uuid",
            "nullable": true
          },
          "forcePreviousPayrollCode": {
            "maxLength": 20,
            "type": "string",
            "description": "If this property has a non-empty value then a change of Payroll code will be declared on the next FPS.",
            "nullable": true
          },
          "starterDetails": {
            "$ref": "#/components/schemas/StarterDetails"
          },
          "directorshipDetails": {
            "$ref": "#/components/schemas/DirectorshipDetails"
          },
          "leaverDetails": {
            "$ref": "#/components/schemas/LeaverDetails"
          },
          "cis": {
            "$ref": "#/components/schemas/CisDetails"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "posts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "List of Posts held by Employee",
            "nullable": true
          },
          "isWorkingInFreePort": {
            "type": "boolean",
            "description": "Flag indicating the employee is employed in a Freeport"
          },
          "veteranDetails": {
            "$ref": "#/components/schemas/VeteranDetails"
          }
        },
        "additionalProperties": false
      },
      "EmpRefs": {
        "type": "object",
        "properties": {
          "officeNo": {
            "type": "string",
            "nullable": true
          },
          "payeRef": {
            "type": "string",
            "nullable": true
          },
          "aoRef": {
            "type": "string",
            "nullable": true
          },
          "econ": {
            "type": "string",
            "nullable": true
          },
          "cotaxRef": {
            "type": "string",
            "nullable": true
          },
          "sautr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EntityType": {
        "enum": [
          "None",
          "Employer",
          "Employee",
          "PayRunEntry",
          "PensionScheme",
          "PayCode",
          "Note",
          "Leave",
          "Benefits",
          "Pension",
          "AttachmentOrder",
          "OpeningBalances",
          "NicSummary",
          "HmrcPayment",
          "DpsNotice",
          "User",
          "Settings",
          "PayRun",
          "Loan"
        ],
        "type": "string",
        "description": "[readonly] Specifies the entity for which audit logs need to retrieved"
      },
      "Eps": {
        "type": "object",
        "properties": {
          "periodOfInactivity": {
            "$ref": "#/components/schemas/FromToDates"
          },
          "noPaymentForPeriod": {
            "$ref": "#/components/schemas/FromToDates"
          },
          "finalSubmission": {
            "$ref": "#/components/schemas/EpsFinalSubmission"
          },
          "recoverableAmounts": {
            "$ref": "#/components/schemas/RecoverableAmounts"
          },
          "apprenticeshipLevy": {
            "$ref": "#/components/schemas/EpsApprenticeshipLevy"
          },
          "account": {
            "$ref": "#/components/schemas/EpsAccount"
          },
          "eligibleForEmploymentAllowance": {
            "type": "boolean",
            "nullable": true
          },
          "deMinimisStateAid": {
            "$ref": "#/components/schemas/EpsDeMinimisStateAid"
          },
          "iRmark": {
            "type": "string",
            "nullable": true
          },
          "xml": {
            "type": "string",
            "nullable": true
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "employerReferences": {
            "$ref": "#/components/schemas/EmpRefs"
          },
          "govTalkSubmission": {
            "$ref": "#/components/schemas/GovTalkSubmission"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EpsAccount": {
        "type": "object",
        "properties": {
          "accountHoldersName": {
            "type": "string",
            "nullable": true
          },
          "accountNo": {
            "type": "string",
            "nullable": true
          },
          "sortCode": {
            "type": "string",
            "nullable": true
          },
          "buildingSocRef": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used on an EPS to send bank account information"
      },
      "EpsApprenticeshipLevy": {
        "type": "object",
        "properties": {
          "taxMonth": {
            "type": "integer",
            "format": "int32"
          },
          "levyDueYTD": {
            "type": "number",
            "format": "double"
          },
          "annualAllce": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Used on an EPS to declare an Apprenticeship Levy amount"
      },
      "EpsDeMinimisStateAid": {
        "type": "object",
        "properties": {
          "agri": {
            "type": "boolean"
          },
          "fisheriesAqua": {
            "type": "boolean"
          },
          "roadTrans": {
            "type": "boolean"
          },
          "indust": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Used on an EPS to declare an Employment Allowance DeMinimis State Aid information"
      },
      "EpsFinalSubmission": {
        "type": "object",
        "properties": {
          "isFinalSubmission": {
            "type": "boolean"
          },
          "becauseSchemeCeased": {
            "type": "boolean"
          },
          "dateCeased": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used on an EPS to declare a Final Submission"
      },
      "Exb": {
        "type": "object",
        "properties": {
          "additionsAmount": {
            "type": "number",
            "format": "double"
          },
          "additionsDescription": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          },
          "deductionsAmount": {
            "type": "number",
            "format": "double"
          },
          "deductionsDescription": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          },
          "employeeCount": {
            "type": "integer",
            "description": "[readonly] The number of employees with a P11D",
            "format": "int32"
          },
          "totalBenefits": {
            "type": "number",
            "description": "[readonly] Total value of benefits, not including any deductions or additions",
            "format": "double"
          },
          "totalAdjustedBenefits": {
            "type": "number",
            "description": "[readonly] Total value of benefits",
            "format": "double",
            "readOnly": true
          },
          "nicsRate": {
            "type": "number",
            "description": "[readonly] The Class 1A NICS Rate",
            "format": "double"
          },
          "nicsPayable": {
            "type": "number",
            "description": "[readonly] NICs Payable",
            "format": "double",
            "readOnly": true
          },
          "expensesAndBenefits": {
            "$ref": "#/components/schemas/ExpensesAndBenefits"
          },
          "iRmark": {
            "type": "string",
            "nullable": true
          },
          "xml": {
            "type": "string",
            "nullable": true
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "employerReferences": {
            "$ref": "#/components/schemas/EmpRefs"
          },
          "govTalkSubmission": {
            "$ref": "#/components/schemas/GovTalkSubmission"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ExbDeclarations": {
        "type": "object",
        "properties": {
          "p11Dincluded": {
            "type": "string",
            "nullable": true
          },
          "p46CarDeclaration": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExbEmployer": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExbP11d": {
        "type": "object",
        "properties": {
          "employee": {
            "$ref": "#/components/schemas/ExbP11dEmployee"
          },
          "transferred": {
            "$ref": "#/components/schemas/P11DAssetTransferredCollection"
          },
          "payments": {
            "$ref": "#/components/schemas/P11DPaymentCollection"
          },
          "vouchersOrCCs": {
            "$ref": "#/components/schemas/P11DSingleItem"
          },
          "livingAccom": {
            "$ref": "#/components/schemas/P11DSingleItem"
          },
          "mileageAllow": {
            "$ref": "#/components/schemas/P11DSingleItem"
          },
          "cars": {
            "$ref": "#/components/schemas/P11DCarCollection"
          },
          "vans": {
            "$ref": "#/components/schemas/P11dVans"
          },
          "loans": {
            "$ref": "#/components/schemas/P11DLoanCollection"
          },
          "medical": {
            "$ref": "#/components/schemas/P11DSingleItem"
          },
          "relocation": {
            "$ref": "#/components/schemas/P11DSingleItem"
          },
          "services": {
            "$ref": "#/components/schemas/P11DSingleItem"
          },
          "assetsAvail": {
            "$ref": "#/components/schemas/P11DAssetAvailableCollection"
          },
          "other": {
            "$ref": "#/components/schemas/P11DOther"
          },
          "expPaid": {
            "$ref": "#/components/schemas/P11dExpenses"
          }
        },
        "additionalProperties": false
      },
      "ExbP11db": {
        "type": "object",
        "properties": {
          "class1AcontributionsDue": {
            "$ref": "#/components/schemas/ExbP11dbClass1A"
          }
        },
        "additionalProperties": false
      },
      "ExbP11dbClass1A": {
        "type": "object",
        "properties": {
          "niCsRate": {
            "type": "string",
            "nullable": true
          },
          "totalBenefit": {
            "$ref": "#/components/schemas/ExbP11dbClass1ATotalBenefit"
          },
          "adjustments": {
            "$ref": "#/components/schemas/ExbP11dbClass1AAdjustments"
          },
          "niCpayable": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExbP11dbClass1AAdjustment": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "adjustment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExbP11dbClass1AAdjustments": {
        "type": "object",
        "properties": {
          "totalBenefit": {
            "type": "string",
            "nullable": true
          },
          "amountDue": {
            "$ref": "#/components/schemas/ExbP11dbClass1AAdjustment"
          },
          "amountNotDue": {
            "$ref": "#/components/schemas/ExbP11dbClass1AAdjustment"
          },
          "total": {
            "type": "string",
            "nullable": true
          },
          "payable": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExbP11dbClass1ATotalBenefit": {
        "type": "object",
        "properties": {
          "adjustmentRequired": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExbP11dEmployee": {
        "type": "object",
        "properties": {
          "employeeUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "dirInd": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "$ref": "#/components/schemas/RtiEmployeeName"
          },
          "wksNo": {
            "type": "string",
            "nullable": true
          },
          "nino": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExbReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/Exb"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "ExpensesAndBenefits": {
        "type": "object",
        "properties": {
          "employer": {
            "$ref": "#/components/schemas/ExbEmployer"
          },
          "declarations": {
            "$ref": "#/components/schemas/ExbDeclarations"
          },
          "p11Db": {
            "$ref": "#/components/schemas/ExbP11db"
          },
          "p11DrecordCount": {
            "type": "integer",
            "format": "int32"
          },
          "p46CarRecordCount": {
            "type": "integer",
            "format": "int32"
          },
          "p11D": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExbP11d"
            },
            "nullable": true
          },
          "relatedTaxYear": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalDataCompany": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "schemeName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "When we retrieve data from an ExternalDataProvider we normalise it so that regardless of the provider the models are the same.\r\nThis model is used to represent a Company in an ExternalDataProvider"
      },
      "ExternalDataProvider": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "id": {
            "$ref": "#/components/schemas/ExternalDataProviderId"
          },
          "authScheme": {
            "$ref": "#/components/schemas/AuthScheme"
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "iconUrl": {
            "type": "string",
            "nullable": true
          },
          "connected": {
            "type": "boolean"
          },
          "connectedAs": {
            "type": "string",
            "nullable": true
          },
          "requiresConfig": {
            "type": "boolean"
          },
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalDataProviderType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalDataProviderId": {
        "enum": [
          "SmartPension_Employer",
          "SmartPension_Adviser",
          "PeoplesPension",
          "Xero",
          "Qbo",
          "Sage",
          "Nest",
          "Cashplus",
          "BreatheHr",
          "KashFlow",
          "Reckon",
          "FreeAgent",
          "FreeAgentPm",
          "Modulr",
          "Square",
          "Cezanne",
          "Ciphr",
          "Telleroo",
          "WeWorked",
          "RotaCloud",
          "Quinyx",
          "Csod",
          "Planday",
          "Starling",
          "Deputy",
          "Bottomline",
          "Twinfield",
          "MyePayWindow",
          "IFinance",
          "AccountsIQ"
        ],
        "type": "string"
      },
      "ExternalDataProviderType": {
        "enum": [
          "PensionSchemes",
          "Accounting",
          "Payments",
          "Hr",
          "TimeAndAttendance",
          "EmployeePortal"
        ],
        "type": "string"
      },
      "ExternalEmployeeMapping": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "[readonly] The id for the employee in the external system",
            "nullable": true
          },
          "providerId": {
            "$ref": "#/components/schemas/ExternalDataProviderId"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalEmployeeMappingStatus"
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "externalEmployee": {
            "$ref": "#/components/schemas/Employee"
          },
          "lastSyncDate": {
            "type": "string",
            "description": "[readonly] The date and time this mapping was last synchronised",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to represent details of an employee from an ExternalDataProvider, along with mapping information to an employee in the payroll system"
      },
      "ExternalEmployeeMappingStatus": {
        "enum": [
          "Unmapped",
          "Mapped",
          "Ignored",
          "Import"
        ],
        "type": "string"
      },
      "ExternalProviderConversation": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "request": {
            "type": "string",
            "nullable": true
          },
          "response": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "statusMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This model is used to provide details of a data exchange with an ExternalDataProvider"
      },
      "FieldModification": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string",
            "nullable": true
          },
          "isSignificant": {
            "type": "boolean"
          },
          "oldValue": {
            "type": "string",
            "nullable": true
          },
          "newValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FixedCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "rate": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Part of the TaxYearConfig that our engine uses to enable calculation of Tax and NI.\r\nIt is used internally when our engine performs calculations.\r\nYou do not need to do anything with this model, it's provided purely for informational purposes."
      },
      "Fps": {
        "type": "object",
        "properties": {
          "lateReason": {
            "$ref": "#/components/schemas/FpsLateReason"
          },
          "paymentDate": {
            "type": "string",
            "format": "date"
          },
          "employeeCount": {
            "type": "integer",
            "format": "int32"
          },
          "isCorrection": {
            "type": "boolean"
          },
          "fullPaymentSubmission": {
            "$ref": "#/components/schemas/FullPaymentSubmission"
          },
          "validationWarnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RtiValidationWarning"
            },
            "nullable": true,
            "readOnly": true
          },
          "iRmark": {
            "type": "string",
            "nullable": true
          },
          "xml": {
            "type": "string",
            "nullable": true
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "employerReferences": {
            "$ref": "#/components/schemas/EmpRefs"
          },
          "govTalkSubmission": {
            "$ref": "#/components/schemas/GovTalkSubmission"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "FpsBenefit": {
        "type": "object",
        "properties": {
          "car": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FpsCar"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FpsCar": {
        "type": "object",
        "properties": {
          "make": {
            "type": "string",
            "nullable": true
          },
          "firstRegd": {
            "type": "string",
            "nullable": true
          },
          "cO2": {
            "type": "string",
            "nullable": true
          },
          "zeroEmissionsMileage": {
            "type": "string",
            "nullable": true
          },
          "fuel": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "amendment": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "string",
            "nullable": true
          },
          "availFrom": {
            "type": "string",
            "nullable": true
          },
          "cashEquiv": {
            "type": "string",
            "nullable": true
          },
          "availTo": {
            "type": "string",
            "nullable": true
          },
          "freeFuel": {
            "$ref": "#/components/schemas/FpsCarFuel"
          }
        },
        "additionalProperties": false
      },
      "FpsCarFuel": {
        "type": "object",
        "properties": {
          "provided": {
            "type": "string",
            "nullable": true
          },
          "cashEquiv": {
            "type": "string",
            "nullable": true
          },
          "withdrawn": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FpsEmployee": {
        "type": "object",
        "properties": {
          "employeeUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "item": {
            "$ref": "#/components/schemas/Item"
          },
          "employeeDetails": {
            "$ref": "#/components/schemas/FpsEmployeeDetails"
          },
          "employment": {
            "$ref": "#/components/schemas/FpsEmployment"
          },
          "validationWarnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RtiValidationWarning"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "FpsEmployeeDetails": {
        "type": "object",
        "properties": {
          "nino": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "$ref": "#/components/schemas/RtiEmployeeName"
          },
          "address": {
            "$ref": "#/components/schemas/RtiEmployeeAddress"
          },
          "birthDate": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "passportNumber": {
            "type": "string",
            "nullable": true
          },
          "partnerDetails": {
            "$ref": "#/components/schemas/FpsEmployeeDetailsPartnerDetails"
          }
        },
        "additionalProperties": false
      },
      "FpsEmployeeDetailsPartnerDetails": {
        "type": "object",
        "properties": {
          "nino": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "$ref": "#/components/schemas/RtiEmployeeName"
          }
        },
        "additionalProperties": false
      },
      "FpsEmployeeFigsToDate": {
        "type": "object",
        "properties": {
          "taxablePay": {
            "type": "string",
            "nullable": true
          },
          "totalTax": {
            "type": "string",
            "nullable": true
          },
          "studentLoansTD": {
            "type": "string",
            "nullable": true
          },
          "postgradLoansTD": {
            "type": "string",
            "nullable": true
          },
          "benefitsTaxedViaPayrollYTD": {
            "type": "string",
            "nullable": true
          },
          "empeePenContribnsPaidYTD": {
            "type": "string",
            "nullable": true
          },
          "empeePenContribnsNotPaidYTD": {
            "type": "string",
            "nullable": true
          },
          "smpytd": {
            "type": "string",
            "nullable": true
          },
          "sppytd": {
            "type": "string",
            "nullable": true
          },
          "sapytd": {
            "type": "string",
            "nullable": true
          },
          "shppytd": {
            "type": "string",
            "nullable": true
          },
          "spbpytd": {
            "type": "string",
            "nullable": true
          },
          "sspytd": {
            "type": "string",
            "nullable": true
          },
          "gross": {
            "type": "string",
            "nullable": true
          },
          "netPay": {
            "type": "string",
            "nullable": true
          },
          "additions": {
            "type": "string",
            "nullable": true
          },
          "deductions": {
            "type": "string",
            "nullable": true
          },
          "takeHomePay": {
            "type": "string",
            "nullable": true
          },
          "adjustments": {
            "type": "string",
            "nullable": true
          },
          "mapsMiles": {
            "type": "string",
            "nullable": true
          },
          "pensionableEarnings": {
            "type": "string",
            "nullable": true
          },
          "pensionablePay": {
            "type": "string",
            "nullable": true
          },
          "employerPensionContribution": {
            "type": "string",
            "nullable": true
          },
          "employeePensionContribution": {
            "type": "string",
            "nullable": true
          },
          "employeePensionContributionAvc": {
            "type": "string",
            "nullable": true
          },
          "paymentAfterLeaving": {
            "type": "string",
            "nullable": true
          },
          "taxOnPaymentAfterLeaving": {
            "type": "string",
            "nullable": true
          },
          "taxablePayPreviousEmployment": {
            "type": "string",
            "nullable": true
          },
          "totalTaxPreviousEmployment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FpsEmployeeFlexibleDrawdown": {
        "type": "object",
        "properties": {
          "flexiblyAccessingPensionRights": {
            "type": "string",
            "nullable": true
          },
          "pensionDeathBenefit": {
            "type": "string",
            "nullable": true
          },
          "taxablePayment": {
            "type": "string",
            "nullable": true
          },
          "nontaxablePayment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FpsEmployeeNIlettersAndValues": {
        "type": "object",
        "properties": {
          "nIletter": {
            "type": "string",
            "nullable": true
          },
          "grossEarningsForNICsInPd": {
            "type": "string",
            "nullable": true
          },
          "grossEarningsForNICsYTD": {
            "type": "string",
            "nullable": true
          },
          "atLELYTD": {
            "type": "string",
            "nullable": true
          },
          "leLtoPTYTD": {
            "type": "string",
            "nullable": true
          },
          "pTtoUELYTD": {
            "type": "string",
            "nullable": true
          },
          "totalEmpNICInPd": {
            "type": "string",
            "nullable": true
          },
          "totalEmpNICYTD": {
            "type": "string",
            "nullable": true
          },
          "empeeContribnsInPd": {
            "type": "string",
            "nullable": true
          },
          "empeeContribnsYTD": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FpsEmployeePayment": {
        "type": "object",
        "properties": {
          "bacsHashCode": {
            "type": "string",
            "nullable": true
          },
          "payFreq": {
            "type": "string",
            "nullable": true
          },
          "pmtDate": {
            "type": "string",
            "nullable": true
          },
          "lateReason": {
            "type": "string",
            "nullable": true
          },
          "weekNo": {
            "type": "string",
            "nullable": true
          },
          "monthNo": {
            "type": "string",
            "nullable": true
          },
          "periodsCovered": {
            "type": "integer",
            "format": "int32"
          },
          "aggregatedEarnings": {
            "type": "string",
            "nullable": true
          },
          "pmtAfterLeaving": {
            "type": "string",
            "nullable": true
          },
          "hoursWorked": {
            "type": "string",
            "nullable": true
          },
          "taxCode": {
            "$ref": "#/components/schemas/FpsEmployeeTaxCode"
          },
          "taxablePay": {
            "type": "string",
            "nullable": true
          },
          "nonTaxOrNICPmt": {
            "type": "string",
            "nullable": true
          },
          "dednsFromNetPay": {
            "type": "string",
            "nullable": true
          },
          "payAfterStatDedns": {
            "type": "string",
            "nullable": true
          },
          "benefitsTaxedViaPayroll": {
            "type": "string",
            "nullable": true
          },
          "class1ANICsYTD": {
            "type": "string",
            "nullable": true
          },
          "benefits": {
            "$ref": "#/components/schemas/FpsBenefit"
          },
          "empeePenContribnsPaid": {
            "type": "string",
            "nullable": true
          },
          "itemsSubjectToClass1NIC": {
            "type": "string",
            "nullable": true
          },
          "empeePenContribnsNotPaid": {
            "type": "string",
            "nullable": true
          },
          "studentLoanRecovered": {
            "$ref": "#/components/schemas/StudentLoanRecovered"
          },
          "postgradLoanRecovered": {
            "type": "string",
            "nullable": true
          },
          "taxDeductedOrRefunded": {
            "type": "string",
            "nullable": true
          },
          "onStrike": {
            "type": "string",
            "nullable": true
          },
          "unpaidAbsence": {
            "type": "string",
            "nullable": true
          },
          "smpytd": {
            "type": "string",
            "nullable": true
          },
          "sppytd": {
            "type": "string",
            "nullable": true
          },
          "sapytd": {
            "type": "string",
            "nullable": true
          },
          "shPPYTD": {
            "type": "string",
            "nullable": true
          },
          "spbpytd": {
            "type": "string",
            "nullable": true
          },
          "trivialCommutationPayment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FpsEmployeeTrivialCommutationPayment"
            },
            "nullable": true
          },
          "flexibleDrawdown": {
            "$ref": "#/components/schemas/FpsEmployeeFlexibleDrawdown"
          }
        },
        "additionalProperties": false
      },
      "FpsEmployeeStarter": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "nullable": true
          },
          "startDec": {
            "type": "string",
            "nullable": true
          },
          "studentLoan": {
            "type": "string",
            "nullable": true
          },
          "postgradLoan": {
            "type": "string",
            "nullable": true
          },
          "occPension": {
            "$ref": "#/components/schemas/FpsEmployeeStarterOccPension"
          }
        },
        "additionalProperties": false
      },
      "FpsEmployeeStarterOccPension": {
        "type": "object",
        "properties": {
          "bereaved": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FpsEmployeeTaxCode": {
        "type": "object",
        "properties": {
          "basisNonCumulative": {
            "type": "string",
            "nullable": true
          },
          "taxRegime": {
            "type": "string",
            "nullable": true
          },
          "taxCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FpsEmployeeTrivialCommutationPayment": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FpsEmployerPayIdChanged": {
        "type": "object",
        "properties": {
          "payrollIdChangedIndicator": {
            "type": "string",
            "nullable": true
          },
          "oldPayrollId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FpsEmployment": {
        "type": "object",
        "properties": {
          "employeeCurrentNiLetter": {
            "type": "string",
            "nullable": true
          },
          "offPayrollWorker": {
            "type": "string",
            "nullable": true
          },
          "occPenInd": {
            "type": "string",
            "nullable": true
          },
          "directorsNIC": {
            "type": "string",
            "nullable": true
          },
          "taxWkOfApptOfDirector": {
            "type": "string",
            "nullable": true
          },
          "starter": {
            "$ref": "#/components/schemas/FpsEmployeeStarter"
          },
          "payId": {
            "type": "string",
            "nullable": true
          },
          "payIdChgd": {
            "$ref": "#/components/schemas/FpsEmployerPayIdChanged"
          },
          "paymentToANonIndividual": {
            "type": "string",
            "nullable": true
          },
          "irrEmp": {
            "type": "string",
            "nullable": true
          },
          "leavingDate": {
            "type": "string",
            "nullable": true
          },
          "figuresToDate": {
            "$ref": "#/components/schemas/FpsEmployeeFigsToDate"
          },
          "payment": {
            "$ref": "#/components/schemas/FpsEmployeePayment"
          },
          "nIlettersAndValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FpsEmployeeNIlettersAndValues"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FpsFields": {
        "type": "object",
        "properties": {
          "offPayrollWorker": {
            "type": "boolean"
          },
          "irregularPaymentPattern": {
            "type": "boolean",
            "description": "True if employee is currently on an irregular payment patter"
          },
          "nonIndividual": {
            "type": "boolean",
            "description": "True if Employee's payments are being made to a body (eg, trustee, corporate organisation or personal representative)"
          },
          "hoursNormallyWorked": {
            "$ref": "#/components/schemas/HoursNormallyWorked"
          }
        },
        "additionalProperties": false
      },
      "FpsLateReason": {
        "enum": [
          "NoneGiven",
          "NotionalExpat",
          "NotionalErs",
          "NotionalOther",
          "Class1",
          "MicroEmployer",
          "NoRequirement",
          "ReasonableExcuse",
          "Correction"
        ],
        "type": "string"
      },
      "FpsReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/Fps"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "FromToDates": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date"
          },
          "to": {
            "type": "string",
            "format": "date"
          }
        },
        "additionalProperties": false
      },
      "FullPaymentSubmission": {
        "type": "object",
        "properties": {
          "employee": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FpsEmployee"
            },
            "nullable": true
          },
          "relatedTaxYear": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FullSummaryOfPayReport": {
        "type": "object",
        "properties": {
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FullSummaryOfPayReportLine"
            },
            "nullable": true
          },
          "deductionLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FullSummaryOfPayReportLine"
            },
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Item"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "periodTo": {
            "type": "integer",
            "format": "int32"
          },
          "startPeriodName": {
            "type": "string",
            "nullable": true
          },
          "endPeriodName": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false
      },
      "FullSummaryOfPayReportLine": {
        "type": "object",
        "properties": {
          "payCode": {
            "$ref": "#/components/schemas/PayCode"
          },
          "value": {
            "type": "number",
            "format": "double"
          },
          "erValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "qty": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "headCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FullSummaryOfPayReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/FullSummaryOfPayReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "FurloughCalculationBasis": {
        "enum": [
          "ActualPaidAmount",
          "DailyReferenceAmount",
          "MonthlyReferenceAmount"
        ],
        "type": "string"
      },
      "FurloughReport": {
        "type": "object",
        "properties": {
          "maxClaimPerEmployee": {
            "type": "number",
            "format": "double"
          },
          "percentageOfNIAndPensionToClaim": {
            "type": "number",
            "format": "double"
          },
          "govtContribRate": {
            "type": "number",
            "format": "double"
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "employerReference": {
            "type": "string",
            "nullable": true
          },
          "companyCrn": {
            "type": "string",
            "nullable": true
          },
          "ctUtr": {
            "type": "string",
            "nullable": true
          },
          "saUtr": {
            "type": "string",
            "nullable": true
          },
          "claimPeriodStartDate": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "claimPeriodEndDate": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "numberOfEmployeesBeingFurloughed": {
            "type": "integer",
            "format": "int32"
          },
          "totalClaimAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalGrossPay": {
            "type": "number",
            "format": "double"
          },
          "amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod": {
            "type": "number",
            "format": "double"
          },
          "amountClaimedForEmployerNICsContributionsForFurloughedEmployees": {
            "type": "number",
            "format": "double"
          },
          "amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees": {
            "type": "number",
            "format": "double"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FurloughReportLine"
            },
            "nullable": true
          },
          "bankAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "bankSortCode": {
            "type": "string",
            "nullable": true
          },
          "bankAccountHoldersFirstName": {
            "type": "string",
            "nullable": true
          },
          "bankAccountHoldersLastName": {
            "type": "string",
            "nullable": true
          },
          "bankAccountHoldersAddress": {
            "type": "string",
            "nullable": true
          },
          "buildingSocietyRollNumber": {
            "type": "string",
            "nullable": true
          },
          "companyAddress": {
            "type": "string",
            "nullable": true
          },
          "contactName": {
            "type": "string",
            "nullable": true
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Item"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "periodTo": {
            "type": "integer",
            "format": "int32"
          },
          "startPeriodName": {
            "type": "string",
            "nullable": true
          },
          "endPeriodName": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false
      },
      "FurloughReportLine": {
        "type": "object",
        "properties": {
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "employeesFullName": {
            "type": "string",
            "nullable": true
          },
          "employeesNINO": {
            "type": "string",
            "nullable": true
          },
          "employeesPayrollReferenceNumber": {
            "type": "string",
            "nullable": true
          },
          "furloughedDays": {
            "type": "integer",
            "format": "int32"
          },
          "daysInPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "hoursNormallyWorked": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "hoursFurloughed": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "percentageOfFurloughedDaysWorked": {
            "type": "number",
            "format": "double"
          },
          "grossPay": {
            "type": "number",
            "format": "double"
          },
          "grossPayClaim": {
            "type": "number",
            "format": "double"
          },
          "niClaim": {
            "type": "number",
            "format": "double"
          },
          "pensionClaim": {
            "type": "number",
            "format": "double"
          },
          "totalClaim": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "furloughStart": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "furloughEnd": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FurloughReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/FurloughReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "Gender": {
        "enum": [
          "Male",
          "Female"
        ],
        "type": "string"
      },
      "GovTalk": {
        "type": "object",
        "properties": {
          "fullPaymentSubmissionNamespace": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "employerPaymentSummaryNamespace": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "niNoVerificationRequestNameSpace": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "cisVerificationRequestNameSpace": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "cis300NameSpace": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "expensesAndBenefitsNameSpace": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Part of the TaxYearConfig that our engine uses submit documents to the HMRC Gateway.\r\nIt is used internally when our engine communicates with HMRC.\r\nYou do not need to do anything with this model, it's provided purely for informational purposes."
      },
      "GovTalkError": {
        "type": "object",
        "properties": {
          "raisedBy": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GovTalkSubmission": {
        "type": "object",
        "properties": {
          "rawResponse": {
            "type": "string",
            "nullable": true
          },
          "messageClass": {
            "type": "string",
            "nullable": true
          },
          "pollInterval": {
            "type": "integer",
            "format": "int32"
          },
          "lastPoll": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "correlationId": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "url": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/SubmissionStatus"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "iRmark": {
            "type": "string",
            "nullable": true
          },
          "errorsJson": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GovTalkError"
            },
            "nullable": true
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GrossToNetReport": {
        "type": "object",
        "properties": {
          "forCis": {
            "type": "boolean"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrossToNetReportLine"
            },
            "nullable": true
          },
          "cisLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrossToNetReportCisLine"
            },
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Item"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "periodTo": {
            "type": "integer",
            "format": "int32"
          },
          "startPeriodName": {
            "type": "string",
            "nullable": true
          },
          "endPeriodName": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false
      },
      "GrossToNetReportCisLine": {
        "type": "object",
        "properties": {
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "payrollCode": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "totalGross": {
            "type": "number",
            "format": "double"
          },
          "labour": {
            "type": "number",
            "format": "double"
          },
          "materials": {
            "type": "number",
            "format": "double"
          },
          "taxableGross": {
            "type": "number",
            "format": "double"
          },
          "cisDeduction": {
            "type": "number",
            "format": "double"
          },
          "umbrellaFee": {
            "type": "number",
            "format": "double"
          },
          "vat": {
            "type": "number",
            "format": "double"
          },
          "payment": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "GrossToNetReportLine": {
        "type": "object",
        "properties": {
          "totalGross": {
            "type": "number",
            "format": "double"
          },
          "taxableGross": {
            "type": "number",
            "format": "double"
          },
          "netPay": {
            "type": "number",
            "format": "double"
          },
          "tax": {
            "type": "number",
            "format": "double"
          },
          "employeeNi": {
            "type": "number",
            "format": "double"
          },
          "employerNi": {
            "type": "number",
            "format": "double"
          },
          "employeePension": {
            "type": "number",
            "format": "double"
          },
          "employerPension": {
            "type": "number",
            "format": "double"
          },
          "studentOrPgLoan": {
            "type": "number",
            "format": "double"
          },
          "statutoryPayments": {
            "type": "number",
            "format": "double"
          },
          "attachments": {
            "type": "number",
            "format": "double"
          },
          "otherDeductions": {
            "type": "number",
            "format": "double"
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "payrollCode": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GrossToNetReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/GrossToNetReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "HmrcDetails": {
        "type": "object",
        "properties": {
          "officeNumber": {
            "maxLength": 3,
            "type": "string",
            "nullable": true
          },
          "payeReference": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "accountsOfficeReference": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "econ": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "utr": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "coTax": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "employmentAllowance": {
            "type": "boolean"
          },
          "employmentAllowanceMaxClaim": {
            "type": "number",
            "description": "You might reduce this from the default if you've made/are making a claim in another system",
            "format": "double"
          },
          "smallEmployersRelief": {
            "type": "boolean"
          },
          "apprenticeshipLevy": {
            "type": "boolean"
          },
          "apprenticeshipLevyAllowance": {
            "type": "number",
            "format": "double"
          },
          "quarterlyPaymentSchedule": {
            "type": "boolean",
            "description": "Set to true if the employer pays HMRC on a quarterly schedule.\r\nA value of false implies a monthly schedule.\r\n<b>Warning:</b> Changing this value after starting PayRuns will\r\ndelete any existing payments or adjustments you may have entered."
          },
          "includeEmploymentAllowanceOnMonthlyJournal": {
            "type": "boolean",
            "description": "If the employer is not on a QuarterlyPaymentSchedule\r\nand is claiming EmploymentAllowance, then set this to true to include a line for\r\nEmployment Allowance on the journal for the monthly schedule."
          },
          "carryForwardUnpaidLiabilities": {
            "type": "boolean",
            "description": "If set to true then any unpaid amounts from previous periods will be brought forward\r\nto work out the liability for the current period.\r\nYou'd set this to false if you don't want to track payments."
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "HmrcLiability": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "[readonly] A descriptive name for the Period",
            "nullable": true
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "periodEnding": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "periodComplete": {
            "type": "boolean",
            "description": "[readonly] Indicates whether or not all PayRuns for this period have been completed"
          },
          "recoverableAmountsEpsCreated": {
            "type": "boolean",
            "description": "[readonly] If there are recoverable amount present (ie, SMP) and the Period is complete then this field Indicates \r\nwhether or not an EPS has been created up to the final tax month of this period to declare\r\nthe recoverable amounts"
          },
          "apprenticeshipLevyEpsCreated": {
            "type": "boolean",
            "description": "[readonly] If there is an Apprenticeship LEvy amount present and the Period is complete then this field Indicates \r\nwhether or not an EPS has been created up to the final tax month of this period to declare\r\nthe amount"
          },
          "payRuns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayRun"
            },
            "nullable": true
          },
          "tax": {
            "type": "number",
            "description": "[readonly] Amount due to HMRC for PAYE in period",
            "format": "double"
          },
          "cisDeductions": {
            "type": "number",
            "description": "[readonly] Amount due to HMRC for CIS Deductions made in period",
            "format": "double"
          },
          "postgradLoanDeductions": {
            "type": "number",
            "description": "[readonly] Amount due to HMRC for Postgrad Loan Deductions made in period",
            "format": "double"
          },
          "studentLoanDeductions": {
            "type": "number",
            "description": "[readonly] Amount due to HMRC for Student Loan Deductions made in period",
            "format": "double"
          },
          "employeeNic": {
            "type": "number",
            "description": "[readonly] Amount due to HMRC for Employee NIC Contributions withheld in period",
            "format": "double"
          },
          "employerNic": {
            "type": "number",
            "description": "[readonly] Amount due to HMRC for Employer NIC Contributions due on payments in period",
            "format": "double"
          },
          "realTimeClass1ANic": {
            "type": "number",
            "description": "[readonly] Amount due to HMRC for Employer NIC Contributions due on payments in period",
            "format": "double"
          },
          "smp": {
            "type": "number",
            "description": "[readonly] SMP recovered from payments in period",
            "format": "double"
          },
          "smpNic": {
            "type": "number",
            "description": "[readonly] SMP NIC Compensation for period",
            "format": "double"
          },
          "spp": {
            "type": "number",
            "description": "[readonly] SPP recovered from payments in period",
            "format": "double"
          },
          "sppNic": {
            "type": "number",
            "description": "[readonly] SPP Nic Compensation for period",
            "format": "double"
          },
          "sap": {
            "type": "number",
            "description": "[readonly] SAP recovered from payments in period",
            "format": "double"
          },
          "sapNic": {
            "type": "number",
            "description": "[readonly] SAP Nic Compensation for period",
            "format": "double"
          },
          "shpp": {
            "type": "number",
            "description": "[readonly] ShPP recovered from payments in period",
            "format": "double"
          },
          "shppNic": {
            "type": "number",
            "description": "[readonly] ShPP Nic Compensation for period",
            "format": "double"
          },
          "spbp": {
            "type": "number",
            "description": "[readonly] SPBP recovered from payments in period",
            "format": "double"
          },
          "spbpNic": {
            "type": "number",
            "description": "[readonly] SPBP Nic Compensation for period",
            "format": "double"
          },
          "eligibleForEmploymentAllowance": {
            "type": "boolean",
            "description": "[readonly] Indicates whether the Employer settings say the Employer is eligible for Employment Allowance"
          },
          "employmentAllowanceClaim": {
            "type": "number",
            "description": "Amount to claim with respect to the Employment Allowance",
            "format": "double"
          },
          "employmentAllowanceClaimAuto": {
            "type": "boolean",
            "description": "If set to true, we'll automatically claim the maximum allowed.\r\nIf set to false then you can enter your own value.\r\nIf EligibleForEmploymentAllowance is false then the EmploymentAllowanceClaim will \r\nalways be overwritten with a zero value regardless of this property"
          },
          "liableForApprenticeshipLevy": {
            "type": "boolean",
            "description": "[readonly] Indicates whether the Employer settings say the Employer is liable for the Apprenticeship Levy"
          },
          "apprenticeshipLevy": {
            "type": "number",
            "description": "Amount due with respect to the Apprenticeship Levy",
            "format": "double"
          },
          "apprenticeshipLevyAuto": {
            "type": "boolean",
            "description": "If set to true, we'll automatically calculate your liability\r\nIf set to false then you can enter your own value.\r\nIf LiableForApprenticeshipLevy is false then the ApprenticeshipLevy will \r\nalways be overwritten with a zero value regardless of this property"
          },
          "liabilityArisingInPeriod": {
            "type": "number",
            "description": "[readonly] Total Liability (before any deductions) arising in this Period",
            "format": "double",
            "readOnly": true
          },
          "dueInPreviousPeriods": {
            "type": "number",
            "description": "[readonly] Amount due to HMRC in previous periods for this Tax Year",
            "format": "double"
          },
          "paidInPreviousPeriods": {
            "type": "number",
            "description": "[readonly] Amount paid to HMRC in previous periods for this Tax Year",
            "format": "double"
          },
          "employmentAllowanceClaimInPreviousPeriods": {
            "type": "number",
            "description": "[readonly] The amount of Employment Allowance claimed in previous periods for this Tax Year",
            "format": "double"
          },
          "receivedFromHMRCToRefundTax": {
            "type": "number",
            "description": "Any amount received from HMRC to refund Tax in Period",
            "format": "double"
          },
          "receivedFromHMRCToPayStatutoryPay": {
            "type": "number",
            "description": "Any amount received from HMRC to pay Statutory Pay Period",
            "format": "double"
          },
          "cisDeductionsSuffered": {
            "type": "number",
            "description": "CIS Deductions Suffered in Period",
            "format": "double"
          },
          "adjustment": {
            "type": "number",
            "description": "Any manual adjustment for Period",
            "format": "double"
          },
          "netLiabilityForPeriod": {
            "type": "number",
            "description": "[readonly] Net Liability (including any deductions/additions) arising in this Period",
            "format": "double",
            "readOnly": true
          },
          "totalPaid": {
            "type": "number",
            "description": "[readonly] The total value of all payments in this period",
            "format": "double"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HmrcPayment"
            },
            "nullable": true
          },
          "fpsList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "HmrcPayment": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "HolidayReport": {
        "type": "object",
        "properties": {
          "accrualsReport": {
            "type": "boolean"
          },
          "employer": {
            "$ref": "#/components/schemas/Item"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HolidayReportLine"
            },
            "nullable": true
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false
      },
      "HolidayReportLine": {
        "type": "object",
        "properties": {
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "payrollCode": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "dayRate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "leaveSettings": {
            "$ref": "#/components/schemas/LeaveSettings"
          }
        },
        "additionalProperties": false
      },
      "HolidayReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/HolidayReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "HolidayType": {
        "enum": [
          "Days",
          "Accrual_Money",
          "Accrual_Days"
        ],
        "type": "string"
      },
      "HourlyPayReport": {
        "type": "object",
        "properties": {
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HourlyPayReportLine"
            },
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Item"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "periodTo": {
            "type": "integer",
            "format": "int32"
          },
          "startPeriodName": {
            "type": "string",
            "nullable": true
          },
          "endPeriodName": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false
      },
      "HourlyPayReportLine": {
        "type": "object",
        "properties": {
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "payrollCode": {
            "type": "string",
            "nullable": true
          },
          "payCode": {
            "type": "string",
            "nullable": true
          },
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "hours": {
            "type": "number",
            "format": "double"
          },
          "rate": {
            "type": "number",
            "format": "double"
          },
          "total": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "HourlyPayReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/HourlyPayReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "HoursNormallyWorked": {
        "enum": [
          "LessThan16",
          "MoreThan16",
          "MoreThan24",
          "MoreThan30",
          "NotRegular"
        ],
        "type": "string"
      },
      "HtmlEmailSettings": {
        "type": "object",
        "properties": {
          "bodyCssStyle": {
            "type": "string",
            "nullable": true
          },
          "fontCssStyle": {
            "type": "string",
            "nullable": true
          },
          "buttonCssStyle": {
            "type": "string",
            "nullable": true
          },
          "headerHtml": {
            "type": "string",
            "nullable": true
          },
          "footerHtml": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HtmlInsertionPoint": {
        "enum": [
          "CreateEmployer",
          "EmployeeDetails"
        ],
        "type": "string"
      },
      "Invitation": {
        "required": [
          "emailAddress"
        ],
        "type": "object",
        "properties": {
          "employer": {
            "$ref": "#/components/schemas/Item"
          },
          "emailAddress": {
            "maxLength": 150,
            "type": "string",
            "description": "The email address of the user that is being invited to access the Employer",
            "format": "email"
          },
          "message": {
            "type": "string",
            "description": "An optional message to include in the email sent to the EmailAddress",
            "nullable": true
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "emailId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "emailStatus": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "invitedBy": {
            "$ref": "#/components/schemas/Item"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Invitations are used to invite other users to access an existing Employer"
      },
      "Item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ItemListReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "[readonly] If the type is application.json then this will contain a JSON representation of the relevant model",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "Leave": {
        "type": "object",
        "properties": {
          "providerId": {
            "$ref": "#/components/schemas/ExternalDataProviderId"
          },
          "externalId": {
            "maxLength": 100,
            "type": "string",
            "description": "If the Leave comes from an ExternalDataProvider, then this is its Id in the ExternalDataProvider",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/LeaveType"
          },
          "pay": {
            "$ref": "#/components/schemas/LeavePayType"
          },
          "from": {
            "type": "string",
            "description": "The first day of Leave.\r\nIf it's a half day PM then set the time portion to 12:00:00, otherwise leave it blank or set it to 00:00:00",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "The last day of Leave.\r\nIf it's a half day AM then set the time portion to 11:59:59, otherwise set it to 23:59:59",
            "format": "date-time"
          },
          "notes": {
            "maxLength": 300,
            "type": "string",
            "description": "A free-form text field to record any comments",
            "nullable": true
          },
          "averageWeeklyEarnings": {
            "type": "number",
            "description": "The employees average weekly earnings. Only relevant for Statutory Pay\r\nIt's advised that you don't try to calculate this yourself.",
            "format": "double"
          },
          "automaticAWECalculation": {
            "type": "boolean",
            "description": "If set to True then we'll automatically calculate the AverageWeeklyEarnings. \r\nSet it to false if you want to manually provide a figure that overrides our calculations"
          },
          "babyDate": {
            "type": "string",
            "description": "Only required for Parental Leave with Statutory Pay\r\nIf Type is Maternity or Paternity then this is the date the baby is due.\r\nFor Adoption this is the Matching Date.",
            "format": "date",
            "nullable": true
          },
          "secondaryBabyDate": {
            "type": "string",
            "description": "Only used for Parental Leave with Statutory Pay\r\nIf Type is Maternity, Paternity, SharedParental (Birth) then this is the the Baby Born Date.\r\nFor Adoption or SharedParental (Adoption) this is the Expected Placement Date.",
            "format": "date",
            "nullable": true
          },
          "tertiaryBabyDate": {
            "type": "string",
            "description": "Only used for Parental Leave with Statutory Pay\r\nIf Type is Adoption this is the Placement Date.",
            "format": "date",
            "nullable": true
          },
          "overridePaymentDescription": {
            "type": "boolean",
            "description": "If Pay is StatutoryPay and you want to override our description that goes with the payment then set this to true"
          },
          "overridenPaymentDescription": {
            "maxLength": 150,
            "type": "string",
            "description": "If OverridePaymentDescription is true and Pay is set to StatutoryPay then we'll use this as the description for the payment amount.",
            "nullable": true
          },
          "workingDays": {
            "type": "number",
            "description": "[readonly] The number of working days covered by this leave.\r\nThis is calculated based on the employees Working Pattern.",
            "format": "double"
          },
          "workingDaysOverride": {
            "type": "number",
            "description": "If a value is provided here then this will be used in place of the calculated WorkingDays value",
            "format": "double",
            "nullable": true
          },
          "totalDays": {
            "type": "number",
            "description": "[readonly] The number of days covered by this leave, regardless of whether or not they're working days.\r\nThis is calculated based on the employees Working Pattern.",
            "format": "double"
          },
          "totalDaysOverride": {
            "type": "number",
            "description": "If a value is provided here then this will be used in place of the calculated TotalDays value",
            "format": "double",
            "nullable": true
          },
          "useAssumedPensionablePay": {
            "type": "boolean",
            "description": "If this Leave has Statutory Pay (and isn't for Sick) then if this is set to True\r\nwe will use the value set in AssumedPensionablePay to work out the employer pension contributions"
          },
          "assumedPensionablePay": {
            "type": "number",
            "description": "if AssumedPensionablePay is True, then this is the value used to calculate the employer pension contributions",
            "format": "double",
            "nullable": true
          },
          "offsetPay": {
            "type": "boolean",
            "description": "If this Leave has Statutory Pay  and this is set to True and the employe eis paid a fixed amoutn per period\r\nwith Leave Adjustments set to automatic, then we'll reduce their pay for the period by the statutory amount\r\nso the employee still gets paid the full amount."
          },
          "sspPayFromDayOne": {
            "type": "boolean",
            "description": "If this is Sick Leave with Statutory Pay then setting this to true\r\nwill force SSP to be paid from day one rather than the usual rule \r\nof the first Working Day after 3 Qualifying Days"
          },
          "linkedPiw": {
            "$ref": "#/components/schemas/LinkedPiw"
          },
          "kitSplitDays": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "description": "If the LeaveType supports KIT/SPLIT days then use this property to store the list of dates",
            "nullable": true
          },
          "documentCount": {
            "type": "integer",
            "description": "[readonly] The number of attachments associated with this model",
            "format": "int32"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "[readonly] The attachments associated with this model",
            "nullable": true
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Used to represent Leave, including Holiday and Statutory leave (such as Maternity Leave)"
      },
      "LeavePayType": {
        "enum": [
          "DoNotPay",
          "PayAsUsual",
          "StatutoryPay"
        ],
        "type": "string"
      },
      "LeaverDetails": {
        "type": "object",
        "properties": {
          "hasLeft": {
            "type": "boolean"
          },
          "leaveDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "isDeceased": {
            "type": "boolean"
          },
          "paymentAfterLeaving": {
            "type": "boolean"
          },
          "p45Sent": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LeaveSettings": {
        "type": "object",
        "properties": {
          "useDefaultHolidayType": {
            "type": "boolean",
            "description": "If true then the value for HolidayType comes from the Employer record.\r\nThis property only appears if the LeaveSettings is a child of an Employee (not of an Employer)"
          },
          "useDefaultAllowanceResetDate": {
            "type": "boolean",
            "description": "If true then the value for the AllowanceResetDate comes from the Employer record.\r\nThis property only appears if the LeaveSettings is a child of an Employee (not of an Employer)"
          },
          "useDefaultAllowance": {
            "type": "boolean",
            "description": "If true then the value for the Allowance comes from the Employer record.\r\nThis property only appears if the LeaveSettings if a child of an Employee (not of an Employer)"
          },
          "useDefaultAccruePaymentInLieu": {
            "type": "boolean",
            "description": "If true then the value for AccruePaymentInLieu comes from the Employer record.\r\nThis property only appears if the LeaveSettings is a child of an Employee (not of an Employer)"
          },
          "useDefaultAccruePaymentInLieuRate": {
            "type": "boolean",
            "description": "If true then the value for AccruePaymentInLieuRate comes from the Employer record.\r\nThis property only appears if the LeaveSettings is a child of an Employee (not of an Employer)"
          },
          "useDefaultAccruePaymentInLieuAllGrossPay": {
            "type": "boolean",
            "description": "If true then the value for AccruePaymentInLieuAllGrossPay comes from the Employer record.\r\nThis property only appears if the LeaveSettings is a child of an Employee (not of an Employer)"
          },
          "useDefaultAccruePaymentInLieuPayAutomatically": {
            "type": "boolean",
            "description": "If true then the value for AccruePaymentInLieu comes from the Employer record.\r\nThis property only appears if the LeaveSettings is a child of an Employee (not of an Employer)"
          },
          "useDefaultAccrueHoursPerDay": {
            "type": "boolean",
            "description": "If true then the value for AccrueHoursPerDay comes from the Employer record.\r\nThis property only appears if the LeaveSettings is a child of an Employee (not of an Employer)"
          },
          "allowanceResetDate": {
            "type": "string",
            "description": "The date that the holiday allowance resets. Only the day/month part of the value is relevant.",
            "format": "date"
          },
          "allowance": {
            "type": "number",
            "description": "The number of days holiday an employee can take per year if HolidayType is Days.\r\nOtherwise this is readonly and gives you the number of days accrued since the last reset",
            "format": "double"
          },
          "adjustment": {
            "type": "number",
            "description": "Adjustment to number of hours/days/weeks holiday this employee can take per year.\r\nWill reset to 0 when the Allowance resets.\r\nThis property only appears if the LeaveSettings is a child of an Employee (not of an Employer)",
            "format": "double",
            "nullable": true
          },
          "allowanceUsed": {
            "type": "number",
            "description": "[readonly] The number of days used from the allowance since last reset",
            "format": "double"
          },
          "allowanceUsedPreviousPeriod": {
            "type": "number",
            "description": "[readonly] The number of days used in the 12 months prior to the last reset",
            "format": "double"
          },
          "allowanceRemaining": {
            "type": "number",
            "description": "[readonly] The number of days remaining of the allowance until next reset",
            "format": "double",
            "readOnly": true
          },
          "holidayType": {
            "$ref": "#/components/schemas/HolidayType"
          },
          "accrueSetAmount": {
            "type": "boolean",
            "description": "If true and HolidayType is Accrual_Days then the AccruePaymentInLieuRate will be treated as the set amount to accrue per period worked."
          },
          "accrueHoursPerDay": {
            "type": "number",
            "description": "If HolidayType is Accrual_Days then this value is used to help convert hours worked into days accrued",
            "format": "double"
          },
          "showAllowanceOnPayslip": {
            "type": "boolean",
            "description": "If true then the remaining Allowance will be shown on the employees payslip."
          },
          "showAhpOnPayslip": {
            "type": "boolean",
            "description": "If true then the AHP balance will be shown on the employees payslip."
          },
          "accruePaymentInLieuRate": {
            "type": "number",
            "description": "The rate at which Payments in Lieu acrrue. Typically this should be 12.07%.",
            "format": "double"
          },
          "accruePaymentInLieuAllGrossPay": {
            "type": "boolean",
            "description": "Set to true if you want accrued holiday payments to be calculated on the total gross pay for the employee or just on the single regular pay element"
          },
          "accruePaymentInLieuPayAutomatically": {
            "type": "boolean",
            "description": "Set to true if you want employees to be automatically paid any outstanding holiday pay"
          },
          "accruedPaymentLiability": {
            "type": "number",
            "description": "[readonly] The total accrued payments for this employee over the lifetime of their employment so far",
            "format": "double"
          },
          "accruedPaymentAdjustment": {
            "type": "number",
            "description": "Any manual adjustment to the total accrued",
            "format": "double"
          },
          "accruedPaymentPaid": {
            "type": "number",
            "description": "[readonly] The Total amount paid to this employee in lieu of holidays",
            "format": "double"
          },
          "accruedPaymentBalance": {
            "type": "number",
            "description": "[readonly] The balance of what is owed to this employee in lieu of holidays",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LeaveType": {
        "enum": [
          "Unauthorised",
          "Holiday",
          "Sick",
          "Maternity",
          "Paternity",
          "Adoption",
          "SharedParental",
          "Bereavement",
          "SharedParentalAdoption",
          "PaternityAdoption"
        ],
        "type": "string"
      },
      "LinkedPiw": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/LinkedPiwResult"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The Id of the linked Leave",
            "format": "uuid"
          },
          "averageWeeklyEarnings": {
            "type": "number",
            "description": "[readonly] Average weekly earnings from linked Leave",
            "format": "double"
          },
          "workingDays": {
            "type": "number",
            "description": "[readonly] The number of working days in the linked Leave.",
            "format": "double"
          },
          "totalDays": {
            "type": "number",
            "description": "[readonly] The number of days covered by the linked Leave.",
            "format": "double"
          },
          "sspFirstPayDay": {
            "type": "string",
            "description": "[readonly] The SspFirstPayDay from the linked Leave, if set",
            "format": "date",
            "nullable": true
          },
          "sspFirstDay": {
            "type": "string",
            "description": "[readonly] The SspFirstDay from the linked Leave, if set",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Linked Period of Incapacity for Work.\r\nIf you record Sick Leave and select Statutory Pay then any other Sick Leave with Statutory Pay\r\nlasting 4 or more days in the previous 8 weeks will be linked to it"
      },
      "LinkedPiwResult": {
        "enum": [
          "Success",
          "NoLinkedLeave"
        ],
        "type": "string"
      },
      "Loan": {
        "type": "object",
        "properties": {
          "issueDate": {
            "type": "string",
            "description": "The date the Loan was made",
            "format": "date"
          },
          "reference": {
            "maxLength": 100,
            "type": "string",
            "description": "An optional reference for this Loan",
            "nullable": true
          },
          "payCode": {
            "type": "string",
            "description": "The Code of the PayCode used for recording payments.\r\nThe PayCode must have a CalculationType of FixedAmount and not be a multiplier code",
            "nullable": true
          },
          "loanAmount": {
            "type": "number",
            "description": "The initial amount that the loan was for",
            "format": "double"
          },
          "periodAmount": {
            "type": "number",
            "description": "The amount to deduct per PayPeriod",
            "format": "double"
          },
          "amountRepaid": {
            "type": "number",
            "description": "[readonly] The amount repaid so far due to deductions in Payruns",
            "format": "double"
          },
          "previouslyPaid": {
            "type": "number",
            "description": "[readonly] Any amount by which to adjust the Balance, perhaps due to repayments made elsewhere",
            "format": "double"
          },
          "balance": {
            "type": "number",
            "description": "[readonly] The Balance of the Loan",
            "format": "double",
            "readOnly": true
          },
          "isSettled": {
            "type": "boolean",
            "description": "[readonly]",
            "readOnly": true
          },
          "isPaused": {
            "type": "boolean",
            "description": "If set to true then deductions will not be made"
          },
          "documentCount": {
            "type": "integer",
            "description": "[readonly] The number of attachments associated with this model",
            "format": "int32"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "[readonly] The attachments associated with this model",
            "nullable": true
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Used to represent an Attachment of Earnings Order (AEO)"
      },
      "LoanCharge": {
        "type": "object",
        "properties": {
          "threshhold": {
            "type": "number",
            "format": "double"
          },
          "officialInterestRate": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Part of the TaxYearConfig that our engine uses to calculate charges for a Loan.\r\nIt is used internally when our engine performs calculations.\r\nYou do not need to do anything with this model, it's provided purely for informational purposes."
      },
      "LogEntry": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MailSettings": {
        "required": [
          "customiseHtmlEmailSettings",
          "customiseSmtpSettings",
          "senderEmail",
          "senderName"
        ],
        "type": "object",
        "properties": {
          "senderName": {
            "maxLength": 100,
            "type": "string"
          },
          "senderEmail": {
            "maxLength": 100,
            "type": "string",
            "format": "email"
          },
          "useSystemFromAddress": {
            "type": "boolean",
            "description": "If set to true then the SenderEmail provided will only be used in the \r\nReplyTo fields. The system defaults will be used for the From address."
          },
          "senderEmailVerified": {
            "type": "boolean",
            "description": "[readonly] The SenderEmail must be verified before you can send email using that address"
          },
          "customiseSmtpSettings": {
            "type": "boolean"
          },
          "smtpSettings": {
            "$ref": "#/components/schemas/SmtpSettings"
          },
          "customiseHtmlEmailSettings": {
            "type": "boolean"
          },
          "htmlEmailSettings": {
            "$ref": "#/components/schemas/HtmlEmailSettings"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Determines the settings used when the Employer sends emails.\r\nIf CustomiseSmtpSettings is false then SmtpSettings will be null and our default internal settings will be used;"
      },
      "MaritalStatus": {
        "enum": [
          "Single",
          "Married",
          "Divorced",
          "Widowed",
          "CivilPartnership",
          "Unknown"
        ],
        "type": "string"
      },
      "MileageAllowancePaymentsRate": {
        "type": "object",
        "properties": {
          "vehicleType": {
            "$ref": "#/components/schemas/MileageVehicleType"
          },
          "rate": {
            "type": "number",
            "format": "double"
          },
          "threshold": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "aboveThresholdRate": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Part of the TaxYearConfig that our engine uses to calculate Mileage Allowance Payments.\r\nIt is used internally when our engine performs calculations.\r\nYou do not need to do anything with this model, it's provided purely for informational purposes."
      },
      "MileageVehicleType": {
        "enum": [
          "Car",
          "Motorcycle",
          "Cycle"
        ],
        "type": "string"
      },
      "MonthlyMinimum": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "billPastEndDate": {
            "type": "boolean",
            "description": "If set to true then this user should still be billed even after the End Date"
          }
        },
        "additionalProperties": false
      },
      "NationalInsuranceCalculation": {
        "type": "object",
        "properties": {
          "breakdown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NationalInsuranceCalculationBase"
            },
            "description": "[readonly] List of calculations that make up this calculation",
            "nullable": true
          },
          "niCategory": {
            "type": "string",
            "description": "Calculated on NI table letter"
          },
          "asDirector": {
            "type": "boolean",
            "description": "Calculated as a Director"
          },
          "earningsUptoIncludingLEL": {
            "type": "number",
            "description": "Earnings up to and including LEL",
            "format": "double"
          },
          "earningsAboveLELUptoIncludingPT": {
            "type": "number",
            "description": "Earnings above LEL up to PT",
            "format": "double"
          },
          "earningsAbovePTUptoIncludingST": {
            "type": "number",
            "description": "Earnings above PT up to ST",
            "format": "double"
          },
          "earningsAbovePTUptoIncludingUEL": {
            "type": "number",
            "description": "Earnings above PT up to UEL",
            "format": "double"
          },
          "earningsAboveSTUptoIncludingUEL": {
            "type": "number",
            "description": "Earnings above ST up to UEL",
            "format": "double"
          },
          "earningsAboveSTUptoIncludingFUST": {
            "type": "number",
            "description": "Earnings above ST up to FUST",
            "format": "double",
            "nullable": true
          },
          "earningsAboveFUSTUptoIncludingUEL": {
            "type": "number",
            "description": "Earnings above FUST up to UEL",
            "format": "double",
            "nullable": true
          },
          "earningsAboveUEL": {
            "type": "number",
            "description": "Earnings above UEL",
            "format": "double"
          },
          "employeeNiGross": {
            "type": "number",
            "description": "Employee National Insurance Gross Value",
            "format": "double"
          },
          "employeeNiRebate": {
            "type": "number",
            "description": "Employee National Insurance Rebate Value",
            "format": "double"
          },
          "employerNiGross": {
            "type": "number",
            "description": "Employer National Insurance Gross Value",
            "format": "double"
          },
          "employerNiRebate": {
            "type": "number",
            "description": "Employer National Insurance Rebate Value",
            "format": "double"
          },
          "employeeNi": {
            "type": "number",
            "description": "[readonly] Net Employee National Insurance",
            "format": "double",
            "readOnly": true
          },
          "employerNi": {
            "type": "number",
            "description": "[readonly] Net Employer National Insurance",
            "format": "double",
            "readOnly": true
          },
          "netNi": {
            "type": "number",
            "description": "[readonly] Net National Insurance (Employer + Employee)",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Included as part of the PayRunEntry model to provide details of how the National Insurance Contribution was calculated.\r\nUnless the PayRunEntry.ManualNi property is set to true then these value will all be read-only and are recalculated everytime a payrun is updated.\r\nThis calculation could be made up of one or more calculations made on different NI table letters.\r\nWhere more than NI table letter affects the calculation, the calculation for each NI table letter will be contain in the Breakdown."
      },
      "NationalInsuranceCalculationBase": {
        "type": "object",
        "properties": {
          "niCategory": {
            "type": "string",
            "description": "Calculated on NI table letter"
          },
          "asDirector": {
            "type": "boolean",
            "description": "Calculated as a Director"
          },
          "earningsUptoIncludingLEL": {
            "type": "number",
            "description": "Earnings up to and including LEL",
            "format": "double"
          },
          "earningsAboveLELUptoIncludingPT": {
            "type": "number",
            "description": "Earnings above LEL up to PT",
            "format": "double"
          },
          "earningsAbovePTUptoIncludingST": {
            "type": "number",
            "description": "Earnings above PT up to ST",
            "format": "double"
          },
          "earningsAbovePTUptoIncludingUEL": {
            "type": "number",
            "description": "Earnings above PT up to UEL",
            "format": "double"
          },
          "earningsAboveSTUptoIncludingUEL": {
            "type": "number",
            "description": "Earnings above ST up to UEL",
            "format": "double"
          },
          "earningsAboveSTUptoIncludingFUST": {
            "type": "number",
            "description": "Earnings above ST up to FUST",
            "format": "double",
            "nullable": true
          },
          "earningsAboveFUSTUptoIncludingUEL": {
            "type": "number",
            "description": "Earnings above FUST up to UEL",
            "format": "double",
            "nullable": true
          },
          "earningsAboveUEL": {
            "type": "number",
            "description": "Earnings above UEL",
            "format": "double"
          },
          "employeeNiGross": {
            "type": "number",
            "description": "Employee National Insurance Gross Value",
            "format": "double"
          },
          "employeeNiRebate": {
            "type": "number",
            "description": "Employee National Insurance Rebate Value",
            "format": "double"
          },
          "employerNiGross": {
            "type": "number",
            "description": "Employer National Insurance Gross Value",
            "format": "double"
          },
          "employerNiRebate": {
            "type": "number",
            "description": "Employer National Insurance Rebate Value",
            "format": "double"
          },
          "employeeNi": {
            "type": "number",
            "description": "[readonly] Net Employee National Insurance",
            "format": "double",
            "readOnly": true
          },
          "employerNi": {
            "type": "number",
            "description": "[readonly] Net Employer National Insurance",
            "format": "double",
            "readOnly": true
          },
          "netNi": {
            "type": "number",
            "description": "[readonly] Net National Insurance (Employer + Employee)",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Included as part of the PayRunEntry model to provide details of how the National Insurance Contribution was calculated.\r\nUnless the PayRunEntry.ManualNi property is set to true then these value will all be read-only and are recalculated everytime a payrun is updated.\r\nThis calculation could be made up of one or more calculations made on different NI table letters.\r\nWhere more than NI table letter affects the calculation, the calculation for each NI table letter will be contain in the Breakdown."
      },
      "NationalInsuranceCalculationPeriodValues": {
        "type": "object",
        "properties": {
          "lel": {
            "type": "number",
            "description": "[readonly] Lower Earnings Limit",
            "format": "double"
          },
          "pt": {
            "type": "number",
            "description": "[readonly] Primary Threshold",
            "format": "double"
          },
          "st": {
            "type": "number",
            "description": "[readonly] Secondary Threshold",
            "format": "double"
          },
          "fust": {
            "type": "number",
            "description": "[readonly] Freeports Upper Accrual Threshold",
            "format": "double"
          },
          "uap": {
            "type": "number",
            "description": "[readonly] Upper Accrual Point",
            "format": "double"
          },
          "ust": {
            "type": "number",
            "description": "[readonly] Upper Secondary Threshold (under 21)",
            "format": "double"
          },
          "aust": {
            "type": "number",
            "description": "[readonly] Apprentice Upper Secondary Threshold (apprentice under 25)",
            "format": "double"
          },
          "uel": {
            "type": "number",
            "description": "[readonly] Upper Earnings Limit",
            "format": "double"
          },
          "vust": {
            "type": "number",
            "description": "[readonly] Veterian Upper Secondary Threshold",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Part of the TaxYearConfig that our engine uses to calculate National Insurance Contributions.\r\nIt is used internally when our engine performs calculations.\r\nYou do not need to do anything with this model, it's provided purely for informational purposes."
      },
      "NationalInsuranceCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "[readonly] NI Table Letter"
          },
          "description": {
            "type": "string",
            "description": "[readonly] Description of Employees that would use this NI Letter",
            "nullable": true
          },
          "eeB": {
            "type": "number",
            "description": "[readonly] Earnings at or above LEL up to and including PT (Employee Contribution)",
            "format": "double"
          },
          "eeC": {
            "type": "number",
            "description": "[readonly] Earnings above the PT up to and including UEL (Employee Contribution)",
            "format": "double"
          },
          "eeD": {
            "type": "number",
            "description": "[readonly] Balance of earnings above UEL (Employee Contribution)",
            "format": "double"
          },
          "eeE": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "eeF": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "erB": {
            "type": "number",
            "description": "[readonly] Earnings at or above LEL up to and including PT (Employer Contribution)",
            "format": "double"
          },
          "erC": {
            "type": "number",
            "description": "[readonly]  Earnings above the PT up to and including UEL (Employer Contribution)",
            "format": "double"
          },
          "erD": {
            "type": "number",
            "description": "[readonly] Balance of earnings above UEL (Employer Contribution)",
            "format": "double"
          },
          "erE": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "erF": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Part of the TaxYearConfig that our engine uses to calculate National Insurance Contributions.\r\nIt is used internally when our engine performs calculations.\r\nYou do not need to do anything with this model, it's provided purely for informational purposes."
      },
      "NationalMinimumWage": {
        "type": "object",
        "properties": {
          "apprentice": {
            "type": "boolean",
            "nullable": true
          },
          "maxAge": {
            "type": "integer",
            "format": "int32"
          },
          "hourlyAmount": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Part of the TaxYearConfig that our engine uses to calculate National Minimum Wage.\r\nIt is used internally when our engine performs calculations.\r\nYou do not need to do anything with this model, it's provided purely for informational purposes."
      },
      "NicSummary": {
        "type": "object",
        "properties": {
          "niTable": {
            "type": "string"
          },
          "asDirector": {
            "type": "boolean"
          },
          "grossEarningsForNics": {
            "type": "number",
            "format": "double"
          },
          "earningsAtLel": {
            "type": "number",
            "format": "double"
          },
          "earningsAboveLelToPt": {
            "type": "number",
            "format": "double"
          },
          "earningsAbovePtToSt": {
            "type": "number",
            "format": "double"
          },
          "earningsAbovePtToUap": {
            "type": "number",
            "format": "double"
          },
          "earningsAboveStToUel": {
            "type": "number",
            "format": "double"
          },
          "earningsAboveStToFust": {
            "type": "number",
            "format": "double"
          },
          "earningsAboveFustToUel": {
            "type": "number",
            "format": "double"
          },
          "earningsAboveUapToUel": {
            "type": "number",
            "format": "double"
          },
          "earningsAboveUel": {
            "type": "number",
            "format": "double"
          },
          "employeeNics": {
            "type": "number",
            "format": "double"
          },
          "employeeNiRebate": {
            "type": "number",
            "format": "double"
          },
          "employerNics": {
            "type": "number",
            "format": "double"
          },
          "employerNiRebate": {
            "type": "number",
            "format": "double"
          },
          "hasValues": {
            "type": "boolean",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          }
        },
        "additionalProperties": false
      },
      "NiLetterError": {
        "enum": [
          "XNotUsedForPensionersPayroll",
          "BUsedForMale",
          "CUsedBeforeStatePensionAge",
          "AUsedForUnder21",
          "AUsedOverStatePensionAge",
          "HUsedForOver24",
          "MUsedForOver20",
          "ZUsedForOver20",
          "IUsedForMale",
          "FUsedForNonFreeportWorker",
          "IUsedForNonFreeportWorker",
          "LUsedForNonFreeportWorker",
          "SUsedForNonFreeportWorker",
          "VUsedForNonVeteran",
          "VUsedForVeteransFirstEmploymentDateOverOneYearOld",
          "FUsedForFreeportWorkerOverThreeYearsOld",
          "IUsedForFreeportWorkerOverThreeYearsOld",
          "LUsedForFreeportWorkerOverThreeYearsOld",
          "SUsedForFreeportWorkerOverThreeYearsOld"
        ],
        "type": "string"
      },
      "NiLetterValidationReport": {
        "type": "object",
        "properties": {
          "basedOnPayrun": {
            "type": "boolean",
            "description": "If false, then any payrun related information (Tax year, etc) should be ignored."
          },
          "errorLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NiLetterValidationReportLine"
            },
            "nullable": true,
            "readOnly": true
          },
          "paymentDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Item"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "periodTo": {
            "type": "integer",
            "format": "int32"
          },
          "startPeriodName": {
            "type": "string",
            "nullable": true
          },
          "endPeriodName": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false
      },
      "NiLetterValidationReportLine": {
        "type": "object",
        "properties": {
          "employeeId": {
            "type": "string",
            "format": "uuid"
          },
          "payrollCode": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "niNumber": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "niLetterError": {
            "$ref": "#/components/schemas/NiLetterError"
          },
          "errorDetails": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "niLetter": {
            "type": "string",
            "nullable": true
          },
          "suggestedLetter": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NiLetterValidationReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/NiLetterValidationReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "NominalCodeMapping": {
        "type": "object",
        "properties": {
          "nominalCode": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "nominalName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "maxLength": 100,
            "type": "string",
            "description": "If you will be using the API to post journals to an ExternalDataProvider, then this is the Id of the nominal code in the external system.\r\nIf there's no mapping then this will have a value of \"0\"",
            "nullable": true
          },
          "payCode": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Note": {
        "type": "object",
        "properties": {
          "noteDate": {
            "type": "string",
            "description": "The date of the note",
            "format": "date"
          },
          "noteText": {
            "type": "string",
            "description": "Note text",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "description": "[readonly] The email address of the user that create the Note",
            "nullable": true
          },
          "updatedBy": {
            "type": "string",
            "description": "[readonly] The email address of the user that last updated the Note",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/NoteType"
          },
          "documentCount": {
            "type": "integer",
            "description": "[readonly] The number of attachments associated with this model",
            "format": "int32"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "[readonly] The attachments associated with this model",
            "nullable": true
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Used to represent a Note for an Employee"
      },
      "NoteType": {
        "enum": [
          "General",
          "NewStarterStatement",
          "RtwProof",
          "P45"
        ],
        "type": "string"
      },
      "Nvr": {
        "type": "object",
        "properties": {
          "employees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "nullable": true
          },
          "employeeCount": {
            "type": "integer",
            "format": "int32"
          },
          "nvrRequest": {
            "$ref": "#/components/schemas/NvrRequest"
          },
          "iRmark": {
            "type": "string",
            "nullable": true
          },
          "xml": {
            "type": "string",
            "nullable": true
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "employerReferences": {
            "$ref": "#/components/schemas/EmpRefs"
          },
          "govTalkSubmission": {
            "$ref": "#/components/schemas/GovTalkSubmission"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "NvrEmployee": {
        "type": "object",
        "properties": {
          "employeeUniqueId": {
            "type": "string",
            "format": "uuid"
          },
          "item": {
            "$ref": "#/components/schemas/Item"
          },
          "employeeDetails": {
            "$ref": "#/components/schemas/NvrEmployeeDetails"
          },
          "employment": {
            "$ref": "#/components/schemas/NvrEmployment"
          }
        },
        "additionalProperties": false
      },
      "NvrEmployeeDetails": {
        "type": "object",
        "properties": {
          "nino": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "$ref": "#/components/schemas/RtiEmployeeName"
          },
          "address": {
            "$ref": "#/components/schemas/RtiEmployeeAddress"
          },
          "birthDate": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NvrEmployment": {
        "type": "object",
        "properties": {
          "payId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NvrRequest": {
        "type": "object",
        "properties": {
          "employee": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NvrEmployee"
            },
            "nullable": true
          },
          "relatedTaxYear": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OpeningBalances": {
        "type": "object",
        "properties": {
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "notNewStarter": {
            "type": "boolean"
          },
          "previousEmployerGross": {
            "type": "number",
            "format": "double"
          },
          "previousEmployerTax": {
            "type": "number",
            "format": "double"
          },
          "currentEmployerGross": {
            "type": "number",
            "format": "double"
          },
          "currentEmployerTax": {
            "type": "number",
            "format": "double"
          },
          "currentEmployerNet": {
            "type": "number",
            "format": "double"
          },
          "studentLoanDeductions": {
            "type": "number",
            "format": "double"
          },
          "postgradLoanDeductions": {
            "type": "number",
            "format": "double"
          },
          "empeePenContribnsPaid": {
            "type": "number",
            "format": "double"
          },
          "empeePenContribnsNotPaid": {
            "type": "number",
            "format": "double"
          },
          "smp": {
            "type": "number",
            "format": "double"
          },
          "spp": {
            "type": "number",
            "format": "double"
          },
          "sap": {
            "type": "number",
            "format": "double"
          },
          "shpp": {
            "type": "number",
            "format": "double"
          },
          "spbp": {
            "type": "number",
            "format": "double"
          },
          "realTimeClass1ANi": {
            "type": "number",
            "format": "double"
          },
          "terminationPayments": {
            "type": "number",
            "format": "double"
          },
          "mapsMiles": {
            "type": "integer",
            "format": "int32"
          },
          "benefitsTaxedViaPayroll": {
            "type": "number",
            "format": "double"
          },
          "nicSummaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NicSummary"
            },
            "nullable": true
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          }
        },
        "additionalProperties": false
      },
      "OverseasEmployerDetails": {
        "type": "object",
        "properties": {
          "overseasEmployer": {
            "type": "boolean"
          },
          "overseasSecondmentStatus": {
            "$ref": "#/components/schemas/OverseasSecondmentStatus"
          },
          "eeaCitizen": {
            "type": "boolean"
          },
          "epm6Scheme": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OverseasSecondmentStatus": {
        "enum": [
          "MoreThan183Days",
          "LessThan183Days",
          "BothInAndOutOfUK"
        ],
        "type": "string"
      },
      "P11": {
        "type": "object",
        "properties": {
          "employerName": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "payrollCode": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "employerOfficeNo": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "employerPayeRef": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "firstname": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "niNumber": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "taxCode": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "joinDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "leaveDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date",
            "nullable": true
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/P11Line"
            },
            "description": "[readonly]",
            "nullable": true
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false,
        "description": "A P11 Report summarises payments and deductions made to an employee.\r\nOur Reports API can return this to you in many formats including as a PDF file\r\nIf you request is as a JSOn object then it is represented using this model."
      },
      "P11DAssetAvailable": {
        "type": "object",
        "properties": {
          "desc": {
            "type": "string",
            "nullable": true
          },
          "other": {
            "type": "string",
            "nullable": true
          },
          "annValProRata": {
            "type": "string",
            "nullable": true
          },
          "grossOrAmtForgone": {
            "type": "string",
            "nullable": true
          },
          "costOrAmtForgone": {
            "type": "string",
            "nullable": true
          },
          "madeGood": {
            "type": "string",
            "nullable": true
          },
          "cashEquivOrRelevantAmt": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "P11DAssetAvailableCollection": {
        "type": "object",
        "properties": {
          "asset": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/P11DAssetAvailable"
            },
            "nullable": true
          },
          "typeLetter": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "P11DAssetTransferredCollection": {
        "type": "object",
        "properties": {
          "asset": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/P11DDescOther"
            },
            "nullable": true
          },
          "typeLetter": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "P11DCar": {
        "type": "object",
        "properties": {
          "make": {
            "type": "string",
            "nullable": true
          },
          "registered": {
            "type": "string",
            "nullable": true
          },
          "availFrom": {
            "type": "string",
            "nullable": true
          },
          "availTo": {
            "type": "string",
            "nullable": true
          },
          "cc": {
            "type": "string",
            "nullable": true
          },
          "fuel": {
            "type": "string",
            "nullable": true
          },
          "cO2": {
            "type": "string",
            "nullable": true
          },
          "zeroEmissionMileage": {
            "type": "string",
            "nullable": true
          },
          "noAppCO2Fig": {
            "type": "string",
            "nullable": true
          },
          "list": {
            "type": "string",
            "nullable": true
          },
          "accs": {
            "type": "string",
            "nullable": true
          },
          "capCont": {
            "type": "string",
            "nullable": true
          },
          "privUsePmt": {
            "type": "string",
            "nullable": true
          },
          "fuelWithdrawn": {
            "$ref": "#/components/schemas/P11dCarFreeFuelWithdrawn"
          },
          "cashEquivOrRelevantAmt": {
            "type": "string",
            "nullable": true
          },
          "fuelCashEquivOrRelevantAmt": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "P11DCarCollection": {
        "type": "object",
        "properties": {
          "car": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/P11DCar"
            },
            "nullable": true
          },
          "totalCarsOrRelevantAmt": {
            "type": "string",
            "nullable": true
          },
          "totalFuelOrRelevantAmt": {
            "type": "string",
            "nullable": true
          },
          "typeLetter": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "P11dCarFreeFuelWithdrawn": {
        "type": "object",
        "properties": {
          "reinstated": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "P11DDescOther": {
        "type": "object",
        "properties": {
          "desc": {
            "type": "string",
            "nullable": true
          },
          "other": {
            "type": "string",
            "nullable": true
          },
          "annValProRata": {
            "type": "string",
            "nullable": true
          },
          "grossOrAmtForgone": {
            "type": "string",
            "nullable": true
          },
          "costOrAmtForgone": {
            "type": "string",
            "nullable": true
          },
          "madeGood": {
            "type": "string",
            "nullable": true
          },
          "cashEquivOrRelevantAmt": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "P11Detailed": {
        "type": "object",
        "properties": {
          "employerName": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "payrollCode": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "employerOfficeNo": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "employerPayeRef": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "firstname": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "middlename": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "niNumber": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "taxCode": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "joinDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "leaveDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date",
            "nullable": true
          },
          "isDirector": {
            "type": "boolean",
            "description": "[readonly]"
          },
          "niAndStatPaymentsLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/P11NiAndStatPaymentsLine"
            },
            "description": "[readonly]",
            "nullable": true
          },
          "totalsLine": {
            "$ref": "#/components/schemas/P11NiAndStatPaymentsTotalsLine"
          },
          "niSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/P11DetailedNiValues"
            },
            "description": "[readonly]",
            "nullable": true
          },
          "payeLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/P11PayeLine"
            },
            "description": "[readonly]",
            "nullable": true
          },
          "payeTotalsLine": {
            "$ref": "#/components/schemas/P11PayeTotalsLine"
          },
          "payeSummary": {
            "$ref": "#/components/schemas/P11PayeSummary"
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false,
        "description": "A more comprehensive P11 Report.\r\nOur Reports API can return this to you in several formats including as a PDF file\r\nIf you request a JSON object then it is represented using this model."
      },
      "P11DetailedNiValues": {
        "type": "object",
        "properties": {
          "table": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "earningsAtLel": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "earningsAboveLelToPt": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "earningsAbovePtToUap": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "earningsAboveUapToUel": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "earningsAbovePtToUel": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "employeeNics": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "employerNics": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "employeeAndEmployerNics": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Forms the NI Summary table in the P11 Detailed report."
      },
      "P11DetailedReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/P11Detailed"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "P11dExpenses": {
        "type": "object",
        "properties": {
          "travAndSub": {
            "$ref": "#/components/schemas/P11DSingleItem"
          },
          "ent": {
            "$ref": "#/components/schemas/P11DSingleItem"
          },
          "homeTel": {
            "$ref": "#/components/schemas/P11DSingleItem"
          },
          "nonQualRel": {
            "$ref": "#/components/schemas/P11DSingleItem"
          },
          "other": {
            "$ref": "#/components/schemas/P11DSingleItem"
          },
          "typeLetter": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "P11DLoan": {
        "type": "object",
        "properties": {
          "joint": {
            "type": "string",
            "nullable": true
          },
          "initOS": {
            "type": "string",
            "nullable": true
          },
          "finalOS": {
            "type": "string",
            "nullable": true
          },
          "maxOS": {
            "type": "string",
            "nullable": true
          },
          "intPaid": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "nullable": true
          },
          "discharge": {
            "type": "string",
            "nullable": true
          },
          "cashEquivOrRelevantAmt": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "P11DLoanCollection": {
        "type": "object",
        "properties": {
          "loan": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/P11DLoan"
            },
            "nullable": true
          },
          "typeLetter": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "P11DOther": {
        "type": "object",
        "properties": {
          "class1A": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/P11DDescOther"
            },
            "nullable": true
          },
          "nonClass1A": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/P11DDescOther"
            },
            "nullable": true
          },
          "taxPaid": {
            "type": "string",
            "nullable": true
          },
          "typeLetter": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "P11DPaymentCollection": {
        "type": "object",
        "properties": {
          "payment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/P11DDescOther"
            },
            "nullable": true
          },
          "tax": {
            "type": "string",
            "nullable": true
          },
          "typeLetter": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "P11DSingleItem": {
        "type": "object",
        "properties": {
          "typeLetter": {
            "type": "string",
            "nullable": true
          },
          "taxablePmt": {
            "type": "string",
            "nullable": true
          },
          "excess": {
            "type": "string",
            "nullable": true
          },
          "taxablePmtOrRelevantAmt": {
            "type": "string",
            "nullable": true
          },
          "tradingOrgInd": {
            "type": "string",
            "nullable": true
          },
          "desc": {
            "type": "string",
            "nullable": true
          },
          "other": {
            "type": "string",
            "nullable": true
          },
          "annValProRata": {
            "type": "string",
            "nullable": true
          },
          "grossOrAmtForgone": {
            "type": "string",
            "nullable": true
          },
          "costOrAmtForgone": {
            "type": "string",
            "nullable": true
          },
          "madeGood": {
            "type": "string",
            "nullable": true
          },
          "cashEquivOrRelevantAmt": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "P11dVans": {
        "type": "object",
        "properties": {
          "fuelCashEquivOrRelevantAmt": {
            "type": "string",
            "nullable": true
          },
          "typeLetter": {
            "type": "string",
            "nullable": true
          },
          "taxablePmt": {
            "type": "string",
            "nullable": true
          },
          "excess": {
            "type": "string",
            "nullable": true
          },
          "taxablePmtOrRelevantAmt": {
            "type": "string",
            "nullable": true
          },
          "tradingOrgInd": {
            "type": "string",
            "nullable": true
          },
          "desc": {
            "type": "string",
            "nullable": true
          },
          "other": {
            "type": "string",
            "nullable": true
          },
          "annValProRata": {
            "type": "string",
            "nullable": true
          },
          "grossOrAmtForgone": {
            "type": "string",
            "nullable": true
          },
          "costOrAmtForgone": {
            "type": "string",
            "nullable": true
          },
          "madeGood": {
            "type": "string",
            "nullable": true
          },
          "cashEquivOrRelevantAmt": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "P11Line": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "period": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "grossTaxablePay": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "grossTaxablePayYTD": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "tax": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "taxYTD": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "smpYTD": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "sppYTD": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "sapYTD": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "shppYTD": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "spbpYTD": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "studentLoanYTD": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "postgradLoanYTD": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "niValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/P11NiValues"
            },
            "description": "[readonly]",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Lines for the P11 Report"
      },
      "P11NiAndStatPaymentsLine": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "period": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "monthNumber": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "weekNumber": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "smp": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "spp": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "sap": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "shpp": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "ssp": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "spbp": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "class1a": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "niValues": {
            "$ref": "#/components/schemas/P11DetailedNiValues"
          },
          "taxCode": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Lines for the NI Contributions and Statutory Payments table in the P11 Detailed Report"
      },
      "P11NiAndStatPaymentsTotalsLine": {
        "type": "object",
        "properties": {
          "toLel": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "lelToPt": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "ptToUel": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "eesAndErs": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "ees": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "class1A": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "ssp": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "smp": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "spp": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "shpp": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "sap": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "spbp": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Summary line for the NI Contributions and Statutory Payments table in the P11 Detailed report"
      },
      "P11NiValues": {
        "type": "object",
        "properties": {
          "table": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "period": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "ytd": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Forms a part of the P11 report."
      },
      "P11PayeLine": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "period": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "monthNumber": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "weekNumber": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "grossTaxablePay": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "grossTaxablePayYTD": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "tax": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "taxYTD": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "studentLoan": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "postgradLoan": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "taxCode": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Lines for the Paye Income Tax table in the P11 Detailed report"
      },
      "P11PayeSummary": {
        "type": "object",
        "properties": {
          "previousEmploymentPay": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "previousEmploymentTax": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "thisEmploymentPay": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "thisEmploymentTax": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "totalPayForYear": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "totalTaxForYear": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Forms the PAYE summary in the P11 Detailed report"
      },
      "P11PayeTotalsLine": {
        "type": "object",
        "properties": {
          "studentLoan": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "postgradLoan": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "pay": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "totalPayToDate": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "taxDueToDate": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "taxDue": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Summary line for the Paye Income Tax table in the P11 Detailed report"
      },
      "P11ReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/P11"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "P32": {
        "type": "object",
        "properties": {
          "isQuarterly": {
            "type": "boolean",
            "description": "[readonly]"
          },
          "hmrcLiabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HmrcLiability"
            },
            "description": "[readonly]",
            "nullable": true
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "P32ReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/P32"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "PapdisDocument": {
        "type": "object",
        "properties": {
          "messageFunctionCode": {
            "$ref": "#/components/schemas/PapdisMessageFunctionCode"
          },
          "version": {
            "$ref": "#/components/schemas/PapdisVersion"
          },
          "messageFunctionCodeInt": {
            "type": "integer",
            "description": "[readonly]",
            "format": "int32"
          },
          "pensionProvider": {
            "$ref": "#/components/schemas/PapdisPensionProvider"
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false,
        "description": "PAPDIS stands for 'Payroll and Pension Data Interface Standard'.\r\nIt is an industry standard for exchanging data between payroll software and pension providers.\r\nOur system provides an export of data in this standard and these models are used to represent the data.\r\nWhilst the relevant reporting API endpoint can provide this data as a JSON entity, it is usually represented in CSV or XML format which our API also provides."
      },
      "PapdisDocumentReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/PapdisDocument"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "PapdisEmployee": {
        "type": "object",
        "properties": {
          "employeeId": {
            "type": "string",
            "description": "[readonly]",
            "format": "uuid"
          },
          "name": {
            "$ref": "#/components/schemas/PapdisEmployeeName"
          },
          "identity": {
            "$ref": "#/components/schemas/PapdisEmployeeIdentity"
          },
          "contact": {
            "$ref": "#/components/schemas/PapdisEmployeeContact"
          },
          "pay": {
            "$ref": "#/components/schemas/PapdisEmployeePay"
          },
          "assessment": {
            "$ref": "#/components/schemas/PapdisEmployeeAssessment"
          },
          "contribution": {
            "$ref": "#/components/schemas/PapdisEmployeeContribution"
          },
          "exit": {
            "$ref": "#/components/schemas/PapdisEmployeeExit"
          }
        },
        "additionalProperties": false
      },
      "PapdisEmployeeAssessment": {
        "type": "object",
        "properties": {
          "assessmentCode": {
            "type": "integer",
            "description": "[readonly]",
            "format": "int32"
          },
          "eventCode": {
            "type": "integer",
            "description": "[readonly]",
            "format": "int32"
          },
          "eventDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date",
            "nullable": true
          },
          "statutoryLetterCode": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "isIndividualAlreadyMemberOfQPS": {
            "type": "boolean",
            "description": "[readonly]"
          },
          "deferralDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date",
            "nullable": true
          },
          "enrolmentCommunicationsIssuedDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date",
            "nullable": true
          },
          "workerExclusionCode": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "reenrolmentIndicator": {
            "type": "boolean",
            "description": "[readonly]"
          },
          "optOutWindowEndDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PapdisEmployeeContact": {
        "type": "object",
        "properties": {
          "postalAddress": {
            "$ref": "#/components/schemas/PapdisEmployeeContactPostalAddress"
          },
          "emailAddress": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "secondaryEmailAddress": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PapdisEmployeeContactPostalAddress": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "address3": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "address4": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "postcode": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PapdisEmployeeContribution": {
        "type": "object",
        "properties": {
          "employerContributionsAmount": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "employerContributionsPercent": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "employeeContributionsAmount": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "employeeContributionsPercent": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "additionalVoluntaryContributionsAmount": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "additionalVoluntaryContributionsPercent": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "salarySacrificeIndicator": {
            "type": "boolean",
            "description": "[readonly]"
          }
        },
        "additionalProperties": false
      },
      "PapdisEmployeeExit": {
        "type": "object",
        "properties": {
          "exitDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "exitReasonCode": {
            "type": "integer",
            "description": "[readonly]",
            "format": "int32",
            "nullable": true
          },
          "aeOptOutDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date",
            "nullable": true
          },
          "aeOptOutReference": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PapdisEmployeeIdentity": {
        "type": "object",
        "properties": {
          "employeeId": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "gender": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "nationalInsuranceNumber": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "employmentStartDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          }
        },
        "additionalProperties": false
      },
      "PapdisEmployeeName": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "forename1": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "forename2": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PapdisEmployeePay": {
        "type": "object",
        "properties": {
          "pensionableEarningsAmount": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "totalGrossQualifyingEarningsAmount": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PapdisEmployer": {
        "type": "object",
        "properties": {
          "pensionRule": {
            "$ref": "#/components/schemas/PensionRule"
          },
          "employerId": {
            "type": "string",
            "description": "[readonly] Taken from the papdisEmployerId property of the PensionProvider",
            "nullable": true
          },
          "group": {
            "type": "string",
            "description": "[readonly] Taken from the papdisGroup property of the WorkerGroup",
            "nullable": true
          },
          "subGroup": {
            "type": "string",
            "description": "[readonly] Taken from the papdisSubGroup property of the WorkerGroup",
            "nullable": true
          },
          "payrollPeriod": {
            "$ref": "#/components/schemas/PapdisPayrollPeriod"
          },
          "stagingDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "cyclicalReenrolmentDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PapdisMessageFunctionCode": {
        "enum": [
          "Enrol",
          "InfoOnly",
          "AssessmentRequest",
          "AssessmentResponse",
          "WokerInstruction"
        ],
        "type": "string"
      },
      "PapdisPayrollPeriod": {
        "type": "object",
        "properties": {
          "payPeriodStartDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "payPeriodEndDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "contributionDeductionDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "frequencyCode": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "taxPeriod": {
            "type": "integer",
            "description": "[readonly]",
            "format": "int32"
          },
          "payReferenceStartDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "payReferenceEndDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "employees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PapdisEmployee"
            },
            "description": "[readonly] Employees and contributions made in this period",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PapdisPensionProvider": {
        "type": "object",
        "properties": {
          "pensionProviderId": {
            "type": "string",
            "description": "[readonly] Taken from the papdisProviderId property of the PensionProvider",
            "nullable": true
          },
          "employers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PapdisEmployer"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PapdisVersion": {
        "enum": [
          "PAP10",
          "PAP11"
        ],
        "type": "string"
      },
      "PartnerDetails": {
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          },
          "initials": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          },
          "niNumber": {
            "maxLength": 15,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayBasis": {
        "enum": [
          "Hourly",
          "Daily",
          "Monthly"
        ],
        "type": "string"
      },
      "PayCode": {
        "required": [
          "code",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "code": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string"
          },
          "defaultValue": {
            "type": "number",
            "description": "If a non-zero value is provided then when this code is selected in our UI the value will be automatically filled.",
            "format": "double",
            "nullable": true
          },
          "isDeduction": {
            "type": "boolean",
            "description": "If set to true then a PayLine using this code will be treated as a deduction as opposed to an addition."
          },
          "isNiable": {
            "type": "boolean",
            "description": "Determines whether or not the value of PayLines using this code should be taken into consideration when calculating National Insurance Contributions."
          },
          "isTaxable": {
            "type": "boolean",
            "description": "Determines whether or not the value of PayLines using this code should be taken into consideration when calculating the PAYE liability."
          },
          "isPensionable": {
            "type": "boolean",
            "description": "Determines whether or not the value of PayLines using this code should be taken into consideration when calculating the total pensionable pay."
          },
          "isAttachable": {
            "type": "boolean",
            "description": "Determines whether or not the value of PayLines using this code should be taken into consideration when calculating the attachable pay for AttachmentOrders."
          },
          "isRealTimeClass1aNiable": {
            "type": "boolean",
            "description": "Determines whether or not the value of PayLines using this code are subject to real time Class 1A NIC."
          },
          "isNotContributingToHolidayPay": {
            "type": "boolean",
            "description": "If true then any payments made using this code will not contribute towards holiday pay calculations."
          },
          "isQualifyingEarningsForAe": {
            "type": "boolean",
            "description": "If true then any payments made using this code will be used as the basis for calculating QualifyingEarnings for AutoEnrolment assessments.\r\nIf it is set to null then when it's next retrieved it'll have the same value as PensionablePay",
            "nullable": true
          },
          "isNotTierable": {
            "type": "boolean",
            "description": "If true then any payments made using this code will not be included when calculating the tier an employee should be on for a Tiered Pension."
          },
          "isTcp_Tcls": {
            "type": "boolean",
            "description": "If true then any payments made using this code will be reported as\r\na Trivial Commutation Payment (A - TCLS)"
          },
          "isTcp_Pp": {
            "type": "boolean",
            "description": "If true then any payments made using this code will be reported as\r\na Trivial Commutation Payment (B - Personal Pension)"
          },
          "isTcp_Op": {
            "type": "boolean",
            "description": "If true then any payments made using this code will be reported as\r\na Trivial Commutation Payment (C - Occupational Pension)"
          },
          "isFlexiDd_DeathBenefit": {
            "type": "boolean",
            "description": "If true then any payments made using this code will be reported as\r\na Flexible Drawdown of Death Benefit"
          },
          "isFlexiDd_Pension": {
            "type": "boolean",
            "description": "If true then any payments made using this code will be reported as\r\na Flexible Drawdown flexibly accessing a pension"
          },
          "calculationType": {
            "$ref": "#/components/schemas/PayCodeCalculationType"
          },
          "multiplierType": {
            "$ref": "#/components/schemas/PayCodeMultiplierType"
          },
          "dailyRateMultiplier": {
            "type": "number",
            "description": "If the MultiplierType is MultipleOfDailyRate then this sets the multiple to be used, ie 1.5",
            "format": "double"
          },
          "hourlyRateMultiplier": {
            "type": "number",
            "description": "If the MultiplierType is MultipleOfHourlyRate then this sets the multiple to be used, ie 1.5",
            "format": "double"
          },
          "isSystemCode": {
            "type": "boolean",
            "description": "[readonly] System Codes cannot be deleted or edited"
          },
          "isControlCode": {
            "type": "boolean",
            "description": "[readonly] Control Codes cannot be deleted or edited nor can PayLines be assigned to them."
          },
          "payee": {
            "type": "string",
            "description": "The Id of the Payee, if any, that deductions are to be paid to.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Each PayLine has a Code. The Code will match the Code property of a PayCode.\r\nThe PayCode that is used determines how the amount is treated with regards to tax, NI and pensions"
      },
      "PayCodeCalculationType": {
        "enum": [
          "FixedAmount",
          "PercentageOfGross",
          "PercentageOfNet",
          "MultipleOfHourlyRate",
          "MultipleOfDailyRate"
        ],
        "type": "string"
      },
      "PayCodeMultiplierType": {
        "enum": [
          "None",
          "Hours",
          "Days"
        ],
        "type": "string"
      },
      "Payee": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of this Payee"
          },
          "bankDetails": {
            "$ref": "#/components/schemas/BankDetails"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PayeeType": {
        "enum": [
          "Employee",
          "Hmrc",
          "PensionProvider",
          "Aeo",
          "Deduction"
        ],
        "type": "string"
      },
      "PayLine": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "The amount to add or deduct (whether it is a deduction or addition depends on the PayCode used).\r\nIf the PayCode has a CalculationType other than FixedAmount then this field will be a percentage. \r\nIf the PayCode has a MultiplierType other than None then this field will be readonly and automatically calculated.",
            "format": "double"
          },
          "rate": {
            "type": "number",
            "description": "If the related  PayCode has a MultiplierType other than None then this field will be used as the rate per day or hour. Otherwise it isn't used",
            "format": "double",
            "nullable": true
          },
          "multiplier": {
            "type": "number",
            "description": "If the related PayCode has a MultiplierType other than None then this field will be used as number of days or hours",
            "format": "double",
            "nullable": true
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "description": "A freeform description to accompany this line. It will be displayed on the payslip.",
            "nullable": true
          },
          "attachmentOrderId": {
            "type": "string",
            "description": "[readonly] The Id of the associated AttachmentOrder. Only included if the Code is AEO",
            "format": "uuid",
            "nullable": true
          },
          "pensionId": {
            "type": "string",
            "description": "[readonly] The Id of the associated Pension. Only included if the Code is PENSION, PENSIONSS or PENSIONRAS",
            "format": "uuid",
            "nullable": true
          },
          "leaveId": {
            "type": "string",
            "description": "[readonly] The Id of the associated Leave. Only included if the PayLine is a result of a Leave with Statutory pay",
            "format": "uuid",
            "nullable": true
          },
          "loanId": {
            "type": "string",
            "description": "[readonly] The Id of the associated Loan, if any.",
            "format": "uuid",
            "nullable": true
          },
          "leaveStatutoryDaysPaid": {
            "type": "number",
            "description": "[readonly] If the PayLine is a result of a Leave with Statutory Pay then this property tells you how many days they've been paid for (based on their Working Pattern).",
            "format": "double",
            "nullable": true
          },
          "leaveStatutoryWeeksPaid": {
            "type": "number",
            "description": "[readonly] If the PayLine is a result of a Leave with Statutory Pay then this property tells you how many weeks they've been paid for (based on their Working Pattern).",
            "format": "double",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The Code of the PayCode this line is assigned to. The PayCode determines the treatment of this line when it comes to NI, Tax and Pensions as well as whether it's a deduction or addition.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "childId": {
            "type": "string",
            "description": "This is nothing but the UniqueId of the model.",
            "format": "uuid"
          },
          "isNetToGross": {
            "type": "boolean",
            "description": "If the PayLine is a fixed ammount addition without multiplier then this property may be set to true so that the amount of the addition to be considered a take home pay target."
          },
          "targetNetToGrossValue": {
            "type": "number",
            "description": "The orginal net fixed addition amount that is considered to be a take home pay target.",
            "format": "double",
            "nullable": true
          },
          "netToGrossDiscrepancy": {
            "type": "number",
            "description": "The discrepancy between the targeted and the calculated grossed up value durig a net to gross calculation.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "As well as the basic pay amount for an employee there are often additions and deductions such as bonuses.\r\nThese additions and deductions are represented using this model."
      },
      "PaymentDateType": {
        "enum": [
          "SameDate",
          "LastDay",
          "LastWeekday",
          "LastXxxday",
          "SameDateWorkingDay"
        ],
        "type": "string"
      },
      "PaymentsCsvMapping": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PaymentsCsvMappingType"
          },
          "importBehaviour": {
            "type": "integer",
            "format": "int32"
          },
          "payBasis": {
            "$ref": "#/components/schemas/PayBasis"
          },
          "hasHeader": {
            "type": "boolean"
          },
          "payrollCodeIndex": {
            "type": "integer",
            "format": "int32"
          },
          "employerIdIndex": {
            "type": "integer",
            "format": "int32"
          },
          "payAmountIndex": {
            "type": "integer",
            "format": "int32"
          },
          "payAmountMultiplierIndex": {
            "type": "integer",
            "format": "int32"
          },
          "noteIndex": {
            "type": "integer",
            "format": "int32"
          },
          "payCodeIndex": {
            "type": "integer",
            "format": "int32"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentsCsvMappingColumn"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "This model is used to save CSV mappings for importing of payments.\r\nIt probably has very little practical use outside of our own UI"
      },
      "PaymentsCsvMappingColumn": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 25,
            "type": "string"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "isReferenceOnly": {
            "type": "boolean",
            "description": "If set to true then no PayCode is mapped and this column is just for on-screen refernece only"
          },
          "colIndex": {
            "type": "integer",
            "format": "int32"
          },
          "isMultiplier": {
            "type": "boolean"
          },
          "rateColIndex": {
            "type": "integer",
            "description": "If the mapping IsMultiplier, then this optionally specifies another column from which to get the value",
            "format": "int32",
            "nullable": true
          },
          "shouldSerializeRateColIndex": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PaymentsCsvMappingType": {
        "enum": [
          "RowBased",
          "ColumnBased"
        ],
        "type": "string"
      },
      "PayMethod": {
        "enum": [
          "Cash",
          "Cheque",
          "Credit",
          "DirectDebit"
        ],
        "type": "string"
      },
      "PayOptions": {
        "type": "object",
        "properties": {
          "period": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "description": "Indicates whether to use first, second, third (etc) PaySchedule for this PayPeriod.",
            "format": "int32"
          },
          "payAmount": {
            "type": "number",
            "description": "The amount the Employee is regularly paid each period",
            "format": "double"
          },
          "basis": {
            "$ref": "#/components/schemas/PayBasis"
          },
          "nationalMinimumWage": {
            "type": "boolean"
          },
          "payAmountMultiplier": {
            "type": "number",
            "description": "This property is irrelevant if the basis is Monthly.\r\nBut if the basis is Daily or Hourly then this property sets how many days/hours the employee should be paid for in the period.",
            "format": "double"
          },
          "baseHourlyRate": {
            "type": "number",
            "description": "This property is used to calculate values for PayCodes that are set as multiples of \r\nthe employees base hourly rate. Eg Overtime.\r\nIf this is set as zero then we'll attempt to calculate a value based on the other fields",
            "format": "double"
          },
          "baseDailyRate": {
            "type": "number",
            "description": "This property is used to calculate values for PayCodes that are set as multiples of \r\nthe employees base daily rate. Eg sick.\r\nIf this is set as zero then we'll attempt to calculate a value based on the other fields",
            "format": "double"
          },
          "autoAdjustForLeave": {
            "type": "boolean",
            "description": "Automatically reduce the PayAmount when the Employee has Leave that is either Not Paid or has Statutory Pay.\r\nCan only be set to True if the Basis is Monthly (ie, employee is not paid an hourly or daily rate).\r\nIf set to false then you must manually reduce their payment to reflect any Leave"
          },
          "method": {
            "$ref": "#/components/schemas/PayMethod"
          },
          "payCode": {
            "type": "string",
            "description": "If you want the Employees pay to be allocated to a code other than BASIC, specify it here",
            "nullable": true
          },
          "withholdTaxRefundIfPayIsZero": {
            "type": "boolean",
            "description": "If you don't want negative PAYE values when the Gross pay is zero, set this to true"
          },
          "mileageVehicleType": {
            "$ref": "#/components/schemas/MileageVehicleType"
          },
          "mapsMiles": {
            "type": "integer",
            "description": "The number of miles to pay for as Mileage Allowance Payments",
            "format": "int32",
            "nullable": true
          },
          "taxAndNi": {
            "$ref": "#/components/schemas/TaxAndNi"
          },
          "fpsFields": {
            "$ref": "#/components/schemas/FpsFields"
          },
          "regularPayLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayLine"
            },
            "description": "These are used to make additions/deductions to the pay for this Employee.\r\nYou do not need to include Pension, Tax, NI,  Loan Repayments, etc as these will all be automatically created.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This object forms the basis of the Employees payment."
      },
      "PayOptionsImport": {
        "type": "object",
        "properties": {
          "employerIdentifier": {
            "type": "string",
            "description": "Optional. But if one entry has it then all must.\r\nAllows you to import to multiple employers by specifying the Employers AlternativeIdentifier",
            "nullable": true
          },
          "payrollCode": {
            "type": "string",
            "description": "The payroll code of the employee to update",
            "nullable": true
          },
          "payAmount": {
            "type": "number",
            "description": "The amount the Employee is regularly paid each period",
            "format": "double"
          },
          "basis": {
            "$ref": "#/components/schemas/PayBasis"
          },
          "payCode": {
            "type": "string",
            "description": "If you want to override the PayCode used for the Basic Pay then set the code here, otherwise leave this blank and the default will be used.",
            "nullable": true
          },
          "payAmountMultiplier": {
            "type": "number",
            "description": "This property is irrelevant if the basis is Monthly.\r\nBut if the basis is Daily or Hourly then this property sets how many days/hours the employee should be paid for in the period.",
            "format": "double"
          },
          "note": {
            "type": "string",
            "description": "Any note that you'd like to appear on the payslip",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayLine"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This object is used to import payment information for a payrun entry"
      },
      "PayPeriodEventType": {
        "enum": [
          "SubmitForProcessing",
          "SendForApproval",
          "Approval",
          "Finalise",
          "SendPaySlip",
          "SubmitRti"
        ],
        "type": "string",
        "description": "Different events supported for a PaySchedule Period. These events happen a pre-configured number of days before the PaymentDate for that PaySchedulePeriod."
      },
      "PayPeriods": {
        "enum": [
          "Custom",
          "Monthly",
          "FourWeekly",
          "Fortnightly",
          "Weekly",
          "Daily"
        ],
        "type": "string"
      },
      "PayrollValueType": {
        "enum": [
          "BasicPay",
          "Gross",
          "GrossForTax",
          "GrossForNi",
          "EmployerNi",
          "EmployeeNi",
          "EmployerNiOffPayroll",
          "RealTimeClass1ANi",
          "Tax",
          "NetPay",
          "Adjustments",
          "TakeHomePay",
          "NonTaxOrNICPmt",
          "ItemsSubjectToClass1NIC",
          "DednsFromNetPay",
          "Tcp_Tcls",
          "Tcp_Pp",
          "Tcp_Op",
          "FlexiDd_Death",
          "FlexiDd_Death_NonTax",
          "FlexiDd_Pension",
          "FlexiDd_Pension_NonTax",
          "Smp",
          "Spp",
          "Sap",
          "Shpp",
          "Spbp",
          "StudentLoanRecovered",
          "PostgradLoanRecovered",
          "PensionablePay",
          "NonTierablePay",
          "EmployeePensionContribution",
          "EmployerPensionContribution",
          "EmpeePenContribnsNotPaid",
          "EmpeePenContribnsPaid",
          "AttachmentOrderDeductions",
          "CisDeduction",
          "CisVat",
          "CisUmbrellaFee",
          "CisUmbrellaFeePostTax",
          "Pbik",
          "MapsMiles",
          "UmbrellaFee",
          "AppLevyDeduction",
          "PaymentAfterLeaving",
          "TaxOnPaymentAfterLeaving",
          "Ssp",
          "AttachmentOrderAdminFee",
          "EmployeePensionNetPay",
          "EmployeePensionRas",
          "EmployeePensionSalSac",
          "EmployeePensionContributionAvc",
          "Deductions",
          "Additions",
          "PensionableEarnings"
        ],
        "type": "string"
      },
      "PayRun": {
        "type": "object",
        "properties": {
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "taxMonth": {
            "type": "integer",
            "description": "[readonly] The Tax Month that the Payment Date falls in",
            "format": "int32"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "description": "[readonly] Indicates whether this uses first, second, third (etc.) PaySchedule for this PayPeriod.",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "description": "[readonly] The period (i.e, Tax Week or Tax Month) that this PayRun is for.",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "description": "[readonly] The start date of the period this PayRun covers",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "[readonly] The end date of the period this PayRun covers",
            "format": "date"
          },
          "paymentDate": {
            "type": "string",
            "description": "[readonly] The intended date that Employees will be paid, although this can be changed on a per PayRunEntry basis",
            "format": "date"
          },
          "employeeCount": {
            "type": "integer",
            "description": "[readonly] The number of Employees included in this PayRun (including any CIS Subcontractors)",
            "format": "int32"
          },
          "subContractorCount": {
            "type": "integer",
            "description": "[readonly] The number of CIS Subcontractors included in this PayRun",
            "format": "int32"
          },
          "totals": {
            "$ref": "#/components/schemas/PayRunTotals"
          },
          "state": {
            "$ref": "#/components/schemas/PayRunState"
          },
          "isClosed": {
            "type": "boolean",
            "description": "[readonly] Set to True if the PayRun is Finalised and changes can no longer be made",
            "readOnly": true
          },
          "dateClosed": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "autoPilotCloseDate": {
            "type": "string",
            "description": "[readonly] If AutoPilot is enabled in the AutomationSettings for the Employer then this property will tell you when\r\nthe payrun will be automatically closed",
            "format": "date",
            "nullable": true
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "[readonly] The PayRunEntries that make up this PayRun.\r\nThis is populate automatically when you start a PayRun.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This model is right at the very heart of the software.\r\nThere is a PayRun for each period in which people are paid."
      },
      "PayRunChanges": {
        "type": "object",
        "properties": {
          "payRunEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "A list of PayRunEntries where the PayRunEntry itself has been modified and.or the related Employee record was changed",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayRunCostSummary": {
        "type": "object",
        "properties": {
          "tax": {
            "$ref": "#/components/schemas/CostBreakdown"
          },
          "nationalInsurance": {
            "$ref": "#/components/schemas/CostBreakdown"
          }
        },
        "additionalProperties": false,
        "description": "Represents the various components that make up the costs of a PayRun"
      },
      "PayRunCsvType": {
        "enum": [
          "Summary",
          "Lines",
          "PayrollCodeAndNameOnly",
          "ColumnCsvMapping"
        ],
        "type": "string"
      },
      "PayrunEmail": {
        "required": [
          "name",
          "recipientAddress"
        ],
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": "If false then this email won't be sent"
          },
          "name": {
            "maxLength": 75,
            "type": "string",
            "description": "Only used for reference, not included in the email"
          },
          "templateType": {
            "$ref": "#/components/schemas/EmployerTemplateType"
          },
          "recipientAddress": {
            "maxLength": 150,
            "type": "string",
            "description": "The address to which the email should be sent",
            "format": "email"
          },
          "pdfPassword": {
            "maxLength": 50,
            "type": "string",
            "description": "If a value is provided, then all PDFs attached to the email will be encrypted using this password",
            "nullable": true
          },
          "attachPayslips": {
            "type": "boolean",
            "description": "If set to true then Payslips will be attached to the email"
          },
          "payslips_Unemailed": {
            "type": "boolean",
            "description": "If AttachPayslips is true and this property is also true then only payslips that haven't already been sent directly to employees will be attached."
          },
          "payslips_SingleFile": {
            "type": "boolean",
            "description": "If AttachPayslips is true and this property is also true then the payslips will be attached as a single file rather than as separate PDFs,"
          },
          "attachPaymentSummary": {
            "type": "boolean",
            "description": "If set to True then the PaymentSummary report will be attached to the Email"
          },
          "attachP32": {
            "type": "boolean",
            "description": "If set to True then the P32 report will be attached to the email"
          },
          "attachP30": {
            "type": "boolean",
            "description": "If set to True then the P30 report will be attached to the email"
          },
          "attachGrossToNet": {
            "type": "boolean",
            "description": "If set to True then the GrossToNet report will be attached to the email"
          },
          "attachPensionContributions": {
            "type": "boolean",
            "description": "If set to True then the Pensions Contributions report will be attached to the email"
          },
          "attachCostAnalysis": {
            "type": "boolean",
            "description": "If set to True then the Cost Analysis report will be attached to the email"
          },
          "attachCostOfEmployment": {
            "type": "boolean",
            "description": "If set to True then the Cost of Employment report will be attached to the email"
          },
          "attachFullSummaryOfPay": {
            "type": "boolean",
            "description": "If set to True then the Full Summary Of Payment report will be attached to the email"
          },
          "attachBankPayments": {
            "type": "boolean",
            "description": "If set to True then the Bank Payments CSV file will be attached to the email"
          },
          "customSubject": {
            "maxLength": 200,
            "type": "string",
            "description": "If TemplateType is null then you can provide a subject line here to be used for the email",
            "nullable": true
          },
          "customBody": {
            "type": "string",
            "description": "If TemplateType is null then you can provide the body text here to be used for the email",
            "nullable": true
          },
          "customBody_IsHtml": {
            "type": "boolean",
            "description": "If the CustomBody is in HTML format, set this to true."
          },
          "childId": {
            "type": "string",
            "description": "This is nothing but the UniqueId of the model.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "PayrunEmails are sent automatically when a payrun has been finalised"
      },
      "PayRunEntry": {
        "type": "object",
        "properties": {
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "taxMonth": {
            "type": "integer",
            "description": "[readonly] The Tax Month that the Payment Date falls in",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "note": {
            "maxLength": 500,
            "type": "string",
            "description": "Any note that you'd like to appear on the payslip",
            "nullable": true
          },
          "bacsSubReference": {
            "type": "string",
            "description": "[readonly] A randomly generated string for use with the RTI Hash Cross Reference",
            "nullable": true
          },
          "bacsHashCode": {
            "type": "string",
            "description": "[readonly] A Hash Code used for RTI BACS Hash Cross Reference",
            "nullable": true
          },
          "percentageOfWorkingDaysPaidAsNormal": {
            "type": "number",
            "description": "[readonly] If the employee is paid a set amount per period (ie, not an hourly or daily rate) and there is any Leave that is either Not Paid or Statutory Pay then this value\r\nwill give the percentage of working days (based on the Working Pattern) that should be paid as normal.\r\nIf there is no Leave in the period or PayOptions.AutoAdjustForLeave is false, then this will be 1.",
            "format": "double"
          },
          "workingDaysNotPaidAsNormal": {
            "type": "number",
            "description": "[readonly] If PercentageOfWorkingDaysPaidAsNormal has a value other than 1\r\nthen this property will tell you how many working days have been deducted from the basic pay\r\ndue to either being Not Paid or Statutory Pay",
            "format": "double"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "description": "[readonly] Indicates whether this uses the first, second, third (etc) PaySchedule for this PayPeriod.",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "description": "[readonly] The Tax Week or Tax Month number this PayRunEntry relates to",
            "format": "int32"
          },
          "isNewStarter": {
            "type": "boolean",
            "description": "Determines whether or not this Employee will be declared as a new starter on the resulting FPS"
          },
          "unpaidAbsence": {
            "type": "boolean",
            "description": "[readonly] Indicates that there was unpaid absence in the pay period"
          },
          "hasAttachmentOrders": {
            "type": "boolean",
            "description": "[readonly] Indicates that there are AttachmentOrders for this Employee in this entry"
          },
          "paymentDate": {
            "type": "string",
            "description": "The date this payment was or will be made",
            "format": "date"
          },
          "priorPayrollCode": {
            "type": "string",
            "description": "[readonly] If the FPS needs to declare a change of PayId then this will contain the previous code\r\nIt's worked out automatically but can also be set from the Employees EmploymentDetails property.",
            "nullable": true
          },
          "pensionSummary": {
            "$ref": "#/components/schemas/PensionSummary"
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "totals": {
            "$ref": "#/components/schemas/PayRunTotals"
          },
          "periodOverrides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValueOverride"
            },
            "description": "Any calculated values for this period that should be overridden with a different value",
            "nullable": true
          },
          "totalsYtd": {
            "$ref": "#/components/schemas/PayRunTotals"
          },
          "totalsYtdOverrides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValueOverride"
            },
            "description": "Any values of TotalsYtd that should be overridden with a different value",
            "nullable": true
          },
          "forcedCisVatAmount": {
            "type": "number",
            "description": "If this employee is a CIS Subcontractor registered for VAT, we'll automatically work out VAT at the set rate.\r\nIf you want to override this calculations then set this property to anything other than null.",
            "format": "double",
            "nullable": true
          },
          "holidayAccrued": {
            "type": "number",
            "description": "The amount of holiday days accrued in the period.",
            "format": "double"
          },
          "state": {
            "$ref": "#/components/schemas/PayRunState"
          },
          "isClosed": {
            "type": "boolean",
            "description": "[readonly] Set to True if the PayRun is Finalised and changes can no longer be made to the PayRunEntries",
            "readOnly": true
          },
          "manualNi": {
            "type": "boolean",
            "description": "If set to true then you must provide your own value for NationalInsuranceCalculation.\r\nYou'd normally leave this set to false and let us automatically calculate NI amounts."
          },
          "nationalInsuranceCalculation": {
            "$ref": "#/components/schemas/NationalInsuranceCalculation"
          },
          "payrollCodeChanged": {
            "type": "boolean",
            "description": "[readonly] Indicates whether or not the Payroll Code for this Employee has changed since the last FPS",
            "readOnly": true
          },
          "aeNotEnroledWarning": {
            "type": "boolean",
            "description": "[readonly] If true then this Employee needs to be on an Auto Enrolment pension but isn't yet."
          },
          "fps": {
            "$ref": "#/components/schemas/Item"
          },
          "emailId": {
            "type": "string",
            "description": "If the Payslip for this PayRunEntry has been emailed to the employee then the Id for an EmployerEmail will be provided here.\r\nif the value is all zeroes then the email is in the process of being created.",
            "format": "uuid",
            "nullable": true
          },
          "recievingOffsetPay": {
            "type": "boolean",
            "description": "If the pay is being topped up due to an applied Leave having the offset value set to true then\r\nthis will be set to true"
          },
          "paymentAfterLeaving": {
            "type": "boolean",
            "description": "[readonly] If this payment is for an employee that has left then this is set to true."
          },
          "umbrellaPayment": {
            "$ref": "#/components/schemas/UmbrellaPayment"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          },
          "personalDetails": {
            "$ref": "#/components/schemas/PersonalDetails"
          },
          "employmentDetails": {
            "$ref": "#/components/schemas/EmploymentDetails"
          },
          "payOptions": {
            "$ref": "#/components/schemas/PayOptions"
          }
        },
        "additionalProperties": false,
        "description": "A PayRun contains multiple PayRunEntries, one for each Employee that is being paid.\r\nThe value for <code>PersonalDetails</code> and <code>EmploymentDetails</code> is copied from the Employee record.\r\nSo to change them you should update the Employee, not the PayRunEntry.\r\nChanges made to the Employee are only reflected whilst the PayRun is still open.\r\nOnce you finalise and close the PayRun then a snapshot is taken of these values which is stored with the PayRunEntry for future reference."
      },
      "PayRunJournal": {
        "type": "object",
        "properties": {
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayRunSummaryLine"
            },
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "[readonly] The PaymentDate from the PayRun",
            "format": "date"
          },
          "title": {
            "type": "string",
            "description": "[readonly] The status of the task for posting this journal to an ExternalDataProvider",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "statusMessage": {
            "type": "string",
            "description": "[readonly] A message to elaborate on the Status",
            "nullable": true
          },
          "link": {
            "type": "string",
            "description": "[readonly] If available, a link to the journal in the ExternalDataProvider",
            "nullable": true
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "description": "[readonly]",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "description": "[readonly]",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PayRunPayment": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PayeeType"
          },
          "payee": {
            "$ref": "#/components/schemas/Item"
          },
          "date": {
            "type": "string",
            "description": "[readonly] The date the payment is to be made",
            "format": "date"
          },
          "method": {
            "$ref": "#/components/schemas/PayMethod"
          },
          "amount": {
            "type": "number",
            "description": "[readonly] The amount to pay",
            "format": "double"
          },
          "reference": {
            "type": "string",
            "description": "[readonly] The period the payment is for",
            "nullable": true
          },
          "bankDetails": {
            "$ref": "#/components/schemas/BankDetails"
          },
          "bacsHash": {
            "type": "string",
            "description": "[readonly] if paying by Credit and you've enabled BacsHash then this will contain the BacsHash included on the FPS",
            "nullable": true
          },
          "bacsSubReference": {
            "type": "string",
            "description": "[readonly] if paying by Credit and you've enabled BacsHash then this will contain the BacsSubReference included on the FPS",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayrunPaymentsReport": {
        "type": "object",
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayRunPayment"
            },
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "statusMessage": {
            "type": "string",
            "description": "[readonly] A message to elaborate on the Status",
            "nullable": true
          },
          "link": {
            "type": "string",
            "description": "[readonly]  If available, a link to the payments in an ExternalDataProvider",
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Item"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "periodTo": {
            "type": "integer",
            "format": "int32"
          },
          "startPeriodName": {
            "type": "string",
            "nullable": true
          },
          "endPeriodName": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false,
        "description": "After finalising a PayRun, employees need to actually be paid.\r\nThis model is returned by the Reports API and is used to provide details of a payment that needs to be made."
      },
      "PayrunPaymentsReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/PayrunPaymentsReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "PayRunState": {
        "enum": [
          "Open",
          "SubmittedForProcessing",
          "Processing",
          "AwaitingApproval",
          "Approved",
          "Finalised"
        ],
        "type": "string",
        "description": "The state of the payrun. You would set this value when updating a payrun to finalise or re-open it.\r\nOther states are used with Bureau functionality which isn't currently generally available."
      },
      "PayRunStateChange": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/PayRunState"
          },
          "reason": {
            "$ref": "#/components/schemas/PayRunStateChangeReason"
          },
          "reasonText": {
            "maxLength": 300,
            "type": "string",
            "description": "A free-form text field for a reason for the change of state.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayRunStateChangeReason": {
        "enum": [
          "Other",
          "AdditionalDataNotSubmitted",
          "ChangeToOriginalData",
          "PayBureauError"
        ],
        "type": "string"
      },
      "PayRunSummaryLine": {
        "type": "object",
        "properties": {
          "nominalCode": {
            "type": "string",
            "description": "[readonly] If you've set up NominalCodeMapping then the relevant Nominal code for the PayCode will be shown here.",
            "nullable": true
          },
          "departmentCode": {
            "type": "string",
            "description": "[readonly] If the journal is split by department then the relevant department code is shown here.",
            "nullable": true
          },
          "nominalName": {
            "type": "string",
            "description": "[readonly] As above",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "[readonly] A description of what this line summarises.",
            "nullable": true
          },
          "qty": {
            "type": "number",
            "description": "[readonly] If the PayCode is a Multiplier code then this will contain the number of days/hours",
            "format": "double",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "[readonly] The total value for this line.",
            "format": "double"
          },
          "payCode": {
            "$ref": "#/components/schemas/PayCode"
          }
        },
        "additionalProperties": false,
        "description": "An array of this model is used to represent a summary of a PayRun.\r\nThis would typically be used for creating accounting entries for the PayRun."
      },
      "PayRunSummaryLineIEnumerableReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayRunSummaryLine"
            },
            "description": "[readonly] If the type is application.json then this will contain a JSON representation of the relevant model",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "PayRunTotals": {
        "type": "object",
        "properties": {
          "basicPay": {
            "type": "number",
            "description": "[readonly] The amount to be paid to this Employee as a result of the PayOptions that have been set",
            "format": "double"
          },
          "gross": {
            "type": "number",
            "description": "[readonly] Gross pay",
            "format": "double"
          },
          "grossForNi": {
            "type": "number",
            "description": "[readonly] The amount of the Gross that is subject to NI",
            "format": "double"
          },
          "grossNotSubjectToEmployersNi": {
            "type": "number",
            "description": "[readonly] The amount of the Gross that is not subject to Employers NI.\r\nThis is the same as GrossForNI where the employees NI Table has an Er contribution",
            "format": "double"
          },
          "grossForTax": {
            "type": "number",
            "description": "[readonly] The amount of the Gross that is subject to PAYE",
            "format": "double"
          },
          "employerNi": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "employeeNi": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "employerNiOffPayroll": {
            "type": "number",
            "description": "[readonly] The amount included in EmployerNi that is in relation to Off-Payroll Workers",
            "format": "double"
          },
          "realTimeClass1ANi": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "tax": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "netPay": {
            "type": "number",
            "description": "[readonly] The Net Pay for this Employee",
            "format": "double"
          },
          "adjustments": {
            "type": "number",
            "description": "[readonly] The value of adjustments made to the Net Pay (Non taxable/NIable additions/deductions)",
            "format": "double"
          },
          "additions": {
            "type": "number",
            "description": "The value of all additions.  This minus Deductions should equal TakeHomePay",
            "format": "double"
          },
          "deductions": {
            "type": "number",
            "description": "The value of all deductions.  Additions minus This value should equal TakeHomePay",
            "format": "double"
          },
          "takeHomePay": {
            "type": "number",
            "description": "[readonly] The amount this Employee takes home",
            "format": "double"
          },
          "nonTaxOrNICPmt": {
            "type": "number",
            "description": "[readonly] The value of any payments being made to this Employee that aren't being subjected to PAYE or NI",
            "format": "double"
          },
          "itemsSubjectToClass1NIC": {
            "type": "number",
            "description": "[readonly] Items subject to Class 1 NIC but not taxed under PAYE regulations excluding pension contributions",
            "format": "double"
          },
          "dednsFromNetPay": {
            "type": "number",
            "description": "[readonly] The value of any deductions being made to the Net Pay for this Employee",
            "format": "double"
          },
          "tcp_Tcls": {
            "type": "number",
            "description": "[readonly] Value of payments marked as Trivial Commutation Payment (A - TCLS)",
            "format": "double"
          },
          "tcp_Pp": {
            "type": "number",
            "description": "[readonly] Value of payments marked as Trivial Commutation Payment (B - Personal Pension)",
            "format": "double"
          },
          "tcp_Op": {
            "type": "number",
            "description": "[readonly] Value of payments marked as Trivial Commutation Payment (C - Occupational Pension)",
            "format": "double"
          },
          "flexiDd_Death": {
            "type": "number",
            "description": "[readonly] Value of payments marked as flexibly accessing death benefit (taxable)",
            "format": "double"
          },
          "flexiDd_Death_NonTax": {
            "type": "number",
            "description": "[readonly] Value of payments marked as flexibly accessing death benefit (non taxable)",
            "format": "double"
          },
          "flexiDd_Pension": {
            "type": "number",
            "description": "[readonly] Value of payments marked as flexibly accessing pension (taxable)",
            "format": "double"
          },
          "flexiDd_Pension_NonTax": {
            "type": "number",
            "description": "[readonly] Value of payments marked as flexibly accessing pension (non taxable)",
            "format": "double"
          },
          "smp": {
            "type": "number",
            "description": "[readonly] Statutory Maternity Pay",
            "format": "double"
          },
          "spp": {
            "type": "number",
            "description": "[readonly] Statutory Paternity Pay",
            "format": "double"
          },
          "sap": {
            "type": "number",
            "description": "[readonly] Statutory Adoption Pay",
            "format": "double"
          },
          "shpp": {
            "type": "number",
            "description": "[readonly] Statutory Shared Parental Pay",
            "format": "double"
          },
          "spbp": {
            "type": "number",
            "description": "[readonly] Statutory Parental Bereavement Pay",
            "format": "double"
          },
          "ssp": {
            "type": "number",
            "description": "[readonly] Statutory Sick  Pay",
            "format": "double"
          },
          "studentLoanRecovered": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "postgradLoanRecovered": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "pensionableEarnings": {
            "type": "number",
            "description": "[readonly] The amount of the Gross that is subject to Pension Deductions.\r\nIf the Pension Scheme uses Qualifying Earnings (upper and lower limits) then this value is before those are applied",
            "format": "double"
          },
          "pensionablePay": {
            "type": "number",
            "description": "[readonly] The amount of the Gross that pension calculations are based on after taking into account Upper and Lower Limits for the WorkerGroup.",
            "format": "double"
          },
          "nonTierablePay": {
            "type": "number",
            "description": "[readonly] The value of any pay that shouldn't count towards determining a pension tier.",
            "format": "double"
          },
          "employeePensionContribution": {
            "type": "number",
            "description": "[readonly] The value of the Pension Contribution being made by this Employee, excluding any Additional Voluntary Contributions",
            "format": "double"
          },
          "employeePensionContributionAvc": {
            "type": "number",
            "description": "[readonly] The value of the Pension Contribution being made by this Employee as an Additional Voluntary Contribution",
            "format": "double"
          },
          "employerPensionContribution": {
            "type": "number",
            "description": "[readonly] The value of the Pension Contribution being made by the Employer for this Employee",
            "format": "double"
          },
          "empeePenContribnsNotPaid": {
            "type": "number",
            "description": "[readonly] Value of employee pension contributions that are not paid under 'net pay arrangements', including any AVC",
            "format": "double"
          },
          "empeePenContribnsPaid": {
            "type": "number",
            "description": "[readonly] Value of employee pension contributions paid under 'net pay arrangements', including any AVC",
            "format": "double"
          },
          "attachmentOrderDeductions": {
            "type": "number",
            "description": "[readonly] Value of deductions made due to AttachmentOrders",
            "format": "double"
          },
          "cisDeduction": {
            "type": "number",
            "description": "[readonly] Value of any CIS Deduction made",
            "format": "double"
          },
          "cisVat": {
            "type": "number",
            "description": "[readonly] Value of any VAT paid to CIS Subcontractor",
            "format": "double"
          },
          "cisUmbrellaFee": {
            "type": "number",
            "description": "[readonly] Value of any pre-tax fee charged to the CIS Subcontractor for processing the payment",
            "format": "double"
          },
          "cisUmbrellaFeePostTax": {
            "type": "number",
            "description": "[readonly] Value of any post-tax fee charged to the CIS Subcontractor for processing the payment",
            "format": "double"
          },
          "pbik": {
            "type": "number",
            "description": "[readonly] Value of any Payrolled Benefits In Kind",
            "format": "double"
          },
          "mapsMiles": {
            "type": "integer",
            "description": "[readonly] The number of miles paid for Mileage Allowance Payments",
            "format": "int32"
          },
          "umbrellaFee": {
            "type": "number",
            "description": "[readonly] Value of any Umbrella fee charged for processing the payment",
            "format": "double"
          },
          "appLevyDeduction": {
            "type": "number",
            "description": "[readonly] Value of any Apprenticeship Levy fee deducted for processing the umbrella payment",
            "format": "double"
          },
          "paymentAfterLeaving": {
            "type": "number",
            "description": "[readonly] Payment After Leaving",
            "format": "double"
          },
          "taxOnPaymentAfterLeaving": {
            "type": "number",
            "description": "[readonly] Tax On Payment After Leaving",
            "format": "double"
          },
          "nilPaid": {
            "type": "integer",
            "description": "[readonly] The number of employees with NilPaid on the PayRun",
            "format": "int32"
          },
          "leavers": {
            "type": "integer",
            "description": "[readonly] The number of Leavers on ths PayRun",
            "format": "int32"
          },
          "starters": {
            "type": "integer",
            "description": "[readonly] The number of Starters on this PayRun",
            "format": "int32"
          },
          "totalCost": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "recoverableAmounts": {
            "$ref": "#/components/schemas/RecoverableAmounts"
          },
          "costSummary": {
            "$ref": "#/components/schemas/PayRunCostSummary"
          }
        },
        "additionalProperties": false,
        "description": "Used to represent totals for a PayRun or PayRunEntry.\r\nIf a value is 0 then it will not be shown in the JSON."
      },
      "PaySchedule": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "A descriptive name for this PaySchedule",
            "nullable": true
          },
          "ordinal": {
            "type": "integer",
            "description": "[readonly] Indicates whether this is first, second, third (etc) PaySchedule for this PayPeriod.",
            "format": "int32"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "firstPeriodEndDate": {
            "type": "string",
            "description": "The last day of the first pay period",
            "format": "date"
          },
          "firstPaymentDate": {
            "type": "string",
            "description": "The first payment date",
            "format": "date"
          },
          "paymentDateType": {
            "$ref": "#/components/schemas/PaymentDateType"
          },
          "periodLengths": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Only applicable for PayPeriod of Custom. Defines the length of each period",
            "nullable": true
          },
          "highGrossPay": {
            "type": "number",
            "description": "A gross pay amount considered high for this PaySchedule",
            "format": "double"
          },
          "highNetPay": {
            "type": "number",
            "description": "A net pay amount considered high for this PaySchedule",
            "format": "double"
          },
          "periodEventsConfig": {
            "type": "object",
            "properties": {
              "SubmitForProcessing": {
                "type": "integer",
                "format": "int32"
              },
              "SendForApproval": {
                "type": "integer",
                "format": "int32"
              },
              "Approval": {
                "type": "integer",
                "format": "int32"
              },
              "Finalise": {
                "type": "integer",
                "format": "int32"
              },
              "SendPaySlip": {
                "type": "integer",
                "format": "int32"
              },
              "SubmitRti": {
                "type": "integer",
                "format": "int32"
              }
            },
            "additionalProperties": false,
            "description": "Only applicable if Bureau functionality is enabled. Defines the number of days each event occurs before the Payment Date.",
            "nullable": true
          },
          "hasOpenPayRunPeriod": {
            "type": "boolean",
            "description": "[readonly] Will be true if the employer currently has an open PayRun for this PayPeriod"
          },
          "lastPeriodEndDate": {
            "type": "string",
            "description": "[readonly] The end date of the most recent PayRun on this schedule",
            "format": "date",
            "nullable": true
          },
          "lastPeriodNumber": {
            "type": "integer",
            "description": "[readonly] The period number of the most recent PayRun on this schedule",
            "format": "int32",
            "nullable": true
          },
          "employeeCount": {
            "type": "integer",
            "description": "[readonly] The number of employees paid with this PaySchedule",
            "format": "int32"
          },
          "isRequired": {
            "type": "boolean",
            "description": "[readonly] Whether or not this PaySchedule is required for the employer, ie: they have employees to be paid on this PaySchedule",
            "readOnly": true
          },
          "isConfigured": {
            "type": "boolean",
            "description": "[readonly] Whether or not this PaySchedule has been configured and is ready for use"
          },
          "isYearCompleted": {
            "type": "boolean",
            "description": "[readonly] Returns true if all PayRuns for this PaySchedule in the TaxYear have been completed"
          },
          "yearEndTasks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "[readonly] A list of actions that need to be completed for this PaySchedule before this TaxYear can be finalised",
            "nullable": true
          },
          "payRuns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "[readonly] Details of PayRuns for this PaySchedule",
            "nullable": true
          },
          "currentPayRun": {
            "$ref": "#/components/schemas/Item"
          },
          "nextPayRun": {
            "$ref": "#/components/schemas/PayRun"
          }
        },
        "additionalProperties": false
      },
      "PaySchedulePeriod": {
        "type": "object",
        "properties": {
          "paySchedulePeriodEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaySchedulePeriodEvent"
            },
            "description": "[readonly] List of all the events in this PaySchedulePeriod",
            "nullable": true
          },
          "period": {
            "type": "integer",
            "description": "[readonly] The Period number of the PaySchedulePeriod.",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "description": "[readonly] The start date of the PaySchedulePeriod",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "[readonly] The end date of the PaySchedulePeriod",
            "format": "date"
          },
          "paymentDate": {
            "type": "string",
            "description": "The payment date of the PaySchedulePeriod.",
            "format": "date"
          },
          "unadjustedPaymentDate": {
            "type": "string",
            "description": "The payment date of the PaySchedulePeriod when not accounting for weekends, bank hols or ad-hoc alterations to the pay schedule",
            "format": "date"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PaySchedulePeriodEvent": {
        "type": "object",
        "properties": {
          "payPeriodEventType": {
            "$ref": "#/components/schemas/PayPeriodEventType"
          },
          "eventDate": {
            "type": "string",
            "description": "The expected date and time of the event.",
            "format": "date"
          },
          "actualEventDate": {
            "type": "string",
            "description": "The actual date and time when the event was completed.",
            "format": "date",
            "nullable": true
          },
          "isOverDue": {
            "type": "boolean",
            "description": "Returns true if its past the event date.",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "An Event within a PaySchedulePeriod. The event could be scheduled x days before PaymentDate."
      },
      "Payslip": {
        "type": "object",
        "properties": {
          "isClosed": {
            "type": "boolean",
            "description": "[readonly] Indicates if the Payrun has been finalised"
          },
          "period": {
            "type": "string",
            "description": "[readonly] A description of the period that Payslip relates to.",
            "nullable": true
          },
          "from": {
            "type": "string",
            "description": "[readonly] The start date of the period this Payslip covers.",
            "format": "date"
          },
          "to": {
            "type": "string",
            "description": "[readonly] The end date of the period this Payslip covers.",
            "format": "date"
          },
          "paymentDate": {
            "type": "string",
            "description": "[readonly] The date the Employee will be paid on",
            "format": "date"
          },
          "note": {
            "type": "string",
            "description": "[readonly] Any note that should appear on the payslip",
            "nullable": true
          },
          "allowanceNote": {
            "type": "string",
            "description": "[readonly] Details of remaining allowance to show on payslip",
            "nullable": true
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "logoUrl": {
            "type": "string",
            "description": "[readonly] The Logo to include on the payslip",
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Item"
          },
          "employerAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "hmrcDetails": {
            "$ref": "#/components/schemas/HmrcDetails"
          },
          "payOptions": {
            "$ref": "#/components/schemas/PayOptions"
          },
          "employmentDetails": {
            "$ref": "#/components/schemas/EmploymentDetails"
          },
          "personalDetails": {
            "$ref": "#/components/schemas/PersonalDetails"
          },
          "totals": {
            "$ref": "#/components/schemas/PayRunTotals"
          },
          "totalsYtd": {
            "$ref": "#/components/schemas/PayRunTotals"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayslipLine"
            },
            "description": "[readonly] The lines to display on the Payslip",
            "nullable": true
          },
          "employerNi": {
            "type": "number",
            "description": "[readonly] The Employer NI Contribution amount",
            "format": "double"
          },
          "employerPensionContribs": {
            "type": "number",
            "description": "[readonly] AThe Employer Pension Contribution Amount",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "If you don't want to use our customisable PDFs for Payslips then you can retrieve the raw data used to create a Payslip.\r\nThis is the model you will be provided with for each employee."
      },
      "PayslipCustomisation": {
        "type": "object",
        "properties": {
          "custom": {
            "type": "boolean",
            "description": "Whether or not you are customising the Payslip.\r\nThis should always be true if you are providing any other values."
          },
          "includeLogo": {
            "type": "boolean",
            "description": "Whether or not to include the employer logo on the payslip."
          },
          "customCssOption": {
            "$ref": "#/components/schemas/ReportCustomCssOption"
          },
          "customCss": {
            "maxLength": 2500,
            "type": "string",
            "nullable": true
          },
          "removeYtd": {
            "type": "boolean",
            "description": "Whether or not to remove the YTD column"
          },
          "includeEmployerAddress": {
            "type": "boolean",
            "description": "Whether or not to include the employer address"
          },
          "useUmbrellaFormat": {
            "type": "boolean",
            "description": "If true then the format the payslip will include details of the Umbrella Payment as well as employer costs"
          },
          "filename": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "includeDepartment": {
            "type": "boolean",
            "description": "Whether or not to include the primary department of the employee on the payslip"
          },
          "includeHealthAndSocialCareMessage": {
            "type": "boolean",
            "description": "Whether or not to include health and social car message"
          },
          "includeBenefits": {
            "type": "boolean",
            "description": "Whether or not to include any payrolled benefits"
          },
          "paperSize": {
            "$ref": "#/components/schemas/PdfPaperSize"
          },
          "orientation": {
            "$ref": "#/components/schemas/PdfPaperOrientation"
          },
          "margins": {
            "$ref": "#/components/schemas/PdfPaperMargins"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Used to represent any customisations you make to the look of Payslip PDFs.\r\nThis is covered in detail in the Guides section."
      },
      "PayslipLine": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PayslipLineType"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "secondaryDescription": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "number",
            "format": "double"
          },
          "multiplier": {
            "type": "number",
            "description": "[readonly] If the Code is a multiplier code then this is the multiplier. Value has already been calculated so this is just for reference",
            "format": "double",
            "nullable": true
          },
          "attachmentOrderId": {
            "type": "string",
            "description": "[readonly] The Id of the associated AttachmentOrder. Only included if the Code is AEO",
            "format": "uuid",
            "nullable": true
          },
          "pensionId": {
            "type": "string",
            "description": "[readonly] The Id of the associated Pension. Only included if the Code is PENSION, PENSIONSS or PENSIONRAS",
            "format": "uuid",
            "nullable": true
          },
          "loanId": {
            "type": "string",
            "description": "[readonly] The Id of the associated Loan, if any.",
            "format": "uuid",
            "nullable": true
          },
          "currencySymbol": {
            "type": "string",
            "nullable": true
          },
          "formattedValue": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isNetToGross": {
            "type": "boolean",
            "description": "If the PayLine is a fixed ammount addition without multiplier then this property may be set to true so that the amount of the addition to be considered a take home pay target."
          },
          "targetNetToGrossValue": {
            "type": "number",
            "description": "The orginal net fixed addition amount that is considered to be a take home pay target.",
            "format": "double",
            "nullable": true
          },
          "hasSecondaryDescription": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PayslipLineType": {
        "enum": [
          "BasicPay",
          "Gross",
          "Net",
          "Nic",
          "Tax",
          "Cis"
        ],
        "type": "string"
      },
      "PayslipReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/Payslip"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "PdfPaperMargins": {
        "type": "object",
        "properties": {
          "top": {
            "type": "number",
            "format": "double"
          },
          "right": {
            "type": "number",
            "format": "double"
          },
          "bottom": {
            "type": "number",
            "format": "double"
          },
          "left": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PdfPaperOrientation": {
        "enum": [
          "Landscape",
          "Portrait"
        ],
        "type": "string"
      },
      "PdfPaperSize": {
        "enum": [
          "Letter",
          "LetterSmall",
          "A4",
          "A4Small",
          "A5"
        ],
        "type": "string"
      },
      "PdfPasswordType": {
        "enum": [
          "InitialsAndDob",
          "NiNumber",
          "Custom"
        ],
        "type": "string"
      },
      "Pension": {
        "type": "object",
        "properties": {
          "contributionLevelType": {
            "$ref": "#/components/schemas/PensionContributionLevelType"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          },
          "pensionSchemeId": {
            "type": "string",
            "format": "uuid"
          },
          "pensionScheme": {
            "$ref": "#/components/schemas/PensionScheme"
          },
          "workerGroupId": {
            "type": "string",
            "format": "uuid"
          },
          "workerGroup": {
            "$ref": "#/components/schemas/WorkerGroup"
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "memberReferenceNumber": {
            "maxLength": 25,
            "type": "string",
            "nullable": true
          },
          "overrideContributions": {
            "type": "boolean",
            "description": "If this is set to true then the Contributions levels set for the WorkerGroup will be replaced with the values provided here"
          },
          "employeeContribution": {
            "type": "number",
            "description": "The amount the employee contributes towards the pension. Could be a percentage or a fixed amount depending on EmployeeContributionIsPercentage.\r\nThis is read-only if OverrideContributions is false",
            "format": "double"
          },
          "employeeContributionIsPercentage": {
            "type": "boolean",
            "description": "Determines whether the Value of the EmployeeContribution is a fixed amount or a percentage,"
          },
          "employerContribution": {
            "type": "number",
            "description": "The amount the employer contributes towards the pension. Could be a percentage or a fixed amount depending on EmployerContributionIsPercentage.\r\nThis is read-only if OverrideContributions is false",
            "format": "double"
          },
          "employerContributionIsPercentage": {
            "type": "boolean",
            "description": "Determines whether the Value of the EmployerContribution is a fixed amount or a percentage,"
          },
          "employerContributionTopUpPercentage": {
            "type": "number",
            "description": "Increase Employer Contribution by this percentage of the Employee Contribution",
            "format": "double"
          },
          "isAeQualifyingScheme": {
            "type": "boolean",
            "description": "[readonly] Whether or not the associated PensionScheme is a Qualifying Scheme for AutoEnrolment"
          },
          "isTeachersPension": {
            "type": "boolean",
            "description": "[readonly] Whether or not the associated PensionScheme is a Teachers' Pension (determined by its CsvFormat)"
          },
          "aeStatusAtJoining": {
            "$ref": "#/components/schemas/AeStatus"
          },
          "externalEmployeeId": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "additionalVoluntaryContribution": {
            "type": "number",
            "description": "Any additional voluntary amount the employer contributes towards the pension. Could be a percentage or a fixed amount depending on AvcIsPercentage.",
            "format": "double"
          },
          "avcIsPercentage": {
            "type": "boolean",
            "description": "Determines whether the Value of the Additional Voluntary Contribution is a fixed amount or a percentage,"
          },
          "exitViaProvider": {
            "type": "boolean",
            "readOnly": true
          },
          "teachersPensionDetails": {
            "$ref": "#/components/schemas/TeachersPensionDetails"
          },
          "forcedTier": {
            "type": "string",
            "description": "If the WorkerGroup ContributionLevelType is a Tiered Scheme then you can specify the name of the tier to force the employee on to.\r\nIf none is specified then the Tier is determined by the earnings in the period",
            "nullable": true
          },
          "forceEnrolment": {
            "type": "boolean",
            "description": "If the PensionScheme is connected to an ExternalDataProvider that supports enrolment then setting this to true will force this employee to be enrolled with the next submission."
          },
          "autoEnrolled": {
            "type": "boolean",
            "description": "[readonly] Is True if the employee joined this Pension due to an AutoEnrolment action"
          }
        },
        "additionalProperties": false
      },
      "PensionAdministrator": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "email": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "telephone": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PensionContributionLevelType": {
        "enum": [
          "UserDefined",
          "StatutoryMinimum",
          "Nhs2015",
          "Tp2020"
        ],
        "type": "string"
      },
      "PensionContributionsSubmission": {
        "type": "object",
        "properties": {
          "employerId": {
            "type": "integer",
            "format": "int32"
          },
          "payRunId": {
            "type": "integer",
            "format": "int32"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "schemeId": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "statusMessage": {
            "type": "string",
            "nullable": true
          },
          "submissionData": {
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "This model is used to track submission of Pension Contributions to an external data provider."
      },
      "PensionCsvFormat": {
        "enum": [
          "Papdis",
          "Nest",
          "NowPensions",
          "TeachersPensionMdc",
          "TeachersPensionMcr"
        ],
        "type": "string"
      },
      "PensionerPayroll": {
        "type": "object",
        "properties": {
          "inReceiptOfPension": {
            "type": "boolean",
            "description": "If set to true then the FPS will have the OccPenInd flag set to 'yes'"
          },
          "bereaved": {
            "type": "boolean",
            "description": "Indicator that Occupational Pension is being paid because they are a recently bereaved Spouse/Civil Partner"
          },
          "amount": {
            "type": "number",
            "description": "Annual amount of occupational pension",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PensionProvider": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "accountNo": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "portal": {
            "maxLength": 100,
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "website": {
            "maxLength": 100,
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "telephone": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "papdisVersion": {
            "$ref": "#/components/schemas/PapdisVersion"
          },
          "papdisProviderId": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          },
          "papdisEmployerId": {
            "maxLength": 40,
            "type": "string",
            "nullable": true
          },
          "csvFormat": {
            "$ref": "#/components/schemas/PensionCsvFormat"
          },
          "excludeNilPaidFromContributions": {
            "type": "boolean",
            "description": "If we're sending contributions to an external provider then we'll include all employees that were on the payrun.\r\nIf you want to exclude employees that don't have any contributions to report then set this to true."
          },
          "payPeriodDateAdjustment": {
            "type": "integer",
            "description": "If you need to adjust the reported dates of the contributions then you can do so by setting a non-zero value here.\r\nA negative value of will move the date back in time.",
            "format": "int32"
          },
          "miscBoolean1": {
            "type": "boolean",
            "description": "This field has different uses dependent on the ExternalDataProvider, if any.\r\nFor Nest, it indicates whether or not contributions are reported as \"Tax Weekly/Monthly\" rather than just \"Weekly/Monthly\""
          },
          "miscBoolean2": {
            "type": "boolean",
            "description": "This field has different uses dependent on the ExternalDataProvider, if any.\r\nFor Nest, it indicates whether or not to approve payments after submitting contributions"
          },
          "miscString1": {
            "maxLength": 50,
            "type": "string",
            "description": "This field has different uses dependent on the ExternalDataProvider, if any.\r\nFor Nest, it dictates the PaymentSource.",
            "nullable": true
          },
          "miscString2": {
            "maxLength": 50,
            "type": "string",
            "description": "This field has different uses dependent on the ExternalDataProvider, if any.",
            "nullable": true
          },
          "optOutWindow": {
            "type": "integer",
            "description": "The number of days or months that an employee has to Opt out after being enrolled",
            "format": "int32"
          },
          "optOutWindowIsMonths": {
            "type": "boolean",
            "description": "Determines whether the value given for OptOutWindow is in Months (true) or days (false)"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PensionRule": {
        "enum": [
          "ReliefAtSource",
          "SalarySacrifice",
          "NetPayArrangement"
        ],
        "type": "string"
      },
      "PensionScheme": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 150,
            "type": "string"
          },
          "provider": {
            "$ref": "#/components/schemas/PensionProvider"
          },
          "administrator": {
            "$ref": "#/components/schemas/PensionAdministrator"
          },
          "pensionRule": {
            "$ref": "#/components/schemas/PensionRule"
          },
          "qualifyingScheme": {
            "type": "boolean",
            "description": "Set to true if this is a Qualifying Scheme for Auto Enrolment"
          },
          "disableAeLetters": {
            "type": "boolean",
            "description": "Set to true if the provider deals with AutoEnrolment Letters and therefore the system should not generate them"
          },
          "subtractBasicRateTax": {
            "type": "boolean"
          },
          "payMethod": {
            "$ref": "#/components/schemas/PayMethod"
          },
          "bankDetails": {
            "$ref": "#/components/schemas/BankDetails"
          },
          "useCustomPayCodes": {
            "type": "boolean",
            "description": "If set to true then rather than using the setting on the PayCode to determine if the pay is pensionable\r\nwe'll instead treat it as pensionable if the Code is included in CustomPayCodes"
          },
          "customPayCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If UseCustomPayCodes is set to true then this contains a list of PayCodes.Code\r\nthat we'll treat as being pensionable.",
            "nullable": true
          },
          "workerGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkerGroup"
            },
            "description": "A list of WorkerGroups for this Pension. There must always be at least one WorkerGroup",
            "nullable": true
          },
          "externalDataProviderId": {
            "$ref": "#/components/schemas/ExternalDataProviderId"
          },
          "externalDataCompany": {
            "$ref": "#/components/schemas/ExternalDataCompany"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PensionSelection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          },
          "pensionSchemeId": {
            "type": "string",
            "format": "uuid"
          },
          "pensionScheme": {
            "$ref": "#/components/schemas/PensionScheme"
          },
          "workerGroupId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "PensionSummary": {
        "type": "object",
        "properties": {
          "pensionId": {
            "type": "string",
            "description": "[readonly] The Id of the Pension.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "[readonly] The name of the PensionScheme to which contributions have been made.",
            "nullable": true
          },
          "pensionSchemeId": {
            "type": "string",
            "description": "[readonly] The Id of the PensionScheme.",
            "format": "uuid"
          },
          "startDate": {
            "type": "string",
            "description": "[readonly]",
            "format": "date"
          },
          "workerGroupId": {
            "type": "string",
            "description": "[readonly] The Id of the WorkerGroup.",
            "format": "uuid"
          },
          "pensionRule": {
            "$ref": "#/components/schemas/PensionRule"
          },
          "papdisPensionProviderId": {
            "type": "string",
            "description": "[readonly] Papdis information from the PensionScheme",
            "nullable": true
          },
          "papdisEmployerId": {
            "type": "string",
            "description": "[readonly] Papdis information from the PensionScheme",
            "nullable": true
          },
          "employeePensionContributionMultiplier": {
            "type": "number",
            "description": "[readonly] If the PensionScheme is set to SubtractBasicRateTax then this value  is used to reduce the contribution amount.\r\nOtherwise it is set as 1.",
            "format": "double"
          },
          "additionalVoluntaryContribution": {
            "type": "number",
            "description": "[readonly] Any Additional Voluntary Contribution the Employee has chosen to make\r\nOtherwise it is set as 1.",
            "format": "double"
          },
          "avcIsPercentage": {
            "type": "boolean",
            "description": "[readonly] Determines whether the Value of the Additional Voluntary Contribution is a fixed amount or a percentage,"
          },
          "autoEnrolled": {
            "type": "boolean",
            "description": "[readonly] Any Additional Voluntary Contribution the Employee has chosen to make\r\nOtherwise it is set as 1."
          },
          "workerGroup": {
            "$ref": "#/components/schemas/WorkerGroup"
          },
          "forcedTier": {
            "type": "string",
            "description": "[readonly] If the WorkerGroup ContributionLevelType is a Tiered Scheme then the name of the tier to force the employee on to may be specified.\r\nIf none is specified then the Tier is determined by the earnings in the period",
            "nullable": true
          },
          "tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TieredPensionRate"
            },
            "nullable": true
          },
          "assumedPensionablePay": {
            "type": "number",
            "description": "[readonly] Assumed Pensionable Pay. If the employee is receiving any Statutory Leave that has an AssumedPensionablePay value set\r\nthen it'll be shown here.",
            "format": "double",
            "nullable": true
          },
          "pensionablePayCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "[readonly] If the pension scheme is set to override the Pensionale PayCodes, then this is what they've been set to.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "If a PayRunEntry contains pension contributions then it'll also include a PensionSummary model \r\ngiving further information about the Pension Scheme and the contributions made"
      },
      "PeriodValue": {
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "The date when these period values are effective",
            "format": "date",
            "nullable": true
          },
          "annualValue": {
            "type": "number",
            "description": "The Annual value",
            "format": "double"
          },
          "periodValues": {
            "type": "object",
            "properties": {
              "Custom": {
                "type": "number",
                "format": "double"
              },
              "Monthly": {
                "type": "number",
                "format": "double"
              },
              "FourWeekly": {
                "type": "number",
                "format": "double"
              },
              "Fortnightly": {
                "type": "number",
                "format": "double"
              },
              "Weekly": {
                "type": "number",
                "format": "double"
              },
              "Daily": {
                "type": "number",
                "format": "double"
              }
            },
            "additionalProperties": false,
            "description": "Period values for different pay periods",
            "nullable": true
          },
          "midYearChanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PeriodValue"
            },
            "description": "Any optional changes to the period values that are effective from a specified date in the middle of a tax year",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PersonalDetails": {
        "required": [
          "dateOfBirth",
          "gender",
          "maritalStatus"
        ],
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "maritalStatus": {
            "$ref": "#/components/schemas/MaritalStatus"
          },
          "title": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          },
          "email": {
            "maxLength": 100,
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "emailPayslip": {
            "type": "boolean",
            "description": "If set to true then the employees Payslip will be sent by email when a PayRun is finalised."
          },
          "passwordProtectPayslip": {
            "type": "boolean",
            "description": "If set to true then when a payslip is sent by email a password will be set on it."
          },
          "pdfPassword": {
            "type": "string",
            "description": "Set the password to be used on PDFs. If blank then we'll create a password based on the PdfPasswordType property.",
            "nullable": true
          },
          "pdfPasswordType": {
            "$ref": "#/components/schemas/PdfPasswordType"
          },
          "emailStatement": {
            "type": "boolean",
            "description": "Only applicable to CIS Subcontractors. If set to true then we will automatically email a CIS Statement when a CIS300 is accepted."
          },
          "photoUrl": {
            "maxLength": 250,
            "type": "string",
            "nullable": true
          },
          "telephone": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "statePensionAge": {
            "type": "integer",
            "description": "[readonly] Automatically calculated.",
            "format": "int32"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "niNumber": {
            "maxLength": 15,
            "type": "string",
            "nullable": true
          },
          "passportNumber": {
            "maxLength": 25,
            "type": "string",
            "nullable": true
          },
          "partnerDetails": {
            "$ref": "#/components/schemas/PartnerDetails"
          }
        },
        "additionalProperties": false
      },
      "Post": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the Post",
            "nullable": true
          },
          "isPrimary": {
            "type": "boolean",
            "description": "Set to True if this is Primary post of the Employee"
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ProcessingNote": {
        "required": [
          "note"
        ],
        "type": "object",
        "properties": {
          "payRunEntryId": {
            "type": "string",
            "description": "The Id of the payrunEntry this ProcessingNote relates to, if any",
            "format": "uuid",
            "nullable": true
          },
          "note": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/Item"
          },
          "payRun": {
            "$ref": "#/components/schemas/Item"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "documentCount": {
            "type": "integer",
            "description": "[readonly] The number of attachments associated with this model",
            "format": "int32"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "[readonly] The attachments associated with this model",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ProRataRule": {
        "enum": [
          "WorkingDaysInPeriod",
          "TwoSixtyRule",
          "ThreeSixFiveRule"
        ],
        "type": "string"
      },
      "RecoverableAmounts": {
        "type": "object",
        "properties": {
          "taxMonth": {
            "type": "integer",
            "format": "int32"
          },
          "smpRecovered": {
            "type": "number",
            "description": "Value of Statutory Maternity Pay recovered year to date",
            "format": "double"
          },
          "sppRecovered": {
            "type": "number",
            "description": "Value of Statutory Paternity Pay recovered year to date",
            "format": "double"
          },
          "sapRecovered": {
            "type": "number",
            "description": "Value of Statutory Adoption Pay recovered year to date",
            "format": "double"
          },
          "shPPRecovered": {
            "type": "number",
            "description": "Value of Shared Parental Pay recovered year to date",
            "format": "double"
          },
          "spbpRecovered": {
            "type": "number",
            "description": "Value of Statutory Parental Bereavment Pay recovered year to date",
            "format": "double"
          },
          "nicCompensationOnSMP": {
            "type": "number",
            "description": "Value of NIC compensation on SMP year to date",
            "format": "double"
          },
          "nicCompensationOnSPP": {
            "type": "number",
            "description": "Value of NIC compensation on Statutory Paternity Pay year to date",
            "format": "double"
          },
          "nicCompensationOnSAP": {
            "type": "number",
            "description": "Value of NIC compensation on Statutory Adoption Pay year to date",
            "format": "double"
          },
          "nicCompensationOnShPP": {
            "type": "number",
            "description": "Value of NIC compensation on Shared Parental Pay year to date",
            "format": "double"
          },
          "nicCompensationOnSPBP": {
            "type": "number",
            "description": "Value of NIC compensation on Statutory Parental Bereavement Pay year to date",
            "format": "double"
          },
          "cisDeductionsSuffered": {
            "type": "number",
            "description": "Value of CIS deductions suffered year to date",
            "format": "double"
          },
          "total": {
            "type": "number",
            "description": "The total value of the reclaimed amounts",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Report": {
        "enum": [
          "GrossToNet",
          "GrossToNetCis",
          "PayrunPayments",
          "Furlough",
          "PensionContribs",
          "Journal",
          "HourlyPay",
          "UmbrellaReconciliation",
          "UmbrellaStatement",
          "StatutoryPay",
          "CostAnalysis",
          "CostOfEmployment",
          "FullSummaryOfPay",
          "P11",
          "P11d",
          "P30",
          "P32",
          "P45",
          "P60",
          "EmployeeExport",
          "RightToWork",
          "AeoStatement",
          "HolidayAllowances",
          "HolidayPayAccruals",
          "AeAssessments",
          "CisStatement",
          "SubcontractorSummary",
          "PayrollAnalysis",
          "VarianceReport",
          "P11Detailed",
          "NiLetterValidation",
          "Ytd",
          "TaxCodeChanges",
          "EmployeeBenefits"
        ],
        "type": "string"
      },
      "ReportCustomCssOption": {
        "enum": [
          "UseDefault",
          "AppendToDefault",
          "ReplaceDefault"
        ],
        "type": "string"
      },
      "ReportPack": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 150,
            "type": "string",
            "description": "The name of this ReportPack"
          },
          "reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Report"
            },
            "description": "The Reports included in this ReportPack",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "A ReportPack is used to group together a number of reports"
      },
      "ReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "description": "[readonly] If the type is application.json then this will contain a JSON representation of the relevant model",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "RightToWork": {
        "type": "object",
        "properties": {
          "checked": {
            "type": "boolean"
          },
          "documentType": {
            "$ref": "#/components/schemas/RightToWorkDocumentType"
          },
          "documentRef": {
            "maxLength": 80,
            "type": "string",
            "nullable": true
          },
          "documentExpiry": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "note": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RightToWorkDocumentType": {
        "enum": [
          "Other",
          "Visa",
          "Passport",
          "BirthCertificate",
          "IdentityCard",
          "ShareCode"
        ],
        "type": "string"
      },
      "RightToWorkReport": {
        "type": "object",
        "properties": {
          "employer": {
            "$ref": "#/components/schemas/Item"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RightToWorkReportLine"
            },
            "nullable": true
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false
      },
      "RightToWorkReportLine": {
        "type": "object",
        "properties": {
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "payrollCode": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "rightToWork": {
            "$ref": "#/components/schemas/RightToWork"
          }
        },
        "additionalProperties": false
      },
      "RightToWorkReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/RightToWorkReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "Role": {
        "enum": [
          "Admin",
          "Editor",
          "Reviewer",
          "PayrollClient"
        ],
        "type": "string"
      },
      "RtiAgent": {
        "type": "object",
        "properties": {
          "agentId": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "contact": {
            "$ref": "#/components/schemas/RtiContact"
          }
        },
        "additionalProperties": false
      },
      "RtiContact": {
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "email": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "telephone": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RtiEmployeeAddress": {
        "type": "object",
        "properties": {
          "line": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "postcode": {
            "type": "string",
            "nullable": true
          },
          "postCode": {
            "type": "string",
            "nullable": true
          },
          "ukPostcode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "foreignCountry": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RtiEmployeeName": {
        "type": "object",
        "properties": {
          "ttl": {
            "type": "string",
            "nullable": true
          },
          "fore": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "initials": {
            "type": "string",
            "nullable": true
          },
          "sur": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RtiSenderType": {
        "enum": [
          "ActingInCapacity",
          "Agent",
          "Bureau",
          "Company",
          "Employer",
          "Government",
          "Individual",
          "Other",
          "Partnership",
          "Trust"
        ],
        "type": "string"
      },
      "RtiSubmissionSettings": {
        "type": "object",
        "properties": {
          "senderType": {
            "$ref": "#/components/schemas/RtiSenderType"
          },
          "senderId": {
            "maxLength": 30,
            "type": "string",
            "description": "The SenderId used to submit RTI documents to HMRC",
            "nullable": true
          },
          "password": {
            "maxLength": 200,
            "type": "string",
            "description": "The Password used to submit RTI documents to HMRC",
            "nullable": true
          },
          "excludeNilPaid": {
            "type": "boolean",
            "description": "Whether or not to include Employees paid a zero amount on your FPS"
          },
          "includeHashCrossRef": {
            "type": "boolean",
            "description": "[readonly] Whether or not the Bacs Cross Ref field is included on your FPS submissions\r\nThis is automatically set to true if you use a bank payments CSV format that supports it\r\nor set to false if not"
          },
          "autoSubmitFps": {
            "type": "boolean",
            "description": "If set to true, we'll automatically send your FPS to HMRC whenever you finalise a PayRun"
          },
          "testInLive": {
            "type": "boolean",
            "description": "Used for testing the RTI gateway. If set to true then the Document Type name will have \"-TIL\" appended to it"
          },
          "useTestGateway": {
            "type": "boolean",
            "description": "If set to true then your RTI documents will be sent to HMRCs test services instead of the live service"
          },
          "overrideTimestampValue": {
            "maxLength": 25,
            "type": "string",
            "description": "If a value is provided then it will be used as the timestamp on the RTI submission. This would normally only be used for testing purposes.",
            "nullable": true
          },
          "contact": {
            "$ref": "#/components/schemas/RtiContact"
          },
          "agent": {
            "$ref": "#/components/schemas/RtiAgent"
          }
        },
        "additionalProperties": false
      },
      "RtiValidationWarning": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/RtiValidationWarningType"
          },
          "employeeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RtiValidationWarningType": {
        "enum": [
          "MissingAddress",
          "MissingNiNo"
        ],
        "type": "string"
      },
      "SmtpEncryption": {
        "enum": [
          "Auto",
          "Ssl",
          "Tls"
        ],
        "type": "string"
      },
      "SmtpSettings": {
        "type": "object",
        "properties": {
          "smtpServer": {
            "type": "string",
            "nullable": true
          },
          "smtpPort": {
            "type": "integer",
            "format": "int32"
          },
          "encryption": {
            "$ref": "#/components/schemas/SmtpEncryption"
          },
          "smtpUsername": {
            "type": "string",
            "nullable": true
          },
          "smtpPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StarterDeclaration": {
        "enum": [
          "A",
          "B",
          "C",
          "Unknown"
        ],
        "type": "string"
      },
      "StarterDetails": {
        "required": [
          "startDate",
          "starterDeclaration"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "starterDeclaration": {
            "$ref": "#/components/schemas/StarterDeclaration"
          },
          "overseasEmployerDetails": {
            "$ref": "#/components/schemas/OverseasEmployerDetails"
          },
          "pensionerPayroll": {
            "$ref": "#/components/schemas/PensionerPayroll"
          }
        },
        "additionalProperties": false
      },
      "StatutoryPay": {
        "type": "object",
        "properties": {
          "weeklyParentalLeaveAmount": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "weeklySickPayAmount": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "aweEligibilityThreshold": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Part of the TaxYearConfig that our engine uses to calculate Statutory Pay.\r\nIt is used internally when our engine performs calculations.\r\nYou do not need to do anything with this model, it's provided purely for informational purposes."
      },
      "StatutoryPayReport": {
        "type": "object",
        "properties": {
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatutoryPayReportLine"
            },
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Item"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "periodTo": {
            "type": "integer",
            "format": "int32"
          },
          "startPeriodName": {
            "type": "string",
            "nullable": true
          },
          "endPeriodName": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false
      },
      "StatutoryPayReportLine": {
        "type": "object",
        "properties": {
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "payrollCode": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "smp": {
            "type": "number",
            "format": "double"
          },
          "spp": {
            "type": "number",
            "format": "double"
          },
          "sap": {
            "type": "number",
            "format": "double"
          },
          "shpp": {
            "type": "number",
            "format": "double"
          },
          "spbp": {
            "type": "number",
            "format": "double"
          },
          "totalStatPay": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "StatutoryPayReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/StatutoryPayReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "StringStringKeyValuePair": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StudentLoan": {
        "enum": [
          "None",
          "PlanOne",
          "PlanTwo",
          "PlanFour"
        ],
        "type": "string"
      },
      "StudentLoanRecovered": {
        "type": "object",
        "properties": {
          "planType": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmissionStatus": {
        "enum": [
          "NotSubmitted",
          "Submitted",
          "ErrorResponse",
          "Accepted"
        ],
        "type": "string"
      },
      "Tag": {
        "required": [
          "code",
          "title"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "The unique code for this Tag"
          },
          "title": {
            "maxLength": 50,
            "type": "string",
            "description": "The title for this Tag"
          },
          "color": {
            "maxLength": 6,
            "type": "string",
            "description": "A color to used to represent this Tag, in hex format. ie 'ff0000'",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaxAndNi": {
        "required": [
          "niTable"
        ],
        "type": "object",
        "properties": {
          "niTable": {
            "type": "string",
            "description": "The appropriate NI letter for this Employee"
          },
          "secondaryClass1NotPayable": {
            "type": "boolean",
            "description": "If set to true then no Employer NI will be paid for this Employee"
          },
          "postgradLoan": {
            "type": "boolean",
            "description": "Set to true if the Employee needs to make Post Graduate Loan repayments"
          },
          "postgraduateLoanStartDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "postgraduateLoanEndDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "studentLoan": {
            "$ref": "#/components/schemas/StudentLoan"
          },
          "studentLoanStartDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "studentLoanEndDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "taxCode": {
            "maxLength": 12,
            "type": "string",
            "description": "The Tax Code for this Employee",
            "nullable": true
          },
          "week1Month1": {
            "type": "boolean",
            "description": "Determines whether PAYE should be calculated on a Week1/Month1 basis instead of on a cumulative basis.\r\nThis is automatically set to false for any existing Employees when you start a new Tax Year."
          }
        },
        "additionalProperties": false
      },
      "TaxBracket": {
        "type": "object",
        "properties": {
          "from": {
            "type": "number",
            "description": "[readonly] The starting point for applying this tax rate",
            "format": "double"
          },
          "to": {
            "type": "number",
            "description": "[readonly] The end point for applying this tax rate",
            "format": "double"
          },
          "multiplier": {
            "type": "number",
            "description": "[readonly] The tax rate to apply",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "TaxCodeChange": {
        "type": "object",
        "properties": {
          "suffix": {
            "type": "string",
            "description": "[readonly] The suffix of the Tax Code that needs to be incremented for this Tax Year",
            "nullable": true
          },
          "increment": {
            "type": "integer",
            "description": "[readonly] The amount by which to increment Tax Codes with the given suffix",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Part of the TaxYearConfig that our engine uses to perform the Year End routine.\r\nIt is used internally when our engine performs the Year End routine.\r\nYou do not need to do anything with this model, it's provided purely for informational purposes."
      },
      "TaxCodeChangeReport": {
        "type": "object",
        "properties": {
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxCodeChangeValues"
            },
            "nullable": true
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false
      },
      "TaxCodeChangeReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/TaxCodeChangeReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "TaxCodeChangeValues": {
        "type": "object",
        "properties": {
          "employeeId": {
            "type": "integer",
            "format": "int32"
          },
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "payrollCode": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "niNumber": {
            "type": "string",
            "nullable": true
          },
          "periodChange": {
            "type": "integer",
            "format": "int32"
          },
          "previousTaxCode": {
            "type": "string",
            "nullable": true
          },
          "currentTaxCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaxYear": {
        "enum": [
          "Year2017",
          "Year2018",
          "Year2019",
          "Year2020",
          "Year2021",
          "Year2022"
        ],
        "type": "string"
      },
      "TaxYearConfig": {
        "type": "object",
        "properties": {
          "taxYear": {
            "type": "integer",
            "description": "[readonly] The TaxYear for which this configuration applies",
            "format": "int32"
          },
          "isPreview": {
            "type": "boolean",
            "description": "[readonly] Indicates that this is a preview of the given years configuration and it shouldn't yet be used for live processing of payroll data."
          },
          "defaultTaxCode": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "class1ANicsRate": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "lowerEarningsLimit": {
            "$ref": "#/components/schemas/PeriodValue"
          },
          "upperEarningsLimit": {
            "$ref": "#/components/schemas/PeriodValue"
          },
          "primaryThreshold": {
            "$ref": "#/components/schemas/PeriodValue"
          },
          "secondaryThreshold": {
            "$ref": "#/components/schemas/PeriodValue"
          },
          "upperAccrualPoint": {
            "$ref": "#/components/schemas/PeriodValue"
          },
          "upperSecondaryThreshold": {
            "$ref": "#/components/schemas/PeriodValue"
          },
          "apprenticeUpperSecondaryThreshold": {
            "$ref": "#/components/schemas/PeriodValue"
          },
          "freeportsUpperSecondaryThreshold": {
            "$ref": "#/components/schemas/PeriodValue"
          },
          "veteransUpperSecondaryThreshold": {
            "$ref": "#/components/schemas/PeriodValue"
          },
          "directorsProratePrimaryThreshold": {
            "$ref": "#/components/schemas/PeriodValue"
          },
          "plan1StudentLoanThreshold": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "plan1StudentLoanRate": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "plan2StudentLoanThreshold": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "plan2StudentLoanRate": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "plan4StudentLoanThreshold": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "plan4StudentLoanRate": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "postGradLoanThreshold": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "postGradLoanRate": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "deaProtectedEarnings": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "pensionLowerThreshold": {
            "$ref": "#/components/schemas/PeriodValue"
          },
          "pensionAutomaticEnrolment": {
            "$ref": "#/components/schemas/PeriodValue"
          },
          "pensionUpperThreshold": {
            "$ref": "#/components/schemas/PeriodValue"
          },
          "pensionAeEmployerContribution": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "pensionAeEmployeeContribution": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "employmentAllowancePreviousYear": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "employmentAllowance": {
            "type": "number",
            "description": "[readonly]",
            "format": "double"
          },
          "fixedCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FixedCode"
            },
            "description": "[readonly]",
            "nullable": true
          },
          "scottishFixedCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FixedCode"
            },
            "description": "[readonly]",
            "nullable": true
          },
          "welshFixedCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FixedCode"
            },
            "description": "[readonly]",
            "nullable": true
          },
          "niRates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NationalInsuranceCode"
            },
            "description": "[readonly]",
            "nullable": true
          },
          "brackets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxBracket"
            },
            "description": "[readonly]",
            "nullable": true
          },
          "scottishBrackets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxBracket"
            },
            "description": "[readonly]",
            "nullable": true
          },
          "welshBrackets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxBracket"
            },
            "description": "[readonly]",
            "nullable": true
          },
          "taxCodeChanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxCodeChange"
            },
            "description": "[readonly]",
            "nullable": true
          },
          "minimumWage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NationalMinimumWage"
            },
            "description": "[readonly]",
            "nullable": true
          },
          "statutoryPay": {
            "$ref": "#/components/schemas/StatutoryPay"
          },
          "loanCharge": {
            "$ref": "#/components/schemas/LoanCharge"
          },
          "carCharge": {
            "$ref": "#/components/schemas/CarCharge"
          },
          "govTalk": {
            "$ref": "#/components/schemas/GovTalk"
          },
          "mileageAllowancePaymentsRates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MileageAllowancePaymentsRate"
            },
            "description": "[readonly]",
            "nullable": true
          },
          "tieredPensions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TieredPension"
            },
            "description": "[readonly]",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The configuation that our engine uses to perform calculations for the related TaxYear.\r\nIt is used internally when our engine performs any calculations or the Year End routine.\r\nYou do not need to do anything with this model, it's provided purely for informational purposes."
      },
      "TeachersPensionDetails": {
        "type": "object",
        "properties": {
          "employmentType": {
            "$ref": "#/components/schemas/TeachersPensionEmploymentType"
          },
          "fullTimeSalary": {
            "type": "integer",
            "description": "Up to 7 digits, in pounds. eg 24000",
            "format": "int32",
            "nullable": true
          },
          "partTimeSalaryPaid": {
            "type": "integer",
            "description": "Up to 7 digits, in pounds. eg 24000",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to represent additional information needed for \r\nTeachers' Pensions"
      },
      "TeachersPensionEmploymentType": {
        "enum": [
          "FullTime",
          "PartTimeRegular",
          "IrregularPartTime",
          "IrregularPartTime_In"
        ],
        "type": "string"
      },
      "Tenant": {
        "type": "object",
        "properties": {
          "brandCode": {
            "maxLength": 100,
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "appName": {
            "type": "string",
            "nullable": true
          },
          "homeUrl": {
            "type": "string",
            "nullable": true
          },
          "headContent": {
            "type": "string",
            "nullable": true
          },
          "logOutUrl": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "loginImgUrl": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "homeImgUrl": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "favIcon": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "cssColorsFile": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "cssFile": {
            "type": "string",
            "description": "[readonly]",
            "nullable": true
          },
          "mailingList": {
            "type": "boolean"
          },
          "htmlInsertions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantHtmlInsertion"
            },
            "nullable": true
          },
          "mailSettings": {
            "$ref": "#/components/schemas/MailSettings"
          },
          "signupUrl": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "termsUrl": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "helpUrl": {
            "maxLength": 250,
            "type": "string",
            "nullable": true
          },
          "supportEmail": {
            "maxLength": 150,
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "newUserSignupEmail": {
            "maxLength": 150,
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "approveNewUsers": {
            "type": "boolean"
          },
          "enableBureauFeatures": {
            "type": "boolean"
          },
          "requireDdMandateBeforeAllowingBillableActivity": {
            "type": "boolean"
          },
          "enableOmnipresentUsers": {
            "type": "boolean"
          },
          "tenantOwnsBilling": {
            "type": "boolean",
            "description": "[readonly]"
          },
          "billingSettings": {
            "$ref": "#/components/schemas/TenantBillingSettings"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "The Tenant model represents the brand that provides the account.\r\nThis is used by our White Label partners to manage and brand their user accounts.\r\nUnless you are an admin for a White Label account you'll have no interest in this model."
      },
      "TenantBillingSettings": {
        "type": "object",
        "properties": {
          "discount": {
            "type": "number",
            "format": "double"
          },
          "monthlyMinimum": {
            "type": "number",
            "format": "double"
          },
          "aggregatedPricing": {
            "type": "boolean"
          },
          "billTo": {
            "type": "string",
            "description": "If all activity for a Tenant is being biulled to a specifc user, set the email address here",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TenantEmail": {
        "required": [
          "subject",
          "toEmail",
          "toName"
        ],
        "type": "object",
        "properties": {
          "_statusMessage": {
            "type": "string",
            "nullable": true
          },
          "toName": {
            "maxLength": 150,
            "type": "string"
          },
          "toEmail": {
            "maxLength": 150,
            "type": "string"
          },
          "subject": {
            "maxLength": 150,
            "type": "string"
          },
          "buttonText": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "buttonLink": {
            "maxLength": 250,
            "type": "string",
            "nullable": true
          },
          "bodyPreview": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "afterBtnBody": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "statusDate": {
            "type": "string",
            "format": "date-time"
          },
          "statusMessage": {
            "type": "string",
            "nullable": true
          },
          "sendAttempts": {
            "type": "integer",
            "format": "int32"
          },
          "webAppBaseUrl": {
            "type": "string",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailAttachment"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TenantHtmlInsertion": {
        "type": "object",
        "properties": {
          "insertionPoint": {
            "$ref": "#/components/schemas/HtmlInsertionPoint"
          },
          "content": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TenantItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a Tenant that the user account can administrate.\r\nUnless you are an admin for a White Label account you'll have no interest in this model."
      },
      "TieredPension": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PensionContributionLevelType"
          },
          "rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TieredPensionRate"
            },
            "nullable": true
          },
          "employerContribRate": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Part of the TaxYearConfig that our engine uses to calculate tiered pension contributions.\r\nIt is used internally when our engine performs calculations.\r\nYou do not need to do anything with this model, it's provided purely for informational purposes."
      },
      "TieredPensionRate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rangeStart": {
            "type": "number",
            "format": "double"
          },
          "rate": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Part of the TaxYearConfig that our engine uses to calculate tiered pension contributions.\r\nIt is used internally when our engine performs calculations.\r\nYou do not need to do anything with this model, it's provided purely for informational purposes."
      },
      "UmbrellaPayment": {
        "type": "object",
        "properties": {
          "payrollCode": {
            "type": "string",
            "description": "When importing multiple UmbrellaPayments this field is used to identify the employee",
            "nullable": true
          },
          "chargePerTimesheet": {
            "type": "number",
            "description": "Override the settings for this employer by specifying a ChargePerTimeSheet.\r\nOr leave it as null to use the settings from the Employer",
            "format": "double",
            "nullable": true
          },
          "invoiceValue": {
            "type": "number",
            "format": "double"
          },
          "mapsMiles": {
            "type": "integer",
            "format": "int32"
          },
          "otherExpenses": {
            "type": "number",
            "format": "double"
          },
          "numberOfTimesheets": {
            "type": "integer",
            "format": "int32"
          },
          "hoursWorked": {
            "type": "number",
            "format": "double"
          },
          "grossDeduction": {
            "type": "number",
            "format": "double"
          },
          "grossAddition": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "UmbrellaReconciliationReport": {
        "type": "object",
        "properties": {
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UmbrellaReconciliationReportLine"
            },
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Item"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriods"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "periodTo": {
            "type": "integer",
            "format": "int32"
          },
          "startPeriodName": {
            "type": "string",
            "nullable": true
          },
          "endPeriodName": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false
      },
      "UmbrellaReconciliationReportLine": {
        "type": "object",
        "properties": {
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "period": {
            "type": "string",
            "nullable": true
          },
          "payrollCode": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "totalGross": {
            "type": "number",
            "format": "double"
          },
          "netPay": {
            "type": "number",
            "format": "double"
          },
          "tax": {
            "type": "number",
            "format": "double"
          },
          "employeeNi": {
            "type": "number",
            "format": "double"
          },
          "employerNi": {
            "type": "number",
            "format": "double"
          },
          "employeePension": {
            "type": "number",
            "format": "double"
          },
          "employerPension": {
            "type": "number",
            "format": "double"
          },
          "expenses": {
            "type": "number",
            "format": "double"
          },
          "fee": {
            "type": "number",
            "format": "double"
          },
          "appLevy": {
            "type": "number",
            "format": "double"
          },
          "invoiceValue": {
            "type": "number",
            "format": "double"
          },
          "employeeCosts": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "employerCosts": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "total": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UmbrellaReconciliationReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/UmbrellaReconciliationReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "UmbrellaSettings": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "chargePerTimesheet": {
            "type": "number",
            "format": "double"
          },
          "apprenticeshipLevyDednRate": {
            "type": "number",
            "format": "double"
          },
          "holidayRate": {
            "type": "number",
            "format": "double"
          },
          "dpsbCode": {
            "type": "string",
            "nullable": true
          },
          "expensesCode": {
            "type": "string",
            "nullable": true
          },
          "grossDeductionCode": {
            "type": "string",
            "nullable": true
          },
          "holidayCode": {
            "type": "string",
            "nullable": true
          },
          "cisFeeCode": {
            "type": "string",
            "nullable": true
          },
          "detailFeeInComment": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UsageBill": {
        "type": "object",
        "properties": {
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "type": "integer",
            "format": "int32"
          },
          "payslipCount": {
            "type": "integer",
            "format": "int32"
          },
          "previouslyBilledPayslipCount": {
            "type": "integer",
            "description": "The number of payslips that appear in the usage, but were billed in a previous period",
            "format": "int32"
          },
          "netCost": {
            "type": "number",
            "format": "double"
          },
          "discount": {
            "type": "number",
            "format": "double"
          },
          "partnerDiscountAmount": {
            "type": "number",
            "format": "double"
          },
          "monthlyMinimum": {
            "type": "number",
            "format": "double"
          },
          "total": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "paid": {
            "type": "boolean"
          },
          "usage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "nullable": true
          },
          "accountingCustomerId": {
            "type": "string",
            "nullable": true
          },
          "accountingInvoiceId": {
            "type": "string",
            "nullable": true
          },
          "accountingInvoiceLink": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/UserCategory"
          },
          "emailAddress": {
            "maxLength": 150,
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "pendingEmailAddress": {
            "maxLength": 150,
            "type": "string",
            "description": "If the user has requested to change their email address then the \r\naddress it'll be changed to after verification will be shown here.",
            "format": "email",
            "nullable": true
          },
          "firstName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "salutation": {
            "maxLength": 35,
            "pattern": "^[A-Za-z '\\-]{1,35}$",
            "type": "string",
            "nullable": true
          },
          "userIdentifier": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "photo": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "jobType": {
            "$ref": "#/components/schemas/UserJobType"
          },
          "jobTitle": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "telephoneNumber": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "businessName": {
            "maxLength": 160,
            "pattern": "^[A-Za-z0-9 ,;:'£()\\-\\.\\@\\$\\&]{1,160}$",
            "type": "string",
            "nullable": true
          },
          "industry": {
            "$ref": "#/components/schemas/UserIndustry"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "statedEmployeeCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "emailVerified": {
            "type": "boolean"
          },
          "gdprOptin": {
            "type": "boolean"
          },
          "inviteCode": {
            "type": "string",
            "nullable": true
          },
          "registrationIp": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "registrationDate": {
            "type": "string",
            "format": "date"
          },
          "lastLogin": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "isActivated": {
            "type": "boolean"
          },
          "authorization": {
            "$ref": "#/components/schemas/UserAuthorization"
          },
          "isSuperAdmin": {
            "type": "boolean"
          },
          "canUseBureauFeatures": {
            "type": "boolean"
          },
          "omnipresentRole": {
            "$ref": "#/components/schemas/Role"
          },
          "tenant": {
            "$ref": "#/components/schemas/Tenant"
          },
          "requestDdSetup": {
            "type": "boolean",
            "description": "[readonly] If true then the user is required to set up a direct debit mandate"
          },
          "disabled": {
            "type": "boolean",
            "description": "[readonly] If true then any employers the owner managed will not be able to run new payruns.\r\nDisabledReason will give a reason why the account is disabled"
          },
          "canCreateEmployers": {
            "type": "boolean",
            "description": "[readonly] If false then the user cannot create new employers.\r\nThis can be turned on or off by the tenant admin."
          },
          "disabledReason": {
            "type": "string",
            "nullable": true
          },
          "directDebitMandate": {
            "$ref": "#/components/schemas/DirectDebitMandate"
          },
          "displayPrefs": {
            "$ref": "#/components/schemas/UserDisplayPreferences"
          },
          "showBills": {
            "type": "boolean",
            "description": "[readonly] Whether or not the user can see bills. This will be false if the Tenant manages billing and the user is not an admin for the Tenant",
            "nullable": true
          },
          "accountingCustomerId": {
            "type": "string",
            "description": "[readonly] Used internally to manage billing",
            "nullable": true
          },
          "utmInfo": {
            "$ref": "#/components/schemas/UtmInfo"
          },
          "firstBillableActivityDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "bureauNotificationEmailAddress": {
            "maxLength": 150,
            "type": "string",
            "description": "If an email address is provided here then Bureau-related notifications will go to this address instead of the EmailAddress",
            "format": "email",
            "nullable": true
          },
          "monthlyMinimum": {
            "$ref": "#/components/schemas/MonthlyMinimum"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a User Account.\r\nAs well as basic details about the user it also includes details of Employers that the user account can access."
      },
      "UserAuthorization": {
        "type": "object",
        "properties": {
          "employers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployerItem"
            },
            "description": "[readonly] A list of any Employers that the user can access",
            "nullable": true
          },
          "tenants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantItem"
            },
            "description": "[readonly] A list of any Tenants that the user can administrate",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This model provides information about what the User is able to access.\r\nThis would usually just be a list of Employers. But if the user is an administrator for a White Label instance then this will be shown in the list of Tenants."
      },
      "UserCategory": {
        "enum": [
          "ActiveTrialist",
          "AgedActiveTrialist",
          "LapsedTrialist",
          "ActiveCustomer",
          "LapsedCustomer",
          "SubUser",
          "AgedActiveTrialistAndSubUser",
          "InternalUser"
        ],
        "type": "string"
      },
      "UserDisplayPreferences": {
        "type": "object",
        "properties": {
          "startPage": {
            "$ref": "#/components/schemas/UserstartPage"
          },
          "showZeroes": {
            "type": "boolean"
          },
          "showTaxCodeWhenViewingPayrunEntry": {
            "type": "boolean"
          },
          "allowJournalResubmit": {
            "type": "boolean"
          },
          "hideSalaryOnEmployeeIndexPage": {
            "type": "boolean"
          },
          "enableMultiEmployerImport": {
            "type": "boolean"
          },
          "enableCovid19Features": {
            "type": "boolean"
          },
          "hidePayslipCheckboxes": {
            "type": "boolean"
          },
          "hidePayslipSearchAndSort": {
            "type": "boolean"
          },
          "showYtdInPayslipView": {
            "type": "boolean"
          },
          "enableDpsXmlUpload": {
            "type": "boolean"
          },
          "enableRtiTimestampOverride": {
            "type": "boolean"
          },
          "enablePayrunWarnings": {
            "type": "boolean"
          },
          "enableWorkingDaysOverrides": {
            "type": "boolean"
          },
          "cookiePreference": {
            "$ref": "#/components/schemas/CookiePreference"
          }
        },
        "additionalProperties": false
      },
      "UserIndustry": {
        "enum": [
          "NotSpecified",
          "Agriculture",
          "Apparel",
          "Banking",
          "Biotechnology",
          "Chemicals",
          "Communication",
          "Construction",
          "Consulting",
          "Education",
          "Engineering",
          "Entertainment",
          "Environmental",
          "Finance",
          "FoodAndBeverage",
          "Government",
          "Healthcare",
          "Hospitality",
          "Insurance",
          "Legal",
          "Machinery",
          "Manufacturing",
          "Media",
          "NotForProfit",
          "Other",
          "Recreation",
          "Retail",
          "Shipping",
          "Technology",
          "Telecommunications",
          "Transportation",
          "Utilities"
        ],
        "type": "string"
      },
      "UserJobType": {
        "enum": [
          "BusinessOwner",
          "PayrollManager",
          "Accountant",
          "Developer",
          "SoftwareVendor",
          "Other"
        ],
        "type": "string"
      },
      "UserstartPage": {
        "enum": [
          "Dashboard",
          "EmployerList",
          "EmployeeList",
          "Payroll",
          "Rti",
          "BureauDashboard"
        ],
        "type": "string"
      },
      "UtmInfo": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "nullable": true
          },
          "medium": {
            "type": "string",
            "nullable": true
          },
          "term": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "campaign": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ValueOverride": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PayrollValueType"
          },
          "value": {
            "type": "number",
            "description": "The value to use in place of the original value",
            "format": "double"
          },
          "originalValue": {
            "type": "number",
            "description": "[readonly] The original value",
            "format": "double"
          },
          "note": {
            "maxLength": 150,
            "type": "string",
            "description": "The reason given for the overrride",
            "nullable": true
          },
          "attachmentOrderId": {
            "type": "string",
            "description": "The Id of the AttachmentOrder. Only relevant if the Type is set to AttachmentOrderDeductions",
            "format": "uuid",
            "nullable": true
          },
          "pensionId": {
            "type": "string",
            "description": "The Id of the associated Pension. Only included if the Code is PENSION, PENSIONSS or PENSIONRAS",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VarianceReport": {
        "type": "object",
        "properties": {
          "showDifferenceAsPercentage": {
            "type": "boolean"
          },
          "minimumChangePercentage": {
            "type": "number",
            "format": "double"
          },
          "primary": {
            "$ref": "#/components/schemas/GrossToNetReport"
          },
          "secondary": {
            "$ref": "#/components/schemas/GrossToNetReport"
          },
          "joiners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrossToNetReportLine"
            },
            "nullable": true,
            "readOnly": true
          },
          "leavers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrossToNetReportLine"
            },
            "nullable": true,
            "readOnly": true
          },
          "hasDepartments": {
            "type": "boolean",
            "readOnly": true
          },
          "commonLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrossToNetReportLine"
            },
            "nullable": true,
            "readOnly": true
          },
          "hasVariances": {
            "type": "boolean",
            "readOnly": true
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false
      },
      "VarianceReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/VarianceReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "VeteranDetails": {
        "type": "object",
        "properties": {
          "isVeteran": {
            "type": "boolean",
            "description": "Set to true if the employee is a veteran"
          },
          "firstCivilianEmploymentDate": {
            "type": "string",
            "description": "Date of Veteran's first civilian employment",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Employment details for veterans"
      },
      "Webhook": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "webhookEvent": {
            "$ref": "#/components/schemas/WebhookEvent"
          },
          "url": {
            "maxLength": 300,
            "type": "string",
            "description": "The Url to which the payload should be sent",
            "format": "uri"
          },
          "active": {
            "type": "boolean",
            "description": "If set to false then this Webhook will not be triggered"
          },
          "eventCount": {
            "type": "integer",
            "description": "The number of times this webhook has been triggered",
            "format": "int32"
          },
          "lastPayload": {
            "$ref": "#/components/schemas/WebhookPayload"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "WebhookEvent": {
        "enum": [
          "Employee_Created",
          "Employee_Updated",
          "Employee_Deleted",
          "Payrun_Finalised"
        ],
        "type": "string"
      },
      "WebhookPayload": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 150,
            "type": "string",
            "description": "[readonly] A descriptive name for this payload",
            "nullable": true
          },
          "url": {
            "maxLength": 300,
            "type": "string",
            "description": "[readonly] The Url that payload will be sent to",
            "format": "uri"
          },
          "attempts": {
            "type": "integer",
            "description": "[readonly]  The number of attempts that have been made to deliver this payload",
            "format": "int32"
          },
          "statusCode": {
            "type": "integer",
            "description": "[readonly] The status code received from the Url",
            "format": "int32"
          },
          "taskStatus": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "statusMessage": {
            "maxLength": 150,
            "type": "string",
            "description": "[readonly]  A message to accompany the status",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "[readonly]  The date and time this payload was created",
            "format": "date",
            "readOnly": true
          },
          "payload": {
            "description": "[readonly] the JSON payload that will be sent to the URl",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "WorkerGroup": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 150,
            "minLength": 1,
            "type": "string"
          },
          "contributionLevelType": {
            "$ref": "#/components/schemas/PensionContributionLevelType"
          },
          "employeeContribution": {
            "type": "number",
            "format": "double"
          },
          "employeeContributionIsPercentage": {
            "type": "boolean"
          },
          "employerContribution": {
            "type": "number",
            "format": "double"
          },
          "employerContributionIsPercentage": {
            "type": "boolean"
          },
          "employerContributionTopUpPercentage": {
            "type": "number",
            "description": "Increase Employer Contribution by this percentage of the Employee Contribution",
            "format": "double"
          },
          "customThreshold": {
            "type": "boolean"
          },
          "lowerLimit": {
            "type": "number",
            "format": "double"
          },
          "upperLimit": {
            "type": "number",
            "format": "double"
          },
          "papdisGroup": {
            "maxLength": 40,
            "type": "string",
            "nullable": true
          },
          "papdisSubGroup": {
            "maxLength": 40,
            "type": "string",
            "nullable": true
          },
          "localAuthorityNumber": {
            "maxLength": 3,
            "type": "string",
            "description": "Only applicable if ContributionLevelType is Tp2020",
            "nullable": true
          },
          "schoolEmployerType": {
            "maxLength": 4,
            "type": "string",
            "description": "Only applicable if ContributionLevelType is Tp2020",
            "nullable": true
          },
          "workerGroupId": {
            "type": "string",
            "description": "[readonly]",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "WorkingPattern": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 100,
            "type": "string"
          },
          "mon": {
            "type": "number",
            "format": "double"
          },
          "tue": {
            "type": "number",
            "format": "double"
          },
          "wed": {
            "type": "number",
            "format": "double"
          },
          "thu": {
            "type": "number",
            "format": "double"
          },
          "fri": {
            "type": "number",
            "format": "double"
          },
          "sat": {
            "type": "number",
            "format": "double"
          },
          "sun": {
            "type": "number",
            "format": "double"
          },
          "bankHolidays": {
            "$ref": "#/components/schemas/BankHolidayCollection"
          },
          "proRataRule": {
            "$ref": "#/components/schemas/ProRataRule"
          },
          "bankHolidayDates": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "description": "[readonly] The dates that are classed as Bank Holidays for this Working Pattern",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "description": "[readonly] The unique id of the object",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "YearEnd": {
        "type": "object",
        "properties": {
          "endingYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "startingYear": {
            "$ref": "#/components/schemas/TaxYear"
          },
          "createEpsForFinalSubmission": {
            "type": "boolean",
            "description": "[readonly] Whether or not the system will automatically create an EPS to tell HMRC the year has ended."
          },
          "createEpsForEmploymentAllowance": {
            "type": "boolean",
            "description": "[readonly] Whether or not the system will automatically create an EPS to tell HMRC you qualify for Employment Allowance."
          },
          "createExb": {
            "type": "boolean",
            "description": "[readonly] Whether or not the system will automatically create an EXB to inform HMRC of Expenses and Benefits"
          },
          "setEmploymentAllowance": {
            "type": "number",
            "description": "[readonly] If the Employment Allowance needs to be changed, this indicates the new value",
            "format": "double",
            "nullable": true
          },
          "taxCodeChanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/YearEndTaxCodeChange"
            },
            "description": "[readonly] Details of changes that wil be made to Tax Codes",
            "nullable": true
          },
          "removeWeek1Month1": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "[readonly] Employees that will have the Week1Month1 flag removed from their tax code",
            "nullable": true
          },
          "emailP60": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "[readonly] Employees who will be automatically emailed P60s",
            "nullable": true
          },
          "pushP60": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalDataProviderId"
            },
            "description": "[readonly] ExternalDataProviderIds to which P60s can be pushed",
            "nullable": true
          },
          "emailCisStatement": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "[readonly] Subcontractors who will be automatically sent an annual CIS Statement",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This model gives you a summary of what will happen when you confirm the closing of one year and the start of the next"
      },
      "YearEndTaxCodeChange": {
        "type": "object",
        "properties": {
          "employee": {
            "$ref": "#/components/schemas/Item"
          },
          "currentCode": {
            "type": "string",
            "description": "[readonly] The Employees current tax code",
            "nullable": true
          },
          "newCode": {
            "type": "string",
            "description": "[readonly] The new TaxCode for the employee",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Forms part of the YearEnd model to list changes to Tax Codes"
      },
      "YtdReport": {
        "type": "object",
        "properties": {
          "payrun": {
            "$ref": "#/components/schemas/PayRun"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeYtdValues"
            },
            "nullable": true
          },
          "report": {
            "$ref": "#/components/schemas/Report"
          },
          "taxYear": {
            "$ref": "#/components/schemas/TaxYear"
          }
        },
        "additionalProperties": false
      },
      "YtdReportReportResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "[readonly] The content-type, this would usually be the same as the accept header you provided when you requested the report",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "[readonly] This could contain a link to a PDF file, HTML content or other content, depending on the Type value.",
            "nullable": true
          },
          "model": {
            "$ref": "#/components/schemas/YtdReport"
          }
        },
        "additionalProperties": false,
        "description": "Used to encapsulate a response for any of the reports.\r\nSee the Introduction Guide for Reports for more details"
      },
      "YtdValue": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PayrollValueType"
          },
          "broughtForward": {
            "type": "number",
            "format": "double"
          },
          "period": {
            "type": "number",
            "format": "double"
          },
          "value": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "Log in via our oAuth provider",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://id.payroll-app.com/authorize",
            "scopes": {
              "write:all": "Access read operations"
            }
          }
        }
      },
      "Basic": {
        "type": "http",
        "description": "If you have an API Key then enter is as the password.<br> The username can be anything you like.",
        "scheme": "basic"
      }
    }
  },
  "security": [
    {
      "Basic": [ ]
    },
    {
      "oauth2": [
        "openid",
        "profile",
        "email"
      ]
    }
  ]
}
